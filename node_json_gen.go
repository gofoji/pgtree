// Code generated by foji 0.3, template: foji/node_json.go.tpl; DO NOT EDIT.

package pgtree

import (
	"encoding/json"
	"fmt"
	"strings"
)

func UnmarshalNodeJSON(input []byte) (node Node, err error) {
	if strings.HasPrefix(string(input), "[") {
		var list Nodes
		list, err = UnmarshalNodeArrayJSON(input)
		if err != nil {
			return
		}

		node = list
		return
	}

	var nodeMap map[string]json.RawMessage

	err = json.Unmarshal(input, &nodeMap)
	if err != nil {
		return
	}

	for nodeType, jsonText := range nodeMap {
		switch nodeType {

		case "Integer":
			var outNode Integer
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "Float":
			var outNode Float
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "String":
			var outNode String
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "BitString":
			var outNode BitString
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "Null":
			var outNode Null
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "List":
			var outNode List
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "OidList":
			var outNode OidList
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "IntList":
			var outNode IntList
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "Alias":
			var outNode Alias
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RangeVar":
			var outNode RangeVar
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "TableFunc":
			var outNode TableFunc
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "Expr":
			var outNode Expr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "Var":
			var outNode Var
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "Param":
			var outNode Param
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "Aggref":
			var outNode Aggref
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "GroupingFunc":
			var outNode GroupingFunc
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "WindowFunc":
			var outNode WindowFunc
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SubscriptingRef":
			var outNode SubscriptingRef
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "FuncExpr":
			var outNode FuncExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "NamedArgExpr":
			var outNode NamedArgExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "OpExpr":
			var outNode OpExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DistinctExpr":
			var outNode DistinctExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "NullIfExpr":
			var outNode NullIfExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ScalarArrayOpExpr":
			var outNode ScalarArrayOpExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "BoolExpr":
			var outNode BoolExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SubLink":
			var outNode SubLink
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SubPlan":
			var outNode SubPlan
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlternativeSubPlan":
			var outNode AlternativeSubPlan
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "FieldSelect":
			var outNode FieldSelect
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "FieldStore":
			var outNode FieldStore
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RelabelType":
			var outNode RelabelType
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CoerceViaIO":
			var outNode CoerceViaIo
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ArrayCoerceExpr":
			var outNode ArrayCoerceExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ConvertRowtypeExpr":
			var outNode ConvertRowtypeExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CollateExpr":
			var outNode CollateExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CaseExpr":
			var outNode CaseExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CaseWhen":
			var outNode CaseWhen
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CaseTestExpr":
			var outNode CaseTestExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ArrayExpr":
			var outNode ArrayExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RowExpr":
			var outNode RowExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RowCompareExpr":
			var outNode RowCompareExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CoalesceExpr":
			var outNode CoalesceExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "MinMaxExpr":
			var outNode MinMaxExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SQLValueFunction":
			var outNode SqlvalueFunction
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "XmlExpr":
			var outNode XmlExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "NullTest":
			var outNode NullTest
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "BooleanTest":
			var outNode BooleanTest
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CoerceToDomain":
			var outNode CoerceToDomain
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CoerceToDomainValue":
			var outNode CoerceToDomainValue
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SetToDefault":
			var outNode SetToDefault
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CurrentOfExpr":
			var outNode CurrentOfExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "NextValueExpr":
			var outNode NextValueExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "InferenceElem":
			var outNode InferenceElem
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "TargetEntry":
			var outNode TargetEntry
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RangeTblRef":
			var outNode RangeTblRef
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "JoinExpr":
			var outNode JoinExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "FromExpr":
			var outNode FromExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "OnConflictExpr":
			var outNode OnConflictExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "IntoClause":
			var outNode IntoClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RawStmt":
			var outNode RawStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "Query":
			var outNode Query
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "InsertStmt":
			var outNode InsertStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DeleteStmt":
			var outNode DeleteStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "UpdateStmt":
			var outNode UpdateStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SelectStmt":
			var outNode SelectStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterTableStmt":
			var outNode AlterTableStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterTableCmd":
			var outNode AlterTableCmd
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterDomainStmt":
			var outNode AlterDomainStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SetOperationStmt":
			var outNode SetOperationStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "GrantStmt":
			var outNode GrantStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "GrantRoleStmt":
			var outNode GrantRoleStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterDefaultPrivilegesStmt":
			var outNode AlterDefaultPrivilegesStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ClosePortalStmt":
			var outNode ClosePortalStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ClusterStmt":
			var outNode ClusterStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CopyStmt":
			var outNode CopyStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateStmt":
			var outNode CreateStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DefineStmt":
			var outNode DefineStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DropStmt":
			var outNode DropStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "TruncateStmt":
			var outNode TruncateStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CommentStmt":
			var outNode CommentStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "FetchStmt":
			var outNode FetchStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "IndexStmt":
			var outNode IndexStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateFunctionStmt":
			var outNode CreateFunctionStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterFunctionStmt":
			var outNode AlterFunctionStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DoStmt":
			var outNode DoStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RenameStmt":
			var outNode RenameStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RuleStmt":
			var outNode RuleStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "NotifyStmt":
			var outNode NotifyStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ListenStmt":
			var outNode ListenStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "UnlistenStmt":
			var outNode UnlistenStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "TransactionStmt":
			var outNode TransactionStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ViewStmt":
			var outNode ViewStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "LoadStmt":
			var outNode LoadStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateDomainStmt":
			var outNode CreateDomainStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreatedbStmt":
			var outNode CreatedbStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DropdbStmt":
			var outNode DropdbStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "VacuumStmt":
			var outNode VacuumStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ExplainStmt":
			var outNode ExplainStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateTableAsStmt":
			var outNode CreateTableAsStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateSeqStmt":
			var outNode CreateSeqStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterSeqStmt":
			var outNode AlterSeqStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "VariableSetStmt":
			var outNode VariableSetStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "VariableShowStmt":
			var outNode VariableShowStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DiscardStmt":
			var outNode DiscardStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateTrigStmt":
			var outNode CreateTrigStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreatePLangStmt":
			var outNode CreatePlangStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateRoleStmt":
			var outNode CreateRoleStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterRoleStmt":
			var outNode AlterRoleStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DropRoleStmt":
			var outNode DropRoleStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "LockStmt":
			var outNode LockStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ConstraintsSetStmt":
			var outNode ConstraintsSetStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ReindexStmt":
			var outNode ReindexStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CheckPointStmt":
			var outNode CheckPointStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateSchemaStmt":
			var outNode CreateSchemaStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterDatabaseStmt":
			var outNode AlterDatabaseStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterDatabaseSetStmt":
			var outNode AlterDatabaseSetStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterRoleSetStmt":
			var outNode AlterRoleSetStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateConversionStmt":
			var outNode CreateConversionStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateCastStmt":
			var outNode CreateCastStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateOpClassStmt":
			var outNode CreateOpClassStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateOpFamilyStmt":
			var outNode CreateOpFamilyStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterOpFamilyStmt":
			var outNode AlterOpFamilyStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "PrepareStmt":
			var outNode PrepareStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ExecuteStmt":
			var outNode ExecuteStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DeallocateStmt":
			var outNode DeallocateStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DeclareCursorStmt":
			var outNode DeclareCursorStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateTableSpaceStmt":
			var outNode CreateTableSpaceStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DropTableSpaceStmt":
			var outNode DropTableSpaceStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterObjectDependsStmt":
			var outNode AlterObjectDependsStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterObjectSchemaStmt":
			var outNode AlterObjectSchemaStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterOwnerStmt":
			var outNode AlterOwnerStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterOperatorStmt":
			var outNode AlterOperatorStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DropOwnedStmt":
			var outNode DropOwnedStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ReassignOwnedStmt":
			var outNode ReassignOwnedStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CompositeTypeStmt":
			var outNode CompositeTypeStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateEnumStmt":
			var outNode CreateEnumStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateRangeStmt":
			var outNode CreateRangeStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterEnumStmt":
			var outNode AlterEnumStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterTSDictionaryStmt":
			var outNode AlterTsdictionaryStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterTSConfigurationStmt":
			var outNode AlterTsconfigurationStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateFdwStmt":
			var outNode CreateFdwStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterFdwStmt":
			var outNode AlterFdwStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateForeignServerStmt":
			var outNode CreateForeignServerStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterForeignServerStmt":
			var outNode AlterForeignServerStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateUserMappingStmt":
			var outNode CreateUserMappingStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterUserMappingStmt":
			var outNode AlterUserMappingStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DropUserMappingStmt":
			var outNode DropUserMappingStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterTableSpaceOptionsStmt":
			var outNode AlterTableSpaceOptionsStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterTableMoveAllStmt":
			var outNode AlterTableMoveAllStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SecLabelStmt":
			var outNode SecLabelStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateForeignTableStmt":
			var outNode CreateForeignTableStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ImportForeignSchemaStmt":
			var outNode ImportForeignSchemaStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateExtensionStmt":
			var outNode CreateExtensionStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterExtensionStmt":
			var outNode AlterExtensionStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterExtensionContentsStmt":
			var outNode AlterExtensionContentsStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateEventTrigStmt":
			var outNode CreateEventTrigStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterEventTrigStmt":
			var outNode AlterEventTrigStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RefreshMatViewStmt":
			var outNode RefreshMatViewStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ReplicaIdentityStmt":
			var outNode ReplicaIdentityStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterSystemStmt":
			var outNode AlterSystemStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreatePolicyStmt":
			var outNode CreatePolicyStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterPolicyStmt":
			var outNode AlterPolicyStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateTransformStmt":
			var outNode CreateTransformStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateAmStmt":
			var outNode CreateAmStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreatePublicationStmt":
			var outNode CreatePublicationStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterPublicationStmt":
			var outNode AlterPublicationStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateSubscriptionStmt":
			var outNode CreateSubscriptionStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterSubscriptionStmt":
			var outNode AlterSubscriptionStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DropSubscriptionStmt":
			var outNode DropSubscriptionStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateStatsStmt":
			var outNode CreateStatsStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AlterCollationStmt":
			var outNode AlterCollationStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CallStmt":
			var outNode CallStmt
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "A_Expr":
			var outNode AExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ColumnRef":
			var outNode ColumnRef
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ParamRef":
			var outNode ParamRef
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "A_Const":
			var outNode AConst
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "FuncCall":
			var outNode FuncCall
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "A_Star":
			var outNode AStar
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "A_Indices":
			var outNode AIndices
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "A_Indirection":
			var outNode AIndirection
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "A_ArrayExpr":
			var outNode AArrayExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ResTarget":
			var outNode ResTarget
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "MultiAssignRef":
			var outNode MultiAssignRef
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "TypeCast":
			var outNode TypeCast
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CollateClause":
			var outNode CollateClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SortBy":
			var outNode SortBy
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "WindowDef":
			var outNode WindowDef
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RangeSubselect":
			var outNode RangeSubselect
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RangeFunction":
			var outNode RangeFunction
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RangeTableSample":
			var outNode RangeTableSample
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RangeTableFunc":
			var outNode RangeTableFunc
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RangeTableFuncCol":
			var outNode RangeTableFuncCol
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "TypeName":
			var outNode TypeName
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ColumnDef":
			var outNode ColumnDef
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "IndexElem":
			var outNode IndexElem
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "Constraint":
			var outNode Constraint
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "DefElem":
			var outNode DefElem
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RangeTblEntry":
			var outNode RangeTblEntry
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RangeTblFunction":
			var outNode RangeTblFunction
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "TableSampleClause":
			var outNode TableSampleClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "WithCheckOption":
			var outNode WithCheckOption
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "SortGroupClause":
			var outNode SortGroupClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "GroupingSet":
			var outNode GroupingSet
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "WindowClause":
			var outNode WindowClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "ObjectWithArgs":
			var outNode ObjectWithArgs
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "AccessPriv":
			var outNode AccessPriv
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CreateOpClassItem":
			var outNode CreateOpClassItem
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "TableLikeClause":
			var outNode TableLikeClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "FunctionParameter":
			var outNode FunctionParameter
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "LockingClause":
			var outNode LockingClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RowMarkClause":
			var outNode RowMarkClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "XmlSerialize":
			var outNode XmlSerialize
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "WithClause":
			var outNode WithClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "InferClause":
			var outNode InferClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "OnConflictClause":
			var outNode OnConflictClause
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CommonTableExpr":
			var outNode CommonTableExpr
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "RoleSpec":
			var outNode RoleSpec
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "TriggerTransition":
			var outNode TriggerTransition
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "PartitionElem":
			var outNode PartitionElem
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "PartitionSpec":
			var outNode PartitionSpec
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "PartitionBoundSpec":
			var outNode PartitionBoundSpec
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "PartitionRangeDatum":
			var outNode PartitionRangeDatum
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "PartitionCmd":
			var outNode PartitionCmd
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "VacuumRelation":
			var outNode VacuumRelation
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "InlineCodeBlock":
			var outNode InlineCodeBlock
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode

		case "CallContext":
			var outNode CallContext
			err = json.Unmarshal(jsonText, &outNode)
			if err != nil {
				return
			}
			node = &outNode
		default:
			err = fmt.Errorf("Could not unmarshal node of type %s and content %s", nodeType, jsonText)

			return
		}
	}

	return
}

func UnmarshalNodeArrayJSON(input []byte) (nodes Nodes, err error) {
	var items []json.RawMessage

	err = json.Unmarshal(input, &items)
	if err != nil {
		return
	}

	for _, itemJSON := range items {
		var node Node
		node, err = UnmarshalNodeJSON(itemJSON)
		if err != nil {
			return
		}

		nodes = append(nodes, node)
	}

	return
}

func (node *Integer) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["ival"] != nil {
		err = json.Unmarshal(fields["ival"], &node.Ival)
		if err != nil {
			return
		}
	}

	return
}

func (node *Float) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["str"] != nil {
		err = json.Unmarshal(fields["str"], &node.Str)
		if err != nil {
			return
		}
	}

	return
}

func (node *String) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["str"] != nil {
		err = json.Unmarshal(fields["str"], &node.Str)
		if err != nil {
			return
		}
	}

	return
}

func (node *BitString) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["str"] != nil {
		err = json.Unmarshal(fields["str"], &node.Str)
		if err != nil {
			return
		}
	}

	return
}

func (node *Null) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	return
}

func (node *List) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["items"] != nil {
		node.Items, err = UnmarshalNodeArrayJSON(fields["items"])
		if err != nil {
			return
		}
	}

	return
}

func (node *OidList) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["items"] != nil {
		node.Items, err = UnmarshalNodeArrayJSON(fields["items"])
		if err != nil {
			return
		}
	}

	return
}

func (node *IntList) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["items"] != nil {
		node.Items, err = UnmarshalNodeArrayJSON(fields["items"])
		if err != nil {
			return
		}
	}

	return
}

func (node *Alias) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["aliasname"] != nil {
		err = json.Unmarshal(fields["aliasname"], &node.Aliasname)
		if err != nil {
			return
		}
	}

	if fields["colnames"] != nil {
		node.Colnames, err = UnmarshalNodeArrayJSON(fields["colnames"])
		if err != nil {
			return
		}
	}

	return
}

func (node *RangeVar) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["catalogname"] != nil {
		err = json.Unmarshal(fields["catalogname"], &node.Catalogname)
		if err != nil {
			return
		}
	}

	if fields["schemaname"] != nil {
		err = json.Unmarshal(fields["schemaname"], &node.Schemaname)
		if err != nil {
			return
		}
	}

	if fields["relname"] != nil {
		err = json.Unmarshal(fields["relname"], &node.Relname)
		if err != nil {
			return
		}
	}

	if fields["inh"] != nil {
		err = json.Unmarshal(fields["inh"], &node.Inh)
		if err != nil {
			return
		}
	}

	if fields["relpersistence"] != nil {
		err = json.Unmarshal(fields["relpersistence"], &node.Relpersistence)
		if err != nil {
			return
		}
	}

	if fields["alias"] != nil {
		err = json.Unmarshal(fields["alias"], &node.Alias)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *TableFunc) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["ns_uris"] != nil {
		node.NsUris, err = UnmarshalNodeArrayJSON(fields["ns_uris"])
		if err != nil {
			return
		}
	}

	if fields["ns_names"] != nil {
		node.NsNames, err = UnmarshalNodeArrayJSON(fields["ns_names"])
		if err != nil {
			return
		}
	}

	if fields["docexpr"] != nil {
		node.Docexpr, err = UnmarshalNodeJSON(fields["docexpr"])
		if err != nil {
			return
		}
	}

	if fields["rowexpr"] != nil {
		node.Rowexpr, err = UnmarshalNodeJSON(fields["rowexpr"])
		if err != nil {
			return
		}
	}

	if fields["colnames"] != nil {
		node.Colnames, err = UnmarshalNodeArrayJSON(fields["colnames"])
		if err != nil {
			return
		}
	}

	if fields["coltypes"] != nil {
		node.Coltypes, err = UnmarshalNodeArrayJSON(fields["coltypes"])
		if err != nil {
			return
		}
	}

	if fields["coltypmods"] != nil {
		node.Coltypmods, err = UnmarshalNodeArrayJSON(fields["coltypmods"])
		if err != nil {
			return
		}
	}

	if fields["colcollations"] != nil {
		node.Colcollations, err = UnmarshalNodeArrayJSON(fields["colcollations"])
		if err != nil {
			return
		}
	}

	if fields["colexprs"] != nil {
		node.Colexprs, err = UnmarshalNodeArrayJSON(fields["colexprs"])
		if err != nil {
			return
		}
	}

	if fields["coldefexprs"] != nil {
		node.Coldefexprs, err = UnmarshalNodeArrayJSON(fields["coldefexprs"])
		if err != nil {
			return
		}
	}

	if fields["ordinalitycol"] != nil {
		err = json.Unmarshal(fields["ordinalitycol"], &node.Ordinalitycol)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *Expr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	return
}

func (node *Var) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["varno"] != nil {
		err = json.Unmarshal(fields["varno"], &node.Varno)
		if err != nil {
			return
		}
	}

	if fields["varattno"] != nil {
		err = json.Unmarshal(fields["varattno"], &node.Varattno)
		if err != nil {
			return
		}
	}

	if fields["vartype"] != nil {
		err = json.Unmarshal(fields["vartype"], &node.Vartype)
		if err != nil {
			return
		}
	}

	if fields["vartypmod"] != nil {
		err = json.Unmarshal(fields["vartypmod"], &node.Vartypmod)
		if err != nil {
			return
		}
	}

	if fields["varcollid"] != nil {
		err = json.Unmarshal(fields["varcollid"], &node.Varcollid)
		if err != nil {
			return
		}
	}

	if fields["varlevelsup"] != nil {
		err = json.Unmarshal(fields["varlevelsup"], &node.Varlevelsup)
		if err != nil {
			return
		}
	}

	if fields["varnoold"] != nil {
		err = json.Unmarshal(fields["varnoold"], &node.Varnoold)
		if err != nil {
			return
		}
	}

	if fields["varoattno"] != nil {
		err = json.Unmarshal(fields["varoattno"], &node.Varoattno)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *Param) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["paramkind"] != nil {
		err = json.Unmarshal(fields["paramkind"], &node.Paramkind)
		if err != nil {
			return
		}
	}

	if fields["paramid"] != nil {
		err = json.Unmarshal(fields["paramid"], &node.Paramid)
		if err != nil {
			return
		}
	}

	if fields["paramtype"] != nil {
		err = json.Unmarshal(fields["paramtype"], &node.Paramtype)
		if err != nil {
			return
		}
	}

	if fields["paramtypmod"] != nil {
		err = json.Unmarshal(fields["paramtypmod"], &node.Paramtypmod)
		if err != nil {
			return
		}
	}

	if fields["paramcollid"] != nil {
		err = json.Unmarshal(fields["paramcollid"], &node.Paramcollid)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *Aggref) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["aggfnoid"] != nil {
		err = json.Unmarshal(fields["aggfnoid"], &node.Aggfnoid)
		if err != nil {
			return
		}
	}

	if fields["aggtype"] != nil {
		err = json.Unmarshal(fields["aggtype"], &node.Aggtype)
		if err != nil {
			return
		}
	}

	if fields["aggcollid"] != nil {
		err = json.Unmarshal(fields["aggcollid"], &node.Aggcollid)
		if err != nil {
			return
		}
	}

	if fields["inputcollid"] != nil {
		err = json.Unmarshal(fields["inputcollid"], &node.Inputcollid)
		if err != nil {
			return
		}
	}

	if fields["aggtranstype"] != nil {
		err = json.Unmarshal(fields["aggtranstype"], &node.Aggtranstype)
		if err != nil {
			return
		}
	}

	if fields["aggargtypes"] != nil {
		node.Aggargtypes, err = UnmarshalNodeArrayJSON(fields["aggargtypes"])
		if err != nil {
			return
		}
	}

	if fields["aggdirectargs"] != nil {
		node.Aggdirectargs, err = UnmarshalNodeArrayJSON(fields["aggdirectargs"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["aggorder"] != nil {
		node.Aggorder, err = UnmarshalNodeArrayJSON(fields["aggorder"])
		if err != nil {
			return
		}
	}

	if fields["aggdistinct"] != nil {
		node.Aggdistinct, err = UnmarshalNodeArrayJSON(fields["aggdistinct"])
		if err != nil {
			return
		}
	}

	if fields["aggfilter"] != nil {
		node.Aggfilter, err = UnmarshalNodeJSON(fields["aggfilter"])
		if err != nil {
			return
		}
	}

	if fields["aggstar"] != nil {
		err = json.Unmarshal(fields["aggstar"], &node.Aggstar)
		if err != nil {
			return
		}
	}

	if fields["aggvariadic"] != nil {
		err = json.Unmarshal(fields["aggvariadic"], &node.Aggvariadic)
		if err != nil {
			return
		}
	}

	if fields["aggkind"] != nil {
		err = json.Unmarshal(fields["aggkind"], &node.Aggkind)
		if err != nil {
			return
		}
	}

	if fields["agglevelsup"] != nil {
		err = json.Unmarshal(fields["agglevelsup"], &node.Agglevelsup)
		if err != nil {
			return
		}
	}

	if fields["aggsplit"] != nil {
		err = json.Unmarshal(fields["aggsplit"], &node.Aggsplit)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *GroupingFunc) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["refs"] != nil {
		node.Refs, err = UnmarshalNodeArrayJSON(fields["refs"])
		if err != nil {
			return
		}
	}

	if fields["cols"] != nil {
		node.Cols, err = UnmarshalNodeArrayJSON(fields["cols"])
		if err != nil {
			return
		}
	}

	if fields["agglevelsup"] != nil {
		err = json.Unmarshal(fields["agglevelsup"], &node.Agglevelsup)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *WindowFunc) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["winfnoid"] != nil {
		err = json.Unmarshal(fields["winfnoid"], &node.Winfnoid)
		if err != nil {
			return
		}
	}

	if fields["wintype"] != nil {
		err = json.Unmarshal(fields["wintype"], &node.Wintype)
		if err != nil {
			return
		}
	}

	if fields["wincollid"] != nil {
		err = json.Unmarshal(fields["wincollid"], &node.Wincollid)
		if err != nil {
			return
		}
	}

	if fields["inputcollid"] != nil {
		err = json.Unmarshal(fields["inputcollid"], &node.Inputcollid)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["aggfilter"] != nil {
		node.Aggfilter, err = UnmarshalNodeJSON(fields["aggfilter"])
		if err != nil {
			return
		}
	}

	if fields["winref"] != nil {
		err = json.Unmarshal(fields["winref"], &node.Winref)
		if err != nil {
			return
		}
	}

	if fields["winstar"] != nil {
		err = json.Unmarshal(fields["winstar"], &node.Winstar)
		if err != nil {
			return
		}
	}

	if fields["winagg"] != nil {
		err = json.Unmarshal(fields["winagg"], &node.Winagg)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *SubscriptingRef) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["refcontainertype"] != nil {
		err = json.Unmarshal(fields["refcontainertype"], &node.Refcontainertype)
		if err != nil {
			return
		}
	}

	if fields["refelemtype"] != nil {
		err = json.Unmarshal(fields["refelemtype"], &node.Refelemtype)
		if err != nil {
			return
		}
	}

	if fields["reftypmod"] != nil {
		err = json.Unmarshal(fields["reftypmod"], &node.Reftypmod)
		if err != nil {
			return
		}
	}

	if fields["refcollid"] != nil {
		err = json.Unmarshal(fields["refcollid"], &node.Refcollid)
		if err != nil {
			return
		}
	}

	if fields["refupperindexpr"] != nil {
		node.Refupperindexpr, err = UnmarshalNodeArrayJSON(fields["refupperindexpr"])
		if err != nil {
			return
		}
	}

	if fields["reflowerindexpr"] != nil {
		node.Reflowerindexpr, err = UnmarshalNodeArrayJSON(fields["reflowerindexpr"])
		if err != nil {
			return
		}
	}

	if fields["refexpr"] != nil {
		node.Refexpr, err = UnmarshalNodeJSON(fields["refexpr"])
		if err != nil {
			return
		}
	}

	if fields["refassgnexpr"] != nil {
		node.Refassgnexpr, err = UnmarshalNodeJSON(fields["refassgnexpr"])
		if err != nil {
			return
		}
	}

	return
}

func (node *FuncExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["funcid"] != nil {
		err = json.Unmarshal(fields["funcid"], &node.Funcid)
		if err != nil {
			return
		}
	}

	if fields["funcresulttype"] != nil {
		err = json.Unmarshal(fields["funcresulttype"], &node.Funcresulttype)
		if err != nil {
			return
		}
	}

	if fields["funcretset"] != nil {
		err = json.Unmarshal(fields["funcretset"], &node.Funcretset)
		if err != nil {
			return
		}
	}

	if fields["funcvariadic"] != nil {
		err = json.Unmarshal(fields["funcvariadic"], &node.Funcvariadic)
		if err != nil {
			return
		}
	}

	if fields["funcformat"] != nil {
		err = json.Unmarshal(fields["funcformat"], &node.Funcformat)
		if err != nil {
			return
		}
	}

	if fields["funccollid"] != nil {
		err = json.Unmarshal(fields["funccollid"], &node.Funccollid)
		if err != nil {
			return
		}
	}

	if fields["inputcollid"] != nil {
		err = json.Unmarshal(fields["inputcollid"], &node.Inputcollid)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *NamedArgExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["argnumber"] != nil {
		err = json.Unmarshal(fields["argnumber"], &node.Argnumber)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *OpExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["opno"] != nil {
		err = json.Unmarshal(fields["opno"], &node.Opno)
		if err != nil {
			return
		}
	}

	if fields["opfuncid"] != nil {
		err = json.Unmarshal(fields["opfuncid"], &node.Opfuncid)
		if err != nil {
			return
		}
	}

	if fields["opresulttype"] != nil {
		err = json.Unmarshal(fields["opresulttype"], &node.Opresulttype)
		if err != nil {
			return
		}
	}

	if fields["opretset"] != nil {
		err = json.Unmarshal(fields["opretset"], &node.Opretset)
		if err != nil {
			return
		}
	}

	if fields["opcollid"] != nil {
		err = json.Unmarshal(fields["opcollid"], &node.Opcollid)
		if err != nil {
			return
		}
	}

	if fields["inputcollid"] != nil {
		err = json.Unmarshal(fields["inputcollid"], &node.Inputcollid)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *DistinctExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["opno"] != nil {
		err = json.Unmarshal(fields["opno"], &node.Opno)
		if err != nil {
			return
		}
	}

	if fields["opfuncid"] != nil {
		err = json.Unmarshal(fields["opfuncid"], &node.Opfuncid)
		if err != nil {
			return
		}
	}

	if fields["opresulttype"] != nil {
		err = json.Unmarshal(fields["opresulttype"], &node.Opresulttype)
		if err != nil {
			return
		}
	}

	if fields["opretset"] != nil {
		err = json.Unmarshal(fields["opretset"], &node.Opretset)
		if err != nil {
			return
		}
	}

	if fields["opcollid"] != nil {
		err = json.Unmarshal(fields["opcollid"], &node.Opcollid)
		if err != nil {
			return
		}
	}

	if fields["inputcollid"] != nil {
		err = json.Unmarshal(fields["inputcollid"], &node.Inputcollid)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *NullIfExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["opno"] != nil {
		err = json.Unmarshal(fields["opno"], &node.Opno)
		if err != nil {
			return
		}
	}

	if fields["opfuncid"] != nil {
		err = json.Unmarshal(fields["opfuncid"], &node.Opfuncid)
		if err != nil {
			return
		}
	}

	if fields["opresulttype"] != nil {
		err = json.Unmarshal(fields["opresulttype"], &node.Opresulttype)
		if err != nil {
			return
		}
	}

	if fields["opretset"] != nil {
		err = json.Unmarshal(fields["opretset"], &node.Opretset)
		if err != nil {
			return
		}
	}

	if fields["opcollid"] != nil {
		err = json.Unmarshal(fields["opcollid"], &node.Opcollid)
		if err != nil {
			return
		}
	}

	if fields["inputcollid"] != nil {
		err = json.Unmarshal(fields["inputcollid"], &node.Inputcollid)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *ScalarArrayOpExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["opno"] != nil {
		err = json.Unmarshal(fields["opno"], &node.Opno)
		if err != nil {
			return
		}
	}

	if fields["opfuncid"] != nil {
		err = json.Unmarshal(fields["opfuncid"], &node.Opfuncid)
		if err != nil {
			return
		}
	}

	if fields["useOr"] != nil {
		err = json.Unmarshal(fields["useOr"], &node.UseOr)
		if err != nil {
			return
		}
	}

	if fields["inputcollid"] != nil {
		err = json.Unmarshal(fields["inputcollid"], &node.Inputcollid)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *BoolExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["boolop"] != nil {
		err = json.Unmarshal(fields["boolop"], &node.Boolop)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *SubLink) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["subLinkType"] != nil {
		err = json.Unmarshal(fields["subLinkType"], &node.SubLinkType)
		if err != nil {
			return
		}
	}

	if fields["subLinkId"] != nil {
		err = json.Unmarshal(fields["subLinkId"], &node.SubLinkID)
		if err != nil {
			return
		}
	}

	if fields["testexpr"] != nil {
		node.Testexpr, err = UnmarshalNodeJSON(fields["testexpr"])
		if err != nil {
			return
		}
	}

	if fields["operName"] != nil {
		node.OperName, err = UnmarshalNodeArrayJSON(fields["operName"])
		if err != nil {
			return
		}
	}

	if fields["subselect"] != nil {
		node.Subselect, err = UnmarshalNodeJSON(fields["subselect"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *SubPlan) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["subLinkType"] != nil {
		err = json.Unmarshal(fields["subLinkType"], &node.SubLinkType)
		if err != nil {
			return
		}
	}

	if fields["testexpr"] != nil {
		node.Testexpr, err = UnmarshalNodeJSON(fields["testexpr"])
		if err != nil {
			return
		}
	}

	if fields["paramIds"] != nil {
		node.ParamIds, err = UnmarshalNodeArrayJSON(fields["paramIds"])
		if err != nil {
			return
		}
	}

	if fields["plan_id"] != nil {
		err = json.Unmarshal(fields["plan_id"], &node.PlanID)
		if err != nil {
			return
		}
	}

	if fields["plan_name"] != nil {
		err = json.Unmarshal(fields["plan_name"], &node.PlanName)
		if err != nil {
			return
		}
	}

	if fields["firstColType"] != nil {
		err = json.Unmarshal(fields["firstColType"], &node.FirstColType)
		if err != nil {
			return
		}
	}

	if fields["firstColTypmod"] != nil {
		err = json.Unmarshal(fields["firstColTypmod"], &node.FirstColTypmod)
		if err != nil {
			return
		}
	}

	if fields["firstColCollation"] != nil {
		err = json.Unmarshal(fields["firstColCollation"], &node.FirstColCollation)
		if err != nil {
			return
		}
	}

	if fields["useHashTable"] != nil {
		err = json.Unmarshal(fields["useHashTable"], &node.UseHashTable)
		if err != nil {
			return
		}
	}

	if fields["unknownEqFalse"] != nil {
		err = json.Unmarshal(fields["unknownEqFalse"], &node.UnknownEqFalse)
		if err != nil {
			return
		}
	}

	if fields["parallel_safe"] != nil {
		err = json.Unmarshal(fields["parallel_safe"], &node.ParallelSafe)
		if err != nil {
			return
		}
	}

	if fields["setParam"] != nil {
		node.SetParam, err = UnmarshalNodeArrayJSON(fields["setParam"])
		if err != nil {
			return
		}
	}

	if fields["parParam"] != nil {
		node.ParParam, err = UnmarshalNodeArrayJSON(fields["parParam"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["startup_cost"] != nil {
		err = json.Unmarshal(fields["startup_cost"], &node.StartupCost)
		if err != nil {
			return
		}
	}

	if fields["per_call_cost"] != nil {
		err = json.Unmarshal(fields["per_call_cost"], &node.PerCallCost)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlternativeSubPlan) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["subplans"] != nil {
		node.Subplans, err = UnmarshalNodeArrayJSON(fields["subplans"])
		if err != nil {
			return
		}
	}

	return
}

func (node *FieldSelect) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["fieldnum"] != nil {
		err = json.Unmarshal(fields["fieldnum"], &node.Fieldnum)
		if err != nil {
			return
		}
	}

	if fields["resulttype"] != nil {
		err = json.Unmarshal(fields["resulttype"], &node.Resulttype)
		if err != nil {
			return
		}
	}

	if fields["resulttypmod"] != nil {
		err = json.Unmarshal(fields["resulttypmod"], &node.Resulttypmod)
		if err != nil {
			return
		}
	}

	if fields["resultcollid"] != nil {
		err = json.Unmarshal(fields["resultcollid"], &node.Resultcollid)
		if err != nil {
			return
		}
	}

	return
}

func (node *FieldStore) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["newvals"] != nil {
		node.Newvals, err = UnmarshalNodeArrayJSON(fields["newvals"])
		if err != nil {
			return
		}
	}

	if fields["fieldnums"] != nil {
		node.Fieldnums, err = UnmarshalNodeArrayJSON(fields["fieldnums"])
		if err != nil {
			return
		}
	}

	if fields["resulttype"] != nil {
		err = json.Unmarshal(fields["resulttype"], &node.Resulttype)
		if err != nil {
			return
		}
	}

	return
}

func (node *RelabelType) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["resulttype"] != nil {
		err = json.Unmarshal(fields["resulttype"], &node.Resulttype)
		if err != nil {
			return
		}
	}

	if fields["resulttypmod"] != nil {
		err = json.Unmarshal(fields["resulttypmod"], &node.Resulttypmod)
		if err != nil {
			return
		}
	}

	if fields["resultcollid"] != nil {
		err = json.Unmarshal(fields["resultcollid"], &node.Resultcollid)
		if err != nil {
			return
		}
	}

	if fields["relabelformat"] != nil {
		err = json.Unmarshal(fields["relabelformat"], &node.Relabelformat)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CoerceViaIo) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["resulttype"] != nil {
		err = json.Unmarshal(fields["resulttype"], &node.Resulttype)
		if err != nil {
			return
		}
	}

	if fields["resultcollid"] != nil {
		err = json.Unmarshal(fields["resultcollid"], &node.Resultcollid)
		if err != nil {
			return
		}
	}

	if fields["coerceformat"] != nil {
		err = json.Unmarshal(fields["coerceformat"], &node.Coerceformat)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *ArrayCoerceExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["elemexpr"] != nil {
		node.Elemexpr, err = UnmarshalNodeJSON(fields["elemexpr"])
		if err != nil {
			return
		}
	}

	if fields["resulttype"] != nil {
		err = json.Unmarshal(fields["resulttype"], &node.Resulttype)
		if err != nil {
			return
		}
	}

	if fields["resulttypmod"] != nil {
		err = json.Unmarshal(fields["resulttypmod"], &node.Resulttypmod)
		if err != nil {
			return
		}
	}

	if fields["resultcollid"] != nil {
		err = json.Unmarshal(fields["resultcollid"], &node.Resultcollid)
		if err != nil {
			return
		}
	}

	if fields["coerceformat"] != nil {
		err = json.Unmarshal(fields["coerceformat"], &node.Coerceformat)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *ConvertRowtypeExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["resulttype"] != nil {
		err = json.Unmarshal(fields["resulttype"], &node.Resulttype)
		if err != nil {
			return
		}
	}

	if fields["convertformat"] != nil {
		err = json.Unmarshal(fields["convertformat"], &node.Convertformat)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CollateExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["collOid"] != nil {
		err = json.Unmarshal(fields["collOid"], &node.CollOid)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CaseExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["casetype"] != nil {
		err = json.Unmarshal(fields["casetype"], &node.Casetype)
		if err != nil {
			return
		}
	}

	if fields["casecollid"] != nil {
		err = json.Unmarshal(fields["casecollid"], &node.Casecollid)
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["defresult"] != nil {
		node.Defresult, err = UnmarshalNodeJSON(fields["defresult"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CaseWhen) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["expr"] != nil {
		node.Expr, err = UnmarshalNodeJSON(fields["expr"])
		if err != nil {
			return
		}
	}

	if fields["result"] != nil {
		node.Result, err = UnmarshalNodeJSON(fields["result"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CaseTestExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["typeId"] != nil {
		err = json.Unmarshal(fields["typeId"], &node.TypeID)
		if err != nil {
			return
		}
	}

	if fields["typeMod"] != nil {
		err = json.Unmarshal(fields["typeMod"], &node.TypeMod)
		if err != nil {
			return
		}
	}

	if fields["collation"] != nil {
		err = json.Unmarshal(fields["collation"], &node.Collation)
		if err != nil {
			return
		}
	}

	return
}

func (node *ArrayExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["array_typeid"] != nil {
		err = json.Unmarshal(fields["array_typeid"], &node.ArrayTypeid)
		if err != nil {
			return
		}
	}

	if fields["array_collid"] != nil {
		err = json.Unmarshal(fields["array_collid"], &node.ArrayCollid)
		if err != nil {
			return
		}
	}

	if fields["element_typeid"] != nil {
		err = json.Unmarshal(fields["element_typeid"], &node.ElementTypeid)
		if err != nil {
			return
		}
	}

	if fields["elements"] != nil {
		node.Elements, err = UnmarshalNodeArrayJSON(fields["elements"])
		if err != nil {
			return
		}
	}

	if fields["multidims"] != nil {
		err = json.Unmarshal(fields["multidims"], &node.Multidims)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *RowExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["row_typeid"] != nil {
		err = json.Unmarshal(fields["row_typeid"], &node.RowTypeid)
		if err != nil {
			return
		}
	}

	if fields["row_format"] != nil {
		err = json.Unmarshal(fields["row_format"], &node.RowFormat)
		if err != nil {
			return
		}
	}

	if fields["colnames"] != nil {
		node.Colnames, err = UnmarshalNodeArrayJSON(fields["colnames"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *RowCompareExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["rctype"] != nil {
		err = json.Unmarshal(fields["rctype"], &node.Rctype)
		if err != nil {
			return
		}
	}

	if fields["opnos"] != nil {
		node.Opnos, err = UnmarshalNodeArrayJSON(fields["opnos"])
		if err != nil {
			return
		}
	}

	if fields["opfamilies"] != nil {
		node.Opfamilies, err = UnmarshalNodeArrayJSON(fields["opfamilies"])
		if err != nil {
			return
		}
	}

	if fields["inputcollids"] != nil {
		node.Inputcollids, err = UnmarshalNodeArrayJSON(fields["inputcollids"])
		if err != nil {
			return
		}
	}

	if fields["largs"] != nil {
		node.Largs, err = UnmarshalNodeArrayJSON(fields["largs"])
		if err != nil {
			return
		}
	}

	if fields["rargs"] != nil {
		node.Rargs, err = UnmarshalNodeArrayJSON(fields["rargs"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CoalesceExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["coalescetype"] != nil {
		err = json.Unmarshal(fields["coalescetype"], &node.Coalescetype)
		if err != nil {
			return
		}
	}

	if fields["coalescecollid"] != nil {
		err = json.Unmarshal(fields["coalescecollid"], &node.Coalescecollid)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *MinMaxExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["minmaxtype"] != nil {
		err = json.Unmarshal(fields["minmaxtype"], &node.Minmaxtype)
		if err != nil {
			return
		}
	}

	if fields["minmaxcollid"] != nil {
		err = json.Unmarshal(fields["minmaxcollid"], &node.Minmaxcollid)
		if err != nil {
			return
		}
	}

	if fields["inputcollid"] != nil {
		err = json.Unmarshal(fields["inputcollid"], &node.Inputcollid)
		if err != nil {
			return
		}
	}

	if fields["op"] != nil {
		err = json.Unmarshal(fields["op"], &node.Op)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *SqlvalueFunction) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["op"] != nil {
		err = json.Unmarshal(fields["op"], &node.Op)
		if err != nil {
			return
		}
	}

	if fields["type"] != nil {
		err = json.Unmarshal(fields["type"], &node.Type)
		if err != nil {
			return
		}
	}

	if fields["typmod"] != nil {
		err = json.Unmarshal(fields["typmod"], &node.Typmod)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *XmlExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["op"] != nil {
		err = json.Unmarshal(fields["op"], &node.Op)
		if err != nil {
			return
		}
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["named_args"] != nil {
		node.NamedArgs, err = UnmarshalNodeArrayJSON(fields["named_args"])
		if err != nil {
			return
		}
	}

	if fields["arg_names"] != nil {
		node.ArgNames, err = UnmarshalNodeArrayJSON(fields["arg_names"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["xmloption"] != nil {
		err = json.Unmarshal(fields["xmloption"], &node.Xmloption)
		if err != nil {
			return
		}
	}

	if fields["type"] != nil {
		err = json.Unmarshal(fields["type"], &node.Type)
		if err != nil {
			return
		}
	}

	if fields["typmod"] != nil {
		err = json.Unmarshal(fields["typmod"], &node.Typmod)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *NullTest) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["nulltesttype"] != nil {
		err = json.Unmarshal(fields["nulltesttype"], &node.Nulltesttype)
		if err != nil {
			return
		}
	}

	if fields["argisrow"] != nil {
		err = json.Unmarshal(fields["argisrow"], &node.Argisrow)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *BooleanTest) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["booltesttype"] != nil {
		err = json.Unmarshal(fields["booltesttype"], &node.Booltesttype)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CoerceToDomain) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["resulttype"] != nil {
		err = json.Unmarshal(fields["resulttype"], &node.Resulttype)
		if err != nil {
			return
		}
	}

	if fields["resulttypmod"] != nil {
		err = json.Unmarshal(fields["resulttypmod"], &node.Resulttypmod)
		if err != nil {
			return
		}
	}

	if fields["resultcollid"] != nil {
		err = json.Unmarshal(fields["resultcollid"], &node.Resultcollid)
		if err != nil {
			return
		}
	}

	if fields["coercionformat"] != nil {
		err = json.Unmarshal(fields["coercionformat"], &node.Coercionformat)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CoerceToDomainValue) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["typeId"] != nil {
		err = json.Unmarshal(fields["typeId"], &node.TypeID)
		if err != nil {
			return
		}
	}

	if fields["typeMod"] != nil {
		err = json.Unmarshal(fields["typeMod"], &node.TypeMod)
		if err != nil {
			return
		}
	}

	if fields["collation"] != nil {
		err = json.Unmarshal(fields["collation"], &node.Collation)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *SetToDefault) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["typeId"] != nil {
		err = json.Unmarshal(fields["typeId"], &node.TypeID)
		if err != nil {
			return
		}
	}

	if fields["typeMod"] != nil {
		err = json.Unmarshal(fields["typeMod"], &node.TypeMod)
		if err != nil {
			return
		}
	}

	if fields["collation"] != nil {
		err = json.Unmarshal(fields["collation"], &node.Collation)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CurrentOfExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["cvarno"] != nil {
		err = json.Unmarshal(fields["cvarno"], &node.Cvarno)
		if err != nil {
			return
		}
	}

	if fields["cursor_name"] != nil {
		err = json.Unmarshal(fields["cursor_name"], &node.CursorName)
		if err != nil {
			return
		}
	}

	if fields["cursor_param"] != nil {
		err = json.Unmarshal(fields["cursor_param"], &node.CursorParam)
		if err != nil {
			return
		}
	}

	return
}

func (node *NextValueExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["seqid"] != nil {
		err = json.Unmarshal(fields["seqid"], &node.Seqid)
		if err != nil {
			return
		}
	}

	if fields["typeId"] != nil {
		err = json.Unmarshal(fields["typeId"], &node.TypeID)
		if err != nil {
			return
		}
	}

	return
}

func (node *InferenceElem) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["expr"] != nil {
		node.Expr, err = UnmarshalNodeJSON(fields["expr"])
		if err != nil {
			return
		}
	}

	if fields["infercollid"] != nil {
		err = json.Unmarshal(fields["infercollid"], &node.Infercollid)
		if err != nil {
			return
		}
	}

	if fields["inferopclass"] != nil {
		err = json.Unmarshal(fields["inferopclass"], &node.Inferopclass)
		if err != nil {
			return
		}
	}

	return
}

func (node *TargetEntry) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xpr"] != nil {
		node.Xpr, err = UnmarshalNodeJSON(fields["xpr"])
		if err != nil {
			return
		}
	}

	if fields["expr"] != nil {
		node.Expr, err = UnmarshalNodeJSON(fields["expr"])
		if err != nil {
			return
		}
	}

	if fields["resno"] != nil {
		err = json.Unmarshal(fields["resno"], &node.Resno)
		if err != nil {
			return
		}
	}

	if fields["resname"] != nil {
		err = json.Unmarshal(fields["resname"], &node.Resname)
		if err != nil {
			return
		}
	}

	if fields["ressortgroupref"] != nil {
		err = json.Unmarshal(fields["ressortgroupref"], &node.Ressortgroupref)
		if err != nil {
			return
		}
	}

	if fields["resorigtbl"] != nil {
		err = json.Unmarshal(fields["resorigtbl"], &node.Resorigtbl)
		if err != nil {
			return
		}
	}

	if fields["resorigcol"] != nil {
		err = json.Unmarshal(fields["resorigcol"], &node.Resorigcol)
		if err != nil {
			return
		}
	}

	if fields["resjunk"] != nil {
		err = json.Unmarshal(fields["resjunk"], &node.Resjunk)
		if err != nil {
			return
		}
	}

	return
}

func (node *RangeTblRef) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["rtindex"] != nil {
		err = json.Unmarshal(fields["rtindex"], &node.Rtindex)
		if err != nil {
			return
		}
	}

	return
}

func (node *JoinExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["jointype"] != nil {
		err = json.Unmarshal(fields["jointype"], &node.Jointype)
		if err != nil {
			return
		}
	}

	if fields["isNatural"] != nil {
		err = json.Unmarshal(fields["isNatural"], &node.IsNatural)
		if err != nil {
			return
		}
	}

	if fields["larg"] != nil {
		node.Larg, err = UnmarshalNodeJSON(fields["larg"])
		if err != nil {
			return
		}
	}

	if fields["rarg"] != nil {
		node.Rarg, err = UnmarshalNodeJSON(fields["rarg"])
		if err != nil {
			return
		}
	}

	if fields["usingClause"] != nil {
		node.UsingClause, err = UnmarshalNodeArrayJSON(fields["usingClause"])
		if err != nil {
			return
		}
	}

	if fields["quals"] != nil {
		node.Quals, err = UnmarshalNodeJSON(fields["quals"])
		if err != nil {
			return
		}
	}

	if fields["alias"] != nil {
		err = json.Unmarshal(fields["alias"], &node.Alias)
		if err != nil {
			return
		}
	}

	if fields["rtindex"] != nil {
		err = json.Unmarshal(fields["rtindex"], &node.Rtindex)
		if err != nil {
			return
		}
	}

	return
}

func (node *FromExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["fromlist"] != nil {
		node.Fromlist, err = UnmarshalNodeArrayJSON(fields["fromlist"])
		if err != nil {
			return
		}
	}

	if fields["quals"] != nil {
		node.Quals, err = UnmarshalNodeJSON(fields["quals"])
		if err != nil {
			return
		}
	}

	return
}

func (node *OnConflictExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["action"] != nil {
		err = json.Unmarshal(fields["action"], &node.Action)
		if err != nil {
			return
		}
	}

	if fields["arbiterElems"] != nil {
		node.ArbiterElems, err = UnmarshalNodeArrayJSON(fields["arbiterElems"])
		if err != nil {
			return
		}
	}

	if fields["arbiterWhere"] != nil {
		node.ArbiterWhere, err = UnmarshalNodeJSON(fields["arbiterWhere"])
		if err != nil {
			return
		}
	}

	if fields["constraint"] != nil {
		err = json.Unmarshal(fields["constraint"], &node.Constraint)
		if err != nil {
			return
		}
	}

	if fields["onConflictSet"] != nil {
		node.OnConflictSet, err = UnmarshalNodeArrayJSON(fields["onConflictSet"])
		if err != nil {
			return
		}
	}

	if fields["onConflictWhere"] != nil {
		node.OnConflictWhere, err = UnmarshalNodeJSON(fields["onConflictWhere"])
		if err != nil {
			return
		}
	}

	if fields["exclRelIndex"] != nil {
		err = json.Unmarshal(fields["exclRelIndex"], &node.ExclRelIndex)
		if err != nil {
			return
		}
	}

	if fields["exclRelTlist"] != nil {
		node.ExclRelTlist, err = UnmarshalNodeArrayJSON(fields["exclRelTlist"])
		if err != nil {
			return
		}
	}

	return
}

func (node *IntoClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["rel"] != nil {
		err = json.Unmarshal(fields["rel"], &node.Rel)
		if err != nil {
			return
		}
	}

	if fields["colNames"] != nil {
		node.ColNames, err = UnmarshalNodeArrayJSON(fields["colNames"])
		if err != nil {
			return
		}
	}

	if fields["accessMethod"] != nil {
		err = json.Unmarshal(fields["accessMethod"], &node.AccessMethod)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["onCommit"] != nil {
		err = json.Unmarshal(fields["onCommit"], &node.OnCommit)
		if err != nil {
			return
		}
	}

	if fields["tableSpaceName"] != nil {
		err = json.Unmarshal(fields["tableSpaceName"], &node.TableSpaceName)
		if err != nil {
			return
		}
	}

	if fields["viewQuery"] != nil {
		node.ViewQuery, err = UnmarshalNodeJSON(fields["viewQuery"])
		if err != nil {
			return
		}
	}

	if fields["skipData"] != nil {
		err = json.Unmarshal(fields["skipData"], &node.SkipData)
		if err != nil {
			return
		}
	}

	return
}

func (node *RawStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["stmt"] != nil {
		node.Stmt, err = UnmarshalNodeJSON(fields["stmt"])
		if err != nil {
			return
		}
	}

	if fields["stmt_location"] != nil {
		err = json.Unmarshal(fields["stmt_location"], &node.StmtLocation)
		if err != nil {
			return
		}
	}

	if fields["stmt_len"] != nil {
		err = json.Unmarshal(fields["stmt_len"], &node.StmtLen)
		if err != nil {
			return
		}
	}

	return
}

func (node *Query) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["commandType"] != nil {
		err = json.Unmarshal(fields["commandType"], &node.CommandType)
		if err != nil {
			return
		}
	}

	if fields["querySource"] != nil {
		err = json.Unmarshal(fields["querySource"], &node.QuerySource)
		if err != nil {
			return
		}
	}

	if fields["canSetTag"] != nil {
		err = json.Unmarshal(fields["canSetTag"], &node.CanSetTag)
		if err != nil {
			return
		}
	}

	if fields["utilityStmt"] != nil {
		node.UtilityStmt, err = UnmarshalNodeJSON(fields["utilityStmt"])
		if err != nil {
			return
		}
	}

	if fields["resultRelation"] != nil {
		err = json.Unmarshal(fields["resultRelation"], &node.ResultRelation)
		if err != nil {
			return
		}
	}

	if fields["hasAggs"] != nil {
		err = json.Unmarshal(fields["hasAggs"], &node.HasAggs)
		if err != nil {
			return
		}
	}

	if fields["hasWindowFuncs"] != nil {
		err = json.Unmarshal(fields["hasWindowFuncs"], &node.HasWindowFuncs)
		if err != nil {
			return
		}
	}

	if fields["hasTargetSRFs"] != nil {
		err = json.Unmarshal(fields["hasTargetSRFs"], &node.HasTargetSrFs)
		if err != nil {
			return
		}
	}

	if fields["hasSubLinks"] != nil {
		err = json.Unmarshal(fields["hasSubLinks"], &node.HasSubLinks)
		if err != nil {
			return
		}
	}

	if fields["hasDistinctOn"] != nil {
		err = json.Unmarshal(fields["hasDistinctOn"], &node.HasDistinctOn)
		if err != nil {
			return
		}
	}

	if fields["hasRecursive"] != nil {
		err = json.Unmarshal(fields["hasRecursive"], &node.HasRecursive)
		if err != nil {
			return
		}
	}

	if fields["hasModifyingCTE"] != nil {
		err = json.Unmarshal(fields["hasModifyingCTE"], &node.HasModifyingCte)
		if err != nil {
			return
		}
	}

	if fields["hasForUpdate"] != nil {
		err = json.Unmarshal(fields["hasForUpdate"], &node.HasForUpdate)
		if err != nil {
			return
		}
	}

	if fields["hasRowSecurity"] != nil {
		err = json.Unmarshal(fields["hasRowSecurity"], &node.HasRowSecurity)
		if err != nil {
			return
		}
	}

	if fields["cteList"] != nil {
		node.CteList, err = UnmarshalNodeArrayJSON(fields["cteList"])
		if err != nil {
			return
		}
	}

	if fields["rtable"] != nil {
		node.Rtable, err = UnmarshalNodeArrayJSON(fields["rtable"])
		if err != nil {
			return
		}
	}

	if fields["jointree"] != nil {
		err = json.Unmarshal(fields["jointree"], &node.Jointree)
		if err != nil {
			return
		}
	}

	if fields["targetList"] != nil {
		node.TargetList, err = UnmarshalNodeArrayJSON(fields["targetList"])
		if err != nil {
			return
		}
	}

	if fields["override"] != nil {
		err = json.Unmarshal(fields["override"], &node.Override)
		if err != nil {
			return
		}
	}

	if fields["onConflict"] != nil {
		err = json.Unmarshal(fields["onConflict"], &node.OnConflict)
		if err != nil {
			return
		}
	}

	if fields["returningList"] != nil {
		node.ReturningList, err = UnmarshalNodeArrayJSON(fields["returningList"])
		if err != nil {
			return
		}
	}

	if fields["groupClause"] != nil {
		node.GroupClause, err = UnmarshalNodeArrayJSON(fields["groupClause"])
		if err != nil {
			return
		}
	}

	if fields["groupingSets"] != nil {
		node.GroupingSets, err = UnmarshalNodeArrayJSON(fields["groupingSets"])
		if err != nil {
			return
		}
	}

	if fields["havingQual"] != nil {
		node.HavingQual, err = UnmarshalNodeJSON(fields["havingQual"])
		if err != nil {
			return
		}
	}

	if fields["windowClause"] != nil {
		node.WindowClause, err = UnmarshalNodeArrayJSON(fields["windowClause"])
		if err != nil {
			return
		}
	}

	if fields["distinctClause"] != nil {
		node.DistinctClause, err = UnmarshalNodeArrayJSON(fields["distinctClause"])
		if err != nil {
			return
		}
	}

	if fields["sortClause"] != nil {
		node.SortClause, err = UnmarshalNodeArrayJSON(fields["sortClause"])
		if err != nil {
			return
		}
	}

	if fields["limitOffset"] != nil {
		node.LimitOffset, err = UnmarshalNodeJSON(fields["limitOffset"])
		if err != nil {
			return
		}
	}

	if fields["limitCount"] != nil {
		node.LimitCount, err = UnmarshalNodeJSON(fields["limitCount"])
		if err != nil {
			return
		}
	}

	if fields["rowMarks"] != nil {
		node.RowMarks, err = UnmarshalNodeArrayJSON(fields["rowMarks"])
		if err != nil {
			return
		}
	}

	if fields["setOperations"] != nil {
		node.SetOperations, err = UnmarshalNodeJSON(fields["setOperations"])
		if err != nil {
			return
		}
	}

	if fields["constraintDeps"] != nil {
		node.ConstraintDeps, err = UnmarshalNodeArrayJSON(fields["constraintDeps"])
		if err != nil {
			return
		}
	}

	if fields["withCheckOptions"] != nil {
		node.WithCheckOptions, err = UnmarshalNodeArrayJSON(fields["withCheckOptions"])
		if err != nil {
			return
		}
	}

	if fields["stmt_location"] != nil {
		err = json.Unmarshal(fields["stmt_location"], &node.StmtLocation)
		if err != nil {
			return
		}
	}

	if fields["stmt_len"] != nil {
		err = json.Unmarshal(fields["stmt_len"], &node.StmtLen)
		if err != nil {
			return
		}
	}

	return
}

func (node *InsertStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["cols"] != nil {
		node.Cols, err = UnmarshalNodeArrayJSON(fields["cols"])
		if err != nil {
			return
		}
	}

	if fields["selectStmt"] != nil {
		node.SelectStmt, err = UnmarshalNodeJSON(fields["selectStmt"])
		if err != nil {
			return
		}
	}

	if fields["onConflictClause"] != nil {
		err = json.Unmarshal(fields["onConflictClause"], &node.OnConflictClause)
		if err != nil {
			return
		}
	}

	if fields["returningList"] != nil {
		node.ReturningList, err = UnmarshalNodeArrayJSON(fields["returningList"])
		if err != nil {
			return
		}
	}

	if fields["withClause"] != nil {
		err = json.Unmarshal(fields["withClause"], &node.WithClause)
		if err != nil {
			return
		}
	}

	if fields["override"] != nil {
		err = json.Unmarshal(fields["override"], &node.Override)
		if err != nil {
			return
		}
	}

	return
}

func (node *DeleteStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["usingClause"] != nil {
		node.UsingClause, err = UnmarshalNodeArrayJSON(fields["usingClause"])
		if err != nil {
			return
		}
	}

	if fields["whereClause"] != nil {
		node.WhereClause, err = UnmarshalNodeJSON(fields["whereClause"])
		if err != nil {
			return
		}
	}

	if fields["returningList"] != nil {
		node.ReturningList, err = UnmarshalNodeArrayJSON(fields["returningList"])
		if err != nil {
			return
		}
	}

	if fields["withClause"] != nil {
		err = json.Unmarshal(fields["withClause"], &node.WithClause)
		if err != nil {
			return
		}
	}

	return
}

func (node *UpdateStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["targetList"] != nil {
		node.TargetList, err = UnmarshalNodeArrayJSON(fields["targetList"])
		if err != nil {
			return
		}
	}

	if fields["whereClause"] != nil {
		node.WhereClause, err = UnmarshalNodeJSON(fields["whereClause"])
		if err != nil {
			return
		}
	}

	if fields["fromClause"] != nil {
		node.FromClause, err = UnmarshalNodeArrayJSON(fields["fromClause"])
		if err != nil {
			return
		}
	}

	if fields["returningList"] != nil {
		node.ReturningList, err = UnmarshalNodeArrayJSON(fields["returningList"])
		if err != nil {
			return
		}
	}

	if fields["withClause"] != nil {
		err = json.Unmarshal(fields["withClause"], &node.WithClause)
		if err != nil {
			return
		}
	}

	return
}

func (node *SelectStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["distinctClause"] != nil {
		node.DistinctClause, err = UnmarshalNodeArrayJSON(fields["distinctClause"])
		if err != nil {
			return
		}
	}

	if fields["intoClause"] != nil {
		err = json.Unmarshal(fields["intoClause"], &node.IntoClause)
		if err != nil {
			return
		}
	}

	if fields["targetList"] != nil {
		node.TargetList, err = UnmarshalNodeArrayJSON(fields["targetList"])
		if err != nil {
			return
		}
	}

	if fields["fromClause"] != nil {
		node.FromClause, err = UnmarshalNodeArrayJSON(fields["fromClause"])
		if err != nil {
			return
		}
	}

	if fields["whereClause"] != nil {
		node.WhereClause, err = UnmarshalNodeJSON(fields["whereClause"])
		if err != nil {
			return
		}
	}

	if fields["groupClause"] != nil {
		node.GroupClause, err = UnmarshalNodeArrayJSON(fields["groupClause"])
		if err != nil {
			return
		}
	}

	if fields["havingClause"] != nil {
		node.HavingClause, err = UnmarshalNodeJSON(fields["havingClause"])
		if err != nil {
			return
		}
	}

	if fields["windowClause"] != nil {
		node.WindowClause, err = UnmarshalNodeArrayJSON(fields["windowClause"])
		if err != nil {
			return
		}
	}

	if fields["valuesLists"] != nil {
		node.ValuesLists, err = UnmarshalNodeArrayJSON(fields["valuesLists"])
		if err != nil {
			return
		}
	}

	if fields["sortClause"] != nil {
		node.SortClause, err = UnmarshalNodeArrayJSON(fields["sortClause"])
		if err != nil {
			return
		}
	}

	if fields["limitOffset"] != nil {
		node.LimitOffset, err = UnmarshalNodeJSON(fields["limitOffset"])
		if err != nil {
			return
		}
	}

	if fields["limitCount"] != nil {
		node.LimitCount, err = UnmarshalNodeJSON(fields["limitCount"])
		if err != nil {
			return
		}
	}

	if fields["lockingClause"] != nil {
		node.LockingClause, err = UnmarshalNodeArrayJSON(fields["lockingClause"])
		if err != nil {
			return
		}
	}

	if fields["withClause"] != nil {
		err = json.Unmarshal(fields["withClause"], &node.WithClause)
		if err != nil {
			return
		}
	}

	if fields["op"] != nil {
		err = json.Unmarshal(fields["op"], &node.Op)
		if err != nil {
			return
		}
	}

	if fields["all"] != nil {
		err = json.Unmarshal(fields["all"], &node.All)
		if err != nil {
			return
		}
	}

	if fields["larg"] != nil {
		err = json.Unmarshal(fields["larg"], &node.Larg)
		if err != nil {
			return
		}
	}

	if fields["rarg"] != nil {
		err = json.Unmarshal(fields["rarg"], &node.Rarg)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterTableStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["cmds"] != nil {
		node.Cmds, err = UnmarshalNodeArrayJSON(fields["cmds"])
		if err != nil {
			return
		}
	}

	if fields["relkind"] != nil {
		err = json.Unmarshal(fields["relkind"], &node.Relkind)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterTableCmd) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["subtype"] != nil {
		err = json.Unmarshal(fields["subtype"], &node.Subtype)
		if err != nil {
			return
		}
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["num"] != nil {
		err = json.Unmarshal(fields["num"], &node.Num)
		if err != nil {
			return
		}
	}

	if fields["newowner"] != nil {
		err = json.Unmarshal(fields["newowner"], &node.Newowner)
		if err != nil {
			return
		}
	}

	if fields["def"] != nil {
		node.Def, err = UnmarshalNodeJSON(fields["def"])
		if err != nil {
			return
		}
	}

	if fields["behavior"] != nil {
		err = json.Unmarshal(fields["behavior"], &node.Behavior)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterDomainStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["subtype"] != nil {
		err = json.Unmarshal(fields["subtype"], &node.Subtype)
		if err != nil {
			return
		}
	}

	if fields["typeName"] != nil {
		node.TypeName, err = UnmarshalNodeArrayJSON(fields["typeName"])
		if err != nil {
			return
		}
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["def"] != nil {
		node.Def, err = UnmarshalNodeJSON(fields["def"])
		if err != nil {
			return
		}
	}

	if fields["behavior"] != nil {
		err = json.Unmarshal(fields["behavior"], &node.Behavior)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *SetOperationStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["op"] != nil {
		err = json.Unmarshal(fields["op"], &node.Op)
		if err != nil {
			return
		}
	}

	if fields["all"] != nil {
		err = json.Unmarshal(fields["all"], &node.All)
		if err != nil {
			return
		}
	}

	if fields["larg"] != nil {
		node.Larg, err = UnmarshalNodeJSON(fields["larg"])
		if err != nil {
			return
		}
	}

	if fields["rarg"] != nil {
		node.Rarg, err = UnmarshalNodeJSON(fields["rarg"])
		if err != nil {
			return
		}
	}

	if fields["colTypes"] != nil {
		node.ColTypes, err = UnmarshalNodeArrayJSON(fields["colTypes"])
		if err != nil {
			return
		}
	}

	if fields["colTypmods"] != nil {
		node.ColTypmods, err = UnmarshalNodeArrayJSON(fields["colTypmods"])
		if err != nil {
			return
		}
	}

	if fields["colCollations"] != nil {
		node.ColCollations, err = UnmarshalNodeArrayJSON(fields["colCollations"])
		if err != nil {
			return
		}
	}

	if fields["groupClauses"] != nil {
		node.GroupClauses, err = UnmarshalNodeArrayJSON(fields["groupClauses"])
		if err != nil {
			return
		}
	}

	return
}

func (node *GrantStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["is_grant"] != nil {
		err = json.Unmarshal(fields["is_grant"], &node.IsGrant)
		if err != nil {
			return
		}
	}

	if fields["targtype"] != nil {
		err = json.Unmarshal(fields["targtype"], &node.Targtype)
		if err != nil {
			return
		}
	}

	if fields["objtype"] != nil {
		err = json.Unmarshal(fields["objtype"], &node.Objtype)
		if err != nil {
			return
		}
	}

	if fields["objects"] != nil {
		node.Objects, err = UnmarshalNodeArrayJSON(fields["objects"])
		if err != nil {
			return
		}
	}

	if fields["privileges"] != nil {
		node.Privileges, err = UnmarshalNodeArrayJSON(fields["privileges"])
		if err != nil {
			return
		}
	}

	if fields["grantees"] != nil {
		node.Grantees, err = UnmarshalNodeArrayJSON(fields["grantees"])
		if err != nil {
			return
		}
	}

	if fields["grant_option"] != nil {
		err = json.Unmarshal(fields["grant_option"], &node.GrantOption)
		if err != nil {
			return
		}
	}

	if fields["behavior"] != nil {
		err = json.Unmarshal(fields["behavior"], &node.Behavior)
		if err != nil {
			return
		}
	}

	return
}

func (node *GrantRoleStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["granted_roles"] != nil {
		node.GrantedRoles, err = UnmarshalNodeArrayJSON(fields["granted_roles"])
		if err != nil {
			return
		}
	}

	if fields["grantee_roles"] != nil {
		node.GranteeRoles, err = UnmarshalNodeArrayJSON(fields["grantee_roles"])
		if err != nil {
			return
		}
	}

	if fields["is_grant"] != nil {
		err = json.Unmarshal(fields["is_grant"], &node.IsGrant)
		if err != nil {
			return
		}
	}

	if fields["admin_opt"] != nil {
		err = json.Unmarshal(fields["admin_opt"], &node.AdminOpt)
		if err != nil {
			return
		}
	}

	if fields["grantor"] != nil {
		err = json.Unmarshal(fields["grantor"], &node.Grantor)
		if err != nil {
			return
		}
	}

	if fields["behavior"] != nil {
		err = json.Unmarshal(fields["behavior"], &node.Behavior)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterDefaultPrivilegesStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["action"] != nil {
		err = json.Unmarshal(fields["action"], &node.Action)
		if err != nil {
			return
		}
	}

	return
}

func (node *ClosePortalStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["portalname"] != nil {
		err = json.Unmarshal(fields["portalname"], &node.Portalname)
		if err != nil {
			return
		}
	}

	return
}

func (node *ClusterStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["indexname"] != nil {
		err = json.Unmarshal(fields["indexname"], &node.Indexname)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		err = json.Unmarshal(fields["options"], &node.Options)
		if err != nil {
			return
		}
	}

	return
}

func (node *CopyStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["query"] != nil {
		node.Query, err = UnmarshalNodeJSON(fields["query"])
		if err != nil {
			return
		}
	}

	if fields["attlist"] != nil {
		node.Attlist, err = UnmarshalNodeArrayJSON(fields["attlist"])
		if err != nil {
			return
		}
	}

	if fields["is_from"] != nil {
		err = json.Unmarshal(fields["is_from"], &node.IsFrom)
		if err != nil {
			return
		}
	}

	if fields["is_program"] != nil {
		err = json.Unmarshal(fields["is_program"], &node.IsProgram)
		if err != nil {
			return
		}
	}

	if fields["filename"] != nil {
		err = json.Unmarshal(fields["filename"], &node.Filename)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["whereClause"] != nil {
		node.WhereClause, err = UnmarshalNodeJSON(fields["whereClause"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["tableElts"] != nil {
		node.TableElts, err = UnmarshalNodeArrayJSON(fields["tableElts"])
		if err != nil {
			return
		}
	}

	if fields["inhRelations"] != nil {
		node.InhRelations, err = UnmarshalNodeArrayJSON(fields["inhRelations"])
		if err != nil {
			return
		}
	}

	if fields["partbound"] != nil {
		err = json.Unmarshal(fields["partbound"], &node.Partbound)
		if err != nil {
			return
		}
	}

	if fields["partspec"] != nil {
		err = json.Unmarshal(fields["partspec"], &node.Partspec)
		if err != nil {
			return
		}
	}

	if fields["ofTypename"] != nil {
		err = json.Unmarshal(fields["ofTypename"], &node.OfTypename)
		if err != nil {
			return
		}
	}

	if fields["constraints"] != nil {
		node.Constraints, err = UnmarshalNodeArrayJSON(fields["constraints"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["oncommit"] != nil {
		err = json.Unmarshal(fields["oncommit"], &node.Oncommit)
		if err != nil {
			return
		}
	}

	if fields["tablespacename"] != nil {
		err = json.Unmarshal(fields["tablespacename"], &node.Tablespacename)
		if err != nil {
			return
		}
	}

	if fields["accessMethod"] != nil {
		err = json.Unmarshal(fields["accessMethod"], &node.AccessMethod)
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	return
}

func (node *DefineStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["oldstyle"] != nil {
		err = json.Unmarshal(fields["oldstyle"], &node.Oldstyle)
		if err != nil {
			return
		}
	}

	if fields["defnames"] != nil {
		node.Defnames, err = UnmarshalNodeArrayJSON(fields["defnames"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["definition"] != nil {
		node.Definition, err = UnmarshalNodeArrayJSON(fields["definition"])
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	if fields["replace"] != nil {
		err = json.Unmarshal(fields["replace"], &node.Replace)
		if err != nil {
			return
		}
	}

	return
}

func (node *DropStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["objects"] != nil {
		node.Objects, err = UnmarshalNodeArrayJSON(fields["objects"])
		if err != nil {
			return
		}
	}

	if fields["removeType"] != nil {
		err = json.Unmarshal(fields["removeType"], &node.RemoveType)
		if err != nil {
			return
		}
	}

	if fields["behavior"] != nil {
		err = json.Unmarshal(fields["behavior"], &node.Behavior)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	if fields["concurrent"] != nil {
		err = json.Unmarshal(fields["concurrent"], &node.Concurrent)
		if err != nil {
			return
		}
	}

	return
}

func (node *TruncateStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relations"] != nil {
		node.Relations, err = UnmarshalNodeArrayJSON(fields["relations"])
		if err != nil {
			return
		}
	}

	if fields["restart_seqs"] != nil {
		err = json.Unmarshal(fields["restart_seqs"], &node.RestartSeqs)
		if err != nil {
			return
		}
	}

	if fields["behavior"] != nil {
		err = json.Unmarshal(fields["behavior"], &node.Behavior)
		if err != nil {
			return
		}
	}

	return
}

func (node *CommentStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["objtype"] != nil {
		err = json.Unmarshal(fields["objtype"], &node.Objtype)
		if err != nil {
			return
		}
	}

	if fields["object"] != nil {
		node.Object, err = UnmarshalNodeJSON(fields["object"])
		if err != nil {
			return
		}
	}

	if fields["comment"] != nil {
		err = json.Unmarshal(fields["comment"], &node.Comment)
		if err != nil {
			return
		}
	}

	return
}

func (node *FetchStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["direction"] != nil {
		err = json.Unmarshal(fields["direction"], &node.Direction)
		if err != nil {
			return
		}
	}

	if fields["howMany"] != nil {
		err = json.Unmarshal(fields["howMany"], &node.HowMany)
		if err != nil {
			return
		}
	}

	if fields["portalname"] != nil {
		err = json.Unmarshal(fields["portalname"], &node.Portalname)
		if err != nil {
			return
		}
	}

	if fields["ismove"] != nil {
		err = json.Unmarshal(fields["ismove"], &node.Ismove)
		if err != nil {
			return
		}
	}

	return
}

func (node *IndexStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["idxname"] != nil {
		err = json.Unmarshal(fields["idxname"], &node.Idxname)
		if err != nil {
			return
		}
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["accessMethod"] != nil {
		err = json.Unmarshal(fields["accessMethod"], &node.AccessMethod)
		if err != nil {
			return
		}
	}

	if fields["tableSpace"] != nil {
		err = json.Unmarshal(fields["tableSpace"], &node.TableSpace)
		if err != nil {
			return
		}
	}

	if fields["indexParams"] != nil {
		node.IndexParams, err = UnmarshalNodeArrayJSON(fields["indexParams"])
		if err != nil {
			return
		}
	}

	if fields["indexIncludingParams"] != nil {
		node.IndexIncludingParams, err = UnmarshalNodeArrayJSON(fields["indexIncludingParams"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["whereClause"] != nil {
		node.WhereClause, err = UnmarshalNodeJSON(fields["whereClause"])
		if err != nil {
			return
		}
	}

	if fields["excludeOpNames"] != nil {
		node.ExcludeOpNames, err = UnmarshalNodeArrayJSON(fields["excludeOpNames"])
		if err != nil {
			return
		}
	}

	if fields["idxcomment"] != nil {
		err = json.Unmarshal(fields["idxcomment"], &node.Idxcomment)
		if err != nil {
			return
		}
	}

	if fields["indexOid"] != nil {
		err = json.Unmarshal(fields["indexOid"], &node.IndexOid)
		if err != nil {
			return
		}
	}

	if fields["oldNode"] != nil {
		err = json.Unmarshal(fields["oldNode"], &node.OldNode)
		if err != nil {
			return
		}
	}

	if fields["unique"] != nil {
		err = json.Unmarshal(fields["unique"], &node.Unique)
		if err != nil {
			return
		}
	}

	if fields["primary"] != nil {
		err = json.Unmarshal(fields["primary"], &node.Primary)
		if err != nil {
			return
		}
	}

	if fields["isconstraint"] != nil {
		err = json.Unmarshal(fields["isconstraint"], &node.Isconstraint)
		if err != nil {
			return
		}
	}

	if fields["deferrable"] != nil {
		err = json.Unmarshal(fields["deferrable"], &node.Deferrable)
		if err != nil {
			return
		}
	}

	if fields["initdeferred"] != nil {
		err = json.Unmarshal(fields["initdeferred"], &node.Initdeferred)
		if err != nil {
			return
		}
	}

	if fields["transformed"] != nil {
		err = json.Unmarshal(fields["transformed"], &node.Transformed)
		if err != nil {
			return
		}
	}

	if fields["concurrent"] != nil {
		err = json.Unmarshal(fields["concurrent"], &node.Concurrent)
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	if fields["reset_default_tblspc"] != nil {
		err = json.Unmarshal(fields["reset_default_tblspc"], &node.ResetDefaultTblspc)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateFunctionStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["is_procedure"] != nil {
		err = json.Unmarshal(fields["is_procedure"], &node.IsProcedure)
		if err != nil {
			return
		}
	}

	if fields["replace"] != nil {
		err = json.Unmarshal(fields["replace"], &node.Replace)
		if err != nil {
			return
		}
	}

	if fields["funcname"] != nil {
		node.Funcname, err = UnmarshalNodeArrayJSON(fields["funcname"])
		if err != nil {
			return
		}
	}

	if fields["parameters"] != nil {
		node.Parameters, err = UnmarshalNodeArrayJSON(fields["parameters"])
		if err != nil {
			return
		}
	}

	if fields["returnType"] != nil {
		err = json.Unmarshal(fields["returnType"], &node.ReturnType)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterFunctionStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["objtype"] != nil {
		err = json.Unmarshal(fields["objtype"], &node.Objtype)
		if err != nil {
			return
		}
	}

	if fields["func"] != nil {
		err = json.Unmarshal(fields["func"], &node.Func)
		if err != nil {
			return
		}
	}

	if fields["actions"] != nil {
		node.Actions, err = UnmarshalNodeArrayJSON(fields["actions"])
		if err != nil {
			return
		}
	}

	return
}

func (node *DoStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	return
}

func (node *RenameStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["renameType"] != nil {
		err = json.Unmarshal(fields["renameType"], &node.RenameType)
		if err != nil {
			return
		}
	}

	if fields["relationType"] != nil {
		err = json.Unmarshal(fields["relationType"], &node.RelationType)
		if err != nil {
			return
		}
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["object"] != nil {
		node.Object, err = UnmarshalNodeJSON(fields["object"])
		if err != nil {
			return
		}
	}

	if fields["subname"] != nil {
		err = json.Unmarshal(fields["subname"], &node.Subname)
		if err != nil {
			return
		}
	}

	if fields["newname"] != nil {
		err = json.Unmarshal(fields["newname"], &node.Newname)
		if err != nil {
			return
		}
	}

	if fields["behavior"] != nil {
		err = json.Unmarshal(fields["behavior"], &node.Behavior)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *RuleStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["rulename"] != nil {
		err = json.Unmarshal(fields["rulename"], &node.Rulename)
		if err != nil {
			return
		}
	}

	if fields["whereClause"] != nil {
		node.WhereClause, err = UnmarshalNodeJSON(fields["whereClause"])
		if err != nil {
			return
		}
	}

	if fields["event"] != nil {
		err = json.Unmarshal(fields["event"], &node.Event)
		if err != nil {
			return
		}
	}

	if fields["instead"] != nil {
		err = json.Unmarshal(fields["instead"], &node.Instead)
		if err != nil {
			return
		}
	}

	if fields["actions"] != nil {
		node.Actions, err = UnmarshalNodeArrayJSON(fields["actions"])
		if err != nil {
			return
		}
	}

	if fields["replace"] != nil {
		err = json.Unmarshal(fields["replace"], &node.Replace)
		if err != nil {
			return
		}
	}

	return
}

func (node *NotifyStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["conditionname"] != nil {
		err = json.Unmarshal(fields["conditionname"], &node.Conditionname)
		if err != nil {
			return
		}
	}

	if fields["payload"] != nil {
		err = json.Unmarshal(fields["payload"], &node.Payload)
		if err != nil {
			return
		}
	}

	return
}

func (node *ListenStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["conditionname"] != nil {
		err = json.Unmarshal(fields["conditionname"], &node.Conditionname)
		if err != nil {
			return
		}
	}

	return
}

func (node *UnlistenStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["conditionname"] != nil {
		err = json.Unmarshal(fields["conditionname"], &node.Conditionname)
		if err != nil {
			return
		}
	}

	return
}

func (node *TransactionStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["savepoint_name"] != nil {
		err = json.Unmarshal(fields["savepoint_name"], &node.SavepointName)
		if err != nil {
			return
		}
	}

	if fields["gid"] != nil {
		err = json.Unmarshal(fields["gid"], &node.Gid)
		if err != nil {
			return
		}
	}

	if fields["chain"] != nil {
		err = json.Unmarshal(fields["chain"], &node.Chain)
		if err != nil {
			return
		}
	}

	return
}

func (node *ViewStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["view"] != nil {
		err = json.Unmarshal(fields["view"], &node.View)
		if err != nil {
			return
		}
	}

	if fields["aliases"] != nil {
		node.Aliases, err = UnmarshalNodeArrayJSON(fields["aliases"])
		if err != nil {
			return
		}
	}

	if fields["query"] != nil {
		node.Query, err = UnmarshalNodeJSON(fields["query"])
		if err != nil {
			return
		}
	}

	if fields["replace"] != nil {
		err = json.Unmarshal(fields["replace"], &node.Replace)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["withCheckOption"] != nil {
		err = json.Unmarshal(fields["withCheckOption"], &node.WithCheckOption)
		if err != nil {
			return
		}
	}

	return
}

func (node *LoadStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["filename"] != nil {
		err = json.Unmarshal(fields["filename"], &node.Filename)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateDomainStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["domainname"] != nil {
		node.Domainname, err = UnmarshalNodeArrayJSON(fields["domainname"])
		if err != nil {
			return
		}
	}

	if fields["typeName"] != nil {
		err = json.Unmarshal(fields["typeName"], &node.TypeName)
		if err != nil {
			return
		}
	}

	if fields["collClause"] != nil {
		err = json.Unmarshal(fields["collClause"], &node.CollClause)
		if err != nil {
			return
		}
	}

	if fields["constraints"] != nil {
		node.Constraints, err = UnmarshalNodeArrayJSON(fields["constraints"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreatedbStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["dbname"] != nil {
		err = json.Unmarshal(fields["dbname"], &node.Dbname)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *DropdbStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["dbname"] != nil {
		err = json.Unmarshal(fields["dbname"], &node.Dbname)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *VacuumStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["rels"] != nil {
		node.Rels, err = UnmarshalNodeArrayJSON(fields["rels"])
		if err != nil {
			return
		}
	}

	if fields["is_vacuumcmd"] != nil {
		err = json.Unmarshal(fields["is_vacuumcmd"], &node.IsVacuumcmd)
		if err != nil {
			return
		}
	}

	return
}

func (node *ExplainStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["query"] != nil {
		node.Query, err = UnmarshalNodeJSON(fields["query"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateTableAsStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["query"] != nil {
		node.Query, err = UnmarshalNodeJSON(fields["query"])
		if err != nil {
			return
		}
	}

	if fields["into"] != nil {
		err = json.Unmarshal(fields["into"], &node.Into)
		if err != nil {
			return
		}
	}

	if fields["relkind"] != nil {
		err = json.Unmarshal(fields["relkind"], &node.Relkind)
		if err != nil {
			return
		}
	}

	if fields["is_select_into"] != nil {
		err = json.Unmarshal(fields["is_select_into"], &node.IsSelectInto)
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateSeqStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["sequence"] != nil {
		err = json.Unmarshal(fields["sequence"], &node.Sequence)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["ownerId"] != nil {
		err = json.Unmarshal(fields["ownerId"], &node.OwnerID)
		if err != nil {
			return
		}
	}

	if fields["for_identity"] != nil {
		err = json.Unmarshal(fields["for_identity"], &node.ForIdentity)
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterSeqStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["sequence"] != nil {
		err = json.Unmarshal(fields["sequence"], &node.Sequence)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["for_identity"] != nil {
		err = json.Unmarshal(fields["for_identity"], &node.ForIdentity)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *VariableSetStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["is_local"] != nil {
		err = json.Unmarshal(fields["is_local"], &node.IsLocal)
		if err != nil {
			return
		}
	}

	return
}

func (node *VariableShowStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	return
}

func (node *DiscardStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["target"] != nil {
		err = json.Unmarshal(fields["target"], &node.Target)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateTrigStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["trigname"] != nil {
		err = json.Unmarshal(fields["trigname"], &node.Trigname)
		if err != nil {
			return
		}
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["funcname"] != nil {
		node.Funcname, err = UnmarshalNodeArrayJSON(fields["funcname"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["row"] != nil {
		err = json.Unmarshal(fields["row"], &node.Row)
		if err != nil {
			return
		}
	}

	if fields["timing"] != nil {
		err = json.Unmarshal(fields["timing"], &node.Timing)
		if err != nil {
			return
		}
	}

	if fields["events"] != nil {
		err = json.Unmarshal(fields["events"], &node.Events)
		if err != nil {
			return
		}
	}

	if fields["columns"] != nil {
		node.Columns, err = UnmarshalNodeArrayJSON(fields["columns"])
		if err != nil {
			return
		}
	}

	if fields["whenClause"] != nil {
		node.WhenClause, err = UnmarshalNodeJSON(fields["whenClause"])
		if err != nil {
			return
		}
	}

	if fields["isconstraint"] != nil {
		err = json.Unmarshal(fields["isconstraint"], &node.Isconstraint)
		if err != nil {
			return
		}
	}

	if fields["transitionRels"] != nil {
		node.TransitionRels, err = UnmarshalNodeArrayJSON(fields["transitionRels"])
		if err != nil {
			return
		}
	}

	if fields["deferrable"] != nil {
		err = json.Unmarshal(fields["deferrable"], &node.Deferrable)
		if err != nil {
			return
		}
	}

	if fields["initdeferred"] != nil {
		err = json.Unmarshal(fields["initdeferred"], &node.Initdeferred)
		if err != nil {
			return
		}
	}

	if fields["constrrel"] != nil {
		err = json.Unmarshal(fields["constrrel"], &node.Constrrel)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreatePlangStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["replace"] != nil {
		err = json.Unmarshal(fields["replace"], &node.Replace)
		if err != nil {
			return
		}
	}

	if fields["plname"] != nil {
		err = json.Unmarshal(fields["plname"], &node.Plname)
		if err != nil {
			return
		}
	}

	if fields["plhandler"] != nil {
		node.Plhandler, err = UnmarshalNodeArrayJSON(fields["plhandler"])
		if err != nil {
			return
		}
	}

	if fields["plinline"] != nil {
		node.Plinline, err = UnmarshalNodeArrayJSON(fields["plinline"])
		if err != nil {
			return
		}
	}

	if fields["plvalidator"] != nil {
		node.Plvalidator, err = UnmarshalNodeArrayJSON(fields["plvalidator"])
		if err != nil {
			return
		}
	}

	if fields["pltrusted"] != nil {
		err = json.Unmarshal(fields["pltrusted"], &node.Pltrusted)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateRoleStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["stmt_type"] != nil {
		err = json.Unmarshal(fields["stmt_type"], &node.StmtType)
		if err != nil {
			return
		}
	}

	if fields["role"] != nil {
		err = json.Unmarshal(fields["role"], &node.Role)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterRoleStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["role"] != nil {
		err = json.Unmarshal(fields["role"], &node.Role)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["action"] != nil {
		err = json.Unmarshal(fields["action"], &node.Action)
		if err != nil {
			return
		}
	}

	return
}

func (node *DropRoleStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["roles"] != nil {
		node.Roles, err = UnmarshalNodeArrayJSON(fields["roles"])
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *LockStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relations"] != nil {
		node.Relations, err = UnmarshalNodeArrayJSON(fields["relations"])
		if err != nil {
			return
		}
	}

	if fields["mode"] != nil {
		err = json.Unmarshal(fields["mode"], &node.Mode)
		if err != nil {
			return
		}
	}

	if fields["nowait"] != nil {
		err = json.Unmarshal(fields["nowait"], &node.Nowait)
		if err != nil {
			return
		}
	}

	return
}

func (node *ConstraintsSetStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["constraints"] != nil {
		node.Constraints, err = UnmarshalNodeArrayJSON(fields["constraints"])
		if err != nil {
			return
		}
	}

	if fields["deferred"] != nil {
		err = json.Unmarshal(fields["deferred"], &node.Deferred)
		if err != nil {
			return
		}
	}

	return
}

func (node *ReindexStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		err = json.Unmarshal(fields["options"], &node.Options)
		if err != nil {
			return
		}
	}

	if fields["concurrent"] != nil {
		err = json.Unmarshal(fields["concurrent"], &node.Concurrent)
		if err != nil {
			return
		}
	}

	return
}

func (node *CheckPointStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	return
}

func (node *CreateSchemaStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["schemaname"] != nil {
		err = json.Unmarshal(fields["schemaname"], &node.Schemaname)
		if err != nil {
			return
		}
	}

	if fields["authrole"] != nil {
		err = json.Unmarshal(fields["authrole"], &node.Authrole)
		if err != nil {
			return
		}
	}

	if fields["schemaElts"] != nil {
		node.SchemaElts, err = UnmarshalNodeArrayJSON(fields["schemaElts"])
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterDatabaseStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["dbname"] != nil {
		err = json.Unmarshal(fields["dbname"], &node.Dbname)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterDatabaseSetStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["dbname"] != nil {
		err = json.Unmarshal(fields["dbname"], &node.Dbname)
		if err != nil {
			return
		}
	}

	if fields["setstmt"] != nil {
		err = json.Unmarshal(fields["setstmt"], &node.Setstmt)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterRoleSetStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["role"] != nil {
		err = json.Unmarshal(fields["role"], &node.Role)
		if err != nil {
			return
		}
	}

	if fields["database"] != nil {
		err = json.Unmarshal(fields["database"], &node.Database)
		if err != nil {
			return
		}
	}

	if fields["setstmt"] != nil {
		err = json.Unmarshal(fields["setstmt"], &node.Setstmt)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateConversionStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["conversion_name"] != nil {
		node.ConversionName, err = UnmarshalNodeArrayJSON(fields["conversion_name"])
		if err != nil {
			return
		}
	}

	if fields["for_encoding_name"] != nil {
		err = json.Unmarshal(fields["for_encoding_name"], &node.ForEncodingName)
		if err != nil {
			return
		}
	}

	if fields["to_encoding_name"] != nil {
		err = json.Unmarshal(fields["to_encoding_name"], &node.ToEncodingName)
		if err != nil {
			return
		}
	}

	if fields["func_name"] != nil {
		node.FuncName, err = UnmarshalNodeArrayJSON(fields["func_name"])
		if err != nil {
			return
		}
	}

	if fields["def"] != nil {
		err = json.Unmarshal(fields["def"], &node.Def)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateCastStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["sourcetype"] != nil {
		err = json.Unmarshal(fields["sourcetype"], &node.Sourcetype)
		if err != nil {
			return
		}
	}

	if fields["targettype"] != nil {
		err = json.Unmarshal(fields["targettype"], &node.Targettype)
		if err != nil {
			return
		}
	}

	if fields["func"] != nil {
		err = json.Unmarshal(fields["func"], &node.Func)
		if err != nil {
			return
		}
	}

	if fields["context"] != nil {
		err = json.Unmarshal(fields["context"], &node.Context)
		if err != nil {
			return
		}
	}

	if fields["inout"] != nil {
		err = json.Unmarshal(fields["inout"], &node.Inout)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateOpClassStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["opclassname"] != nil {
		node.Opclassname, err = UnmarshalNodeArrayJSON(fields["opclassname"])
		if err != nil {
			return
		}
	}

	if fields["opfamilyname"] != nil {
		node.Opfamilyname, err = UnmarshalNodeArrayJSON(fields["opfamilyname"])
		if err != nil {
			return
		}
	}

	if fields["amname"] != nil {
		err = json.Unmarshal(fields["amname"], &node.Amname)
		if err != nil {
			return
		}
	}

	if fields["datatype"] != nil {
		err = json.Unmarshal(fields["datatype"], &node.Datatype)
		if err != nil {
			return
		}
	}

	if fields["items"] != nil {
		node.Items, err = UnmarshalNodeArrayJSON(fields["items"])
		if err != nil {
			return
		}
	}

	if fields["isDefault"] != nil {
		err = json.Unmarshal(fields["isDefault"], &node.IsDefault)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateOpFamilyStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["opfamilyname"] != nil {
		node.Opfamilyname, err = UnmarshalNodeArrayJSON(fields["opfamilyname"])
		if err != nil {
			return
		}
	}

	if fields["amname"] != nil {
		err = json.Unmarshal(fields["amname"], &node.Amname)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterOpFamilyStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["opfamilyname"] != nil {
		node.Opfamilyname, err = UnmarshalNodeArrayJSON(fields["opfamilyname"])
		if err != nil {
			return
		}
	}

	if fields["amname"] != nil {
		err = json.Unmarshal(fields["amname"], &node.Amname)
		if err != nil {
			return
		}
	}

	if fields["isDrop"] != nil {
		err = json.Unmarshal(fields["isDrop"], &node.IsDrop)
		if err != nil {
			return
		}
	}

	if fields["items"] != nil {
		node.Items, err = UnmarshalNodeArrayJSON(fields["items"])
		if err != nil {
			return
		}
	}

	return
}

func (node *PrepareStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["argtypes"] != nil {
		node.Argtypes, err = UnmarshalNodeArrayJSON(fields["argtypes"])
		if err != nil {
			return
		}
	}

	if fields["query"] != nil {
		node.Query, err = UnmarshalNodeJSON(fields["query"])
		if err != nil {
			return
		}
	}

	return
}

func (node *ExecuteStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["params"] != nil {
		node.Params, err = UnmarshalNodeArrayJSON(fields["params"])
		if err != nil {
			return
		}
	}

	return
}

func (node *DeallocateStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	return
}

func (node *DeclareCursorStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["portalname"] != nil {
		err = json.Unmarshal(fields["portalname"], &node.Portalname)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		err = json.Unmarshal(fields["options"], &node.Options)
		if err != nil {
			return
		}
	}

	if fields["query"] != nil {
		node.Query, err = UnmarshalNodeJSON(fields["query"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateTableSpaceStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["tablespacename"] != nil {
		err = json.Unmarshal(fields["tablespacename"], &node.Tablespacename)
		if err != nil {
			return
		}
	}

	if fields["owner"] != nil {
		err = json.Unmarshal(fields["owner"], &node.Owner)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *DropTableSpaceStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["tablespacename"] != nil {
		err = json.Unmarshal(fields["tablespacename"], &node.Tablespacename)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterObjectDependsStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["objectType"] != nil {
		err = json.Unmarshal(fields["objectType"], &node.ObjectType)
		if err != nil {
			return
		}
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["object"] != nil {
		node.Object, err = UnmarshalNodeJSON(fields["object"])
		if err != nil {
			return
		}
	}

	if fields["extname"] != nil {
		node.Extname, err = UnmarshalNodeJSON(fields["extname"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterObjectSchemaStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["objectType"] != nil {
		err = json.Unmarshal(fields["objectType"], &node.ObjectType)
		if err != nil {
			return
		}
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["object"] != nil {
		node.Object, err = UnmarshalNodeJSON(fields["object"])
		if err != nil {
			return
		}
	}

	if fields["newschema"] != nil {
		err = json.Unmarshal(fields["newschema"], &node.Newschema)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterOwnerStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["objectType"] != nil {
		err = json.Unmarshal(fields["objectType"], &node.ObjectType)
		if err != nil {
			return
		}
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["object"] != nil {
		node.Object, err = UnmarshalNodeJSON(fields["object"])
		if err != nil {
			return
		}
	}

	if fields["newowner"] != nil {
		err = json.Unmarshal(fields["newowner"], &node.Newowner)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterOperatorStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["opername"] != nil {
		err = json.Unmarshal(fields["opername"], &node.Opername)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *DropOwnedStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["roles"] != nil {
		node.Roles, err = UnmarshalNodeArrayJSON(fields["roles"])
		if err != nil {
			return
		}
	}

	if fields["behavior"] != nil {
		err = json.Unmarshal(fields["behavior"], &node.Behavior)
		if err != nil {
			return
		}
	}

	return
}

func (node *ReassignOwnedStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["roles"] != nil {
		node.Roles, err = UnmarshalNodeArrayJSON(fields["roles"])
		if err != nil {
			return
		}
	}

	if fields["newrole"] != nil {
		err = json.Unmarshal(fields["newrole"], &node.Newrole)
		if err != nil {
			return
		}
	}

	return
}

func (node *CompositeTypeStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["typevar"] != nil {
		err = json.Unmarshal(fields["typevar"], &node.Typevar)
		if err != nil {
			return
		}
	}

	if fields["coldeflist"] != nil {
		node.Coldeflist, err = UnmarshalNodeArrayJSON(fields["coldeflist"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateEnumStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["typeName"] != nil {
		node.TypeName, err = UnmarshalNodeArrayJSON(fields["typeName"])
		if err != nil {
			return
		}
	}

	if fields["vals"] != nil {
		node.Vals, err = UnmarshalNodeArrayJSON(fields["vals"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateRangeStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["typeName"] != nil {
		node.TypeName, err = UnmarshalNodeArrayJSON(fields["typeName"])
		if err != nil {
			return
		}
	}

	if fields["params"] != nil {
		node.Params, err = UnmarshalNodeArrayJSON(fields["params"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterEnumStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["typeName"] != nil {
		node.TypeName, err = UnmarshalNodeArrayJSON(fields["typeName"])
		if err != nil {
			return
		}
	}

	if fields["oldVal"] != nil {
		err = json.Unmarshal(fields["oldVal"], &node.OldVal)
		if err != nil {
			return
		}
	}

	if fields["newVal"] != nil {
		err = json.Unmarshal(fields["newVal"], &node.NewVal)
		if err != nil {
			return
		}
	}

	if fields["newValNeighbor"] != nil {
		err = json.Unmarshal(fields["newValNeighbor"], &node.NewValNeighbor)
		if err != nil {
			return
		}
	}

	if fields["newValIsAfter"] != nil {
		err = json.Unmarshal(fields["newValIsAfter"], &node.NewValIsAfter)
		if err != nil {
			return
		}
	}

	if fields["skipIfNewValExists"] != nil {
		err = json.Unmarshal(fields["skipIfNewValExists"], &node.SkipIfNewValExists)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterTsdictionaryStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["dictname"] != nil {
		node.Dictname, err = UnmarshalNodeArrayJSON(fields["dictname"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterTsconfigurationStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["cfgname"] != nil {
		node.Cfgname, err = UnmarshalNodeArrayJSON(fields["cfgname"])
		if err != nil {
			return
		}
	}

	if fields["tokentype"] != nil {
		node.Tokentype, err = UnmarshalNodeArrayJSON(fields["tokentype"])
		if err != nil {
			return
		}
	}

	if fields["dicts"] != nil {
		node.Dicts, err = UnmarshalNodeArrayJSON(fields["dicts"])
		if err != nil {
			return
		}
	}

	if fields["override"] != nil {
		err = json.Unmarshal(fields["override"], &node.Override)
		if err != nil {
			return
		}
	}

	if fields["replace"] != nil {
		err = json.Unmarshal(fields["replace"], &node.Replace)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateFdwStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["fdwname"] != nil {
		err = json.Unmarshal(fields["fdwname"], &node.Fdwname)
		if err != nil {
			return
		}
	}

	if fields["func_options"] != nil {
		node.FuncOptions, err = UnmarshalNodeArrayJSON(fields["func_options"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterFdwStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["fdwname"] != nil {
		err = json.Unmarshal(fields["fdwname"], &node.Fdwname)
		if err != nil {
			return
		}
	}

	if fields["func_options"] != nil {
		node.FuncOptions, err = UnmarshalNodeArrayJSON(fields["func_options"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateForeignServerStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["servername"] != nil {
		err = json.Unmarshal(fields["servername"], &node.Servername)
		if err != nil {
			return
		}
	}

	if fields["servertype"] != nil {
		err = json.Unmarshal(fields["servertype"], &node.Servertype)
		if err != nil {
			return
		}
	}

	if fields["version"] != nil {
		err = json.Unmarshal(fields["version"], &node.Version)
		if err != nil {
			return
		}
	}

	if fields["fdwname"] != nil {
		err = json.Unmarshal(fields["fdwname"], &node.Fdwname)
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterForeignServerStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["servername"] != nil {
		err = json.Unmarshal(fields["servername"], &node.Servername)
		if err != nil {
			return
		}
	}

	if fields["version"] != nil {
		err = json.Unmarshal(fields["version"], &node.Version)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["has_version"] != nil {
		err = json.Unmarshal(fields["has_version"], &node.HasVersion)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateUserMappingStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["user"] != nil {
		err = json.Unmarshal(fields["user"], &node.User)
		if err != nil {
			return
		}
	}

	if fields["servername"] != nil {
		err = json.Unmarshal(fields["servername"], &node.Servername)
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterUserMappingStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["user"] != nil {
		err = json.Unmarshal(fields["user"], &node.User)
		if err != nil {
			return
		}
	}

	if fields["servername"] != nil {
		err = json.Unmarshal(fields["servername"], &node.Servername)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *DropUserMappingStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["user"] != nil {
		err = json.Unmarshal(fields["user"], &node.User)
		if err != nil {
			return
		}
	}

	if fields["servername"] != nil {
		err = json.Unmarshal(fields["servername"], &node.Servername)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterTableSpaceOptionsStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["tablespacename"] != nil {
		err = json.Unmarshal(fields["tablespacename"], &node.Tablespacename)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["isReset"] != nil {
		err = json.Unmarshal(fields["isReset"], &node.IsReset)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterTableMoveAllStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["orig_tablespacename"] != nil {
		err = json.Unmarshal(fields["orig_tablespacename"], &node.OrigTablespacename)
		if err != nil {
			return
		}
	}

	if fields["objtype"] != nil {
		err = json.Unmarshal(fields["objtype"], &node.Objtype)
		if err != nil {
			return
		}
	}

	if fields["roles"] != nil {
		node.Roles, err = UnmarshalNodeArrayJSON(fields["roles"])
		if err != nil {
			return
		}
	}

	if fields["new_tablespacename"] != nil {
		err = json.Unmarshal(fields["new_tablespacename"], &node.NewTablespacename)
		if err != nil {
			return
		}
	}

	if fields["nowait"] != nil {
		err = json.Unmarshal(fields["nowait"], &node.Nowait)
		if err != nil {
			return
		}
	}

	return
}

func (node *SecLabelStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["objtype"] != nil {
		err = json.Unmarshal(fields["objtype"], &node.Objtype)
		if err != nil {
			return
		}
	}

	if fields["object"] != nil {
		node.Object, err = UnmarshalNodeJSON(fields["object"])
		if err != nil {
			return
		}
	}

	if fields["provider"] != nil {
		err = json.Unmarshal(fields["provider"], &node.Provider)
		if err != nil {
			return
		}
	}

	if fields["label"] != nil {
		err = json.Unmarshal(fields["label"], &node.Label)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateForeignTableStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["base"] != nil {
		err = json.Unmarshal(fields["base"], &node.Base)
		if err != nil {
			return
		}
	}

	if fields["servername"] != nil {
		err = json.Unmarshal(fields["servername"], &node.Servername)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *ImportForeignSchemaStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["server_name"] != nil {
		err = json.Unmarshal(fields["server_name"], &node.ServerName)
		if err != nil {
			return
		}
	}

	if fields["remote_schema"] != nil {
		err = json.Unmarshal(fields["remote_schema"], &node.RemoteSchema)
		if err != nil {
			return
		}
	}

	if fields["local_schema"] != nil {
		err = json.Unmarshal(fields["local_schema"], &node.LocalSchema)
		if err != nil {
			return
		}
	}

	if fields["list_type"] != nil {
		err = json.Unmarshal(fields["list_type"], &node.ListType)
		if err != nil {
			return
		}
	}

	if fields["table_list"] != nil {
		node.TableList, err = UnmarshalNodeArrayJSON(fields["table_list"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateExtensionStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["extname"] != nil {
		err = json.Unmarshal(fields["extname"], &node.Extname)
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterExtensionStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["extname"] != nil {
		err = json.Unmarshal(fields["extname"], &node.Extname)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterExtensionContentsStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["extname"] != nil {
		err = json.Unmarshal(fields["extname"], &node.Extname)
		if err != nil {
			return
		}
	}

	if fields["action"] != nil {
		err = json.Unmarshal(fields["action"], &node.Action)
		if err != nil {
			return
		}
	}

	if fields["objtype"] != nil {
		err = json.Unmarshal(fields["objtype"], &node.Objtype)
		if err != nil {
			return
		}
	}

	if fields["object"] != nil {
		node.Object, err = UnmarshalNodeJSON(fields["object"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateEventTrigStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["trigname"] != nil {
		err = json.Unmarshal(fields["trigname"], &node.Trigname)
		if err != nil {
			return
		}
	}

	if fields["eventname"] != nil {
		err = json.Unmarshal(fields["eventname"], &node.Eventname)
		if err != nil {
			return
		}
	}

	if fields["whenclause"] != nil {
		node.Whenclause, err = UnmarshalNodeArrayJSON(fields["whenclause"])
		if err != nil {
			return
		}
	}

	if fields["funcname"] != nil {
		node.Funcname, err = UnmarshalNodeArrayJSON(fields["funcname"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterEventTrigStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["trigname"] != nil {
		err = json.Unmarshal(fields["trigname"], &node.Trigname)
		if err != nil {
			return
		}
	}

	if fields["tgenabled"] != nil {
		err = json.Unmarshal(fields["tgenabled"], &node.Tgenabled)
		if err != nil {
			return
		}
	}

	return
}

func (node *RefreshMatViewStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["concurrent"] != nil {
		err = json.Unmarshal(fields["concurrent"], &node.Concurrent)
		if err != nil {
			return
		}
	}

	if fields["skipData"] != nil {
		err = json.Unmarshal(fields["skipData"], &node.SkipData)
		if err != nil {
			return
		}
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	return
}

func (node *ReplicaIdentityStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["identity_type"] != nil {
		err = json.Unmarshal(fields["identity_type"], &node.IdentityType)
		if err != nil {
			return
		}
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterSystemStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["setstmt"] != nil {
		err = json.Unmarshal(fields["setstmt"], &node.Setstmt)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreatePolicyStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["policy_name"] != nil {
		err = json.Unmarshal(fields["policy_name"], &node.PolicyName)
		if err != nil {
			return
		}
	}

	if fields["table"] != nil {
		err = json.Unmarshal(fields["table"], &node.Table)
		if err != nil {
			return
		}
	}

	if fields["cmd_name"] != nil {
		err = json.Unmarshal(fields["cmd_name"], &node.CmdName)
		if err != nil {
			return
		}
	}

	if fields["permissive"] != nil {
		err = json.Unmarshal(fields["permissive"], &node.Permissive)
		if err != nil {
			return
		}
	}

	if fields["roles"] != nil {
		node.Roles, err = UnmarshalNodeArrayJSON(fields["roles"])
		if err != nil {
			return
		}
	}

	if fields["qual"] != nil {
		node.Qual, err = UnmarshalNodeJSON(fields["qual"])
		if err != nil {
			return
		}
	}

	if fields["with_check"] != nil {
		node.WithCheck, err = UnmarshalNodeJSON(fields["with_check"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterPolicyStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["policy_name"] != nil {
		err = json.Unmarshal(fields["policy_name"], &node.PolicyName)
		if err != nil {
			return
		}
	}

	if fields["table"] != nil {
		err = json.Unmarshal(fields["table"], &node.Table)
		if err != nil {
			return
		}
	}

	if fields["roles"] != nil {
		node.Roles, err = UnmarshalNodeArrayJSON(fields["roles"])
		if err != nil {
			return
		}
	}

	if fields["qual"] != nil {
		node.Qual, err = UnmarshalNodeJSON(fields["qual"])
		if err != nil {
			return
		}
	}

	if fields["with_check"] != nil {
		node.WithCheck, err = UnmarshalNodeJSON(fields["with_check"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateTransformStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["replace"] != nil {
		err = json.Unmarshal(fields["replace"], &node.Replace)
		if err != nil {
			return
		}
	}

	if fields["type_name"] != nil {
		err = json.Unmarshal(fields["type_name"], &node.TypeName)
		if err != nil {
			return
		}
	}

	if fields["lang"] != nil {
		err = json.Unmarshal(fields["lang"], &node.Lang)
		if err != nil {
			return
		}
	}

	if fields["fromsql"] != nil {
		err = json.Unmarshal(fields["fromsql"], &node.Fromsql)
		if err != nil {
			return
		}
	}

	if fields["tosql"] != nil {
		err = json.Unmarshal(fields["tosql"], &node.Tosql)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateAmStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["amname"] != nil {
		err = json.Unmarshal(fields["amname"], &node.Amname)
		if err != nil {
			return
		}
	}

	if fields["handler_name"] != nil {
		node.HandlerName, err = UnmarshalNodeArrayJSON(fields["handler_name"])
		if err != nil {
			return
		}
	}

	if fields["amtype"] != nil {
		err = json.Unmarshal(fields["amtype"], &node.Amtype)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreatePublicationStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["pubname"] != nil {
		err = json.Unmarshal(fields["pubname"], &node.Pubname)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["tables"] != nil {
		node.Tables, err = UnmarshalNodeArrayJSON(fields["tables"])
		if err != nil {
			return
		}
	}

	if fields["for_all_tables"] != nil {
		err = json.Unmarshal(fields["for_all_tables"], &node.ForAllTables)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterPublicationStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["pubname"] != nil {
		err = json.Unmarshal(fields["pubname"], &node.Pubname)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["tables"] != nil {
		node.Tables, err = UnmarshalNodeArrayJSON(fields["tables"])
		if err != nil {
			return
		}
	}

	if fields["for_all_tables"] != nil {
		err = json.Unmarshal(fields["for_all_tables"], &node.ForAllTables)
		if err != nil {
			return
		}
	}

	if fields["tableAction"] != nil {
		err = json.Unmarshal(fields["tableAction"], &node.TableAction)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateSubscriptionStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["subname"] != nil {
		err = json.Unmarshal(fields["subname"], &node.Subname)
		if err != nil {
			return
		}
	}

	if fields["conninfo"] != nil {
		err = json.Unmarshal(fields["conninfo"], &node.Conninfo)
		if err != nil {
			return
		}
	}

	if fields["publication"] != nil {
		node.Publication, err = UnmarshalNodeArrayJSON(fields["publication"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterSubscriptionStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["subname"] != nil {
		err = json.Unmarshal(fields["subname"], &node.Subname)
		if err != nil {
			return
		}
	}

	if fields["conninfo"] != nil {
		err = json.Unmarshal(fields["conninfo"], &node.Conninfo)
		if err != nil {
			return
		}
	}

	if fields["publication"] != nil {
		node.Publication, err = UnmarshalNodeArrayJSON(fields["publication"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	return
}

func (node *DropSubscriptionStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["subname"] != nil {
		err = json.Unmarshal(fields["subname"], &node.Subname)
		if err != nil {
			return
		}
	}

	if fields["missing_ok"] != nil {
		err = json.Unmarshal(fields["missing_ok"], &node.MissingOk)
		if err != nil {
			return
		}
	}

	if fields["behavior"] != nil {
		err = json.Unmarshal(fields["behavior"], &node.Behavior)
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateStatsStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["defnames"] != nil {
		node.Defnames, err = UnmarshalNodeArrayJSON(fields["defnames"])
		if err != nil {
			return
		}
	}

	if fields["stat_types"] != nil {
		node.StatTypes, err = UnmarshalNodeArrayJSON(fields["stat_types"])
		if err != nil {
			return
		}
	}

	if fields["exprs"] != nil {
		node.Exprs, err = UnmarshalNodeArrayJSON(fields["exprs"])
		if err != nil {
			return
		}
	}

	if fields["relations"] != nil {
		node.Relations, err = UnmarshalNodeArrayJSON(fields["relations"])
		if err != nil {
			return
		}
	}

	if fields["stxcomment"] != nil {
		err = json.Unmarshal(fields["stxcomment"], &node.Stxcomment)
		if err != nil {
			return
		}
	}

	if fields["if_not_exists"] != nil {
		err = json.Unmarshal(fields["if_not_exists"], &node.IfNotExists)
		if err != nil {
			return
		}
	}

	return
}

func (node *AlterCollationStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["collname"] != nil {
		node.Collname, err = UnmarshalNodeArrayJSON(fields["collname"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CallStmt) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["funccall"] != nil {
		err = json.Unmarshal(fields["funccall"], &node.Funccall)
		if err != nil {
			return
		}
	}

	if fields["funcexpr"] != nil {
		err = json.Unmarshal(fields["funcexpr"], &node.Funcexpr)
		if err != nil {
			return
		}
	}

	return
}

func (node *AExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["name"] != nil {
		node.Name, err = UnmarshalNodeArrayJSON(fields["name"])
		if err != nil {
			return
		}
	}

	if fields["lexpr"] != nil {
		node.Lexpr, err = UnmarshalNodeJSON(fields["lexpr"])
		if err != nil {
			return
		}
	}

	if fields["rexpr"] != nil {
		node.Rexpr, err = UnmarshalNodeJSON(fields["rexpr"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *ColumnRef) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["fields"] != nil {
		node.Fields, err = UnmarshalNodeArrayJSON(fields["fields"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *ParamRef) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["number"] != nil {
		err = json.Unmarshal(fields["number"], &node.Number)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *AConst) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["val"] != nil {
		node.Val, err = UnmarshalNodeJSON(fields["val"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *FuncCall) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["funcname"] != nil {
		node.Funcname, err = UnmarshalNodeArrayJSON(fields["funcname"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["agg_order"] != nil {
		node.AggOrder, err = UnmarshalNodeArrayJSON(fields["agg_order"])
		if err != nil {
			return
		}
	}

	if fields["agg_filter"] != nil {
		node.AggFilter, err = UnmarshalNodeJSON(fields["agg_filter"])
		if err != nil {
			return
		}
	}

	if fields["agg_within_group"] != nil {
		err = json.Unmarshal(fields["agg_within_group"], &node.AggWithinGroup)
		if err != nil {
			return
		}
	}

	if fields["agg_star"] != nil {
		err = json.Unmarshal(fields["agg_star"], &node.AggStar)
		if err != nil {
			return
		}
	}

	if fields["agg_distinct"] != nil {
		err = json.Unmarshal(fields["agg_distinct"], &node.AggDistinct)
		if err != nil {
			return
		}
	}

	if fields["func_variadic"] != nil {
		err = json.Unmarshal(fields["func_variadic"], &node.FuncVariadic)
		if err != nil {
			return
		}
	}

	if fields["over"] != nil {
		err = json.Unmarshal(fields["over"], &node.Over)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *AStar) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	return
}

func (node *AIndices) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["is_slice"] != nil {
		err = json.Unmarshal(fields["is_slice"], &node.IsSlice)
		if err != nil {
			return
		}
	}

	if fields["lidx"] != nil {
		node.Lidx, err = UnmarshalNodeJSON(fields["lidx"])
		if err != nil {
			return
		}
	}

	if fields["uidx"] != nil {
		node.Uidx, err = UnmarshalNodeJSON(fields["uidx"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AIndirection) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["indirection"] != nil {
		node.Indirection, err = UnmarshalNodeArrayJSON(fields["indirection"])
		if err != nil {
			return
		}
	}

	return
}

func (node *AArrayExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["elements"] != nil {
		node.Elements, err = UnmarshalNodeArrayJSON(fields["elements"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *ResTarget) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["indirection"] != nil {
		node.Indirection, err = UnmarshalNodeArrayJSON(fields["indirection"])
		if err != nil {
			return
		}
	}

	if fields["val"] != nil {
		node.Val, err = UnmarshalNodeJSON(fields["val"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *MultiAssignRef) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["source"] != nil {
		node.Source, err = UnmarshalNodeJSON(fields["source"])
		if err != nil {
			return
		}
	}

	if fields["colno"] != nil {
		err = json.Unmarshal(fields["colno"], &node.Colno)
		if err != nil {
			return
		}
	}

	if fields["ncolumns"] != nil {
		err = json.Unmarshal(fields["ncolumns"], &node.Ncolumns)
		if err != nil {
			return
		}
	}

	return
}

func (node *TypeCast) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["typeName"] != nil {
		err = json.Unmarshal(fields["typeName"], &node.TypeName)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CollateClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["collname"] != nil {
		node.Collname, err = UnmarshalNodeArrayJSON(fields["collname"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *SortBy) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["node"] != nil {
		node.Node, err = UnmarshalNodeJSON(fields["node"])
		if err != nil {
			return
		}
	}

	if fields["sortby_dir"] != nil {
		err = json.Unmarshal(fields["sortby_dir"], &node.SortbyDir)
		if err != nil {
			return
		}
	}

	if fields["sortby_nulls"] != nil {
		err = json.Unmarshal(fields["sortby_nulls"], &node.SortbyNulls)
		if err != nil {
			return
		}
	}

	if fields["useOp"] != nil {
		node.UseOp, err = UnmarshalNodeArrayJSON(fields["useOp"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *WindowDef) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["refname"] != nil {
		err = json.Unmarshal(fields["refname"], &node.Refname)
		if err != nil {
			return
		}
	}

	if fields["partitionClause"] != nil {
		node.PartitionClause, err = UnmarshalNodeArrayJSON(fields["partitionClause"])
		if err != nil {
			return
		}
	}

	if fields["orderClause"] != nil {
		node.OrderClause, err = UnmarshalNodeArrayJSON(fields["orderClause"])
		if err != nil {
			return
		}
	}

	if fields["frameOptions"] != nil {
		err = json.Unmarshal(fields["frameOptions"], &node.FrameOptions)
		if err != nil {
			return
		}
	}

	if fields["startOffset"] != nil {
		node.StartOffset, err = UnmarshalNodeJSON(fields["startOffset"])
		if err != nil {
			return
		}
	}

	if fields["endOffset"] != nil {
		node.EndOffset, err = UnmarshalNodeJSON(fields["endOffset"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *RangeSubselect) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["lateral"] != nil {
		err = json.Unmarshal(fields["lateral"], &node.Lateral)
		if err != nil {
			return
		}
	}

	if fields["subquery"] != nil {
		node.Subquery, err = UnmarshalNodeJSON(fields["subquery"])
		if err != nil {
			return
		}
	}

	if fields["alias"] != nil {
		err = json.Unmarshal(fields["alias"], &node.Alias)
		if err != nil {
			return
		}
	}

	return
}

func (node *RangeFunction) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["lateral"] != nil {
		err = json.Unmarshal(fields["lateral"], &node.Lateral)
		if err != nil {
			return
		}
	}

	if fields["ordinality"] != nil {
		err = json.Unmarshal(fields["ordinality"], &node.Ordinality)
		if err != nil {
			return
		}
	}

	if fields["is_rowsfrom"] != nil {
		err = json.Unmarshal(fields["is_rowsfrom"], &node.IsRowsfrom)
		if err != nil {
			return
		}
	}

	if fields["functions"] != nil {
		node.Functions, err = UnmarshalNodeArrayJSON(fields["functions"])
		if err != nil {
			return
		}
	}

	if fields["alias"] != nil {
		err = json.Unmarshal(fields["alias"], &node.Alias)
		if err != nil {
			return
		}
	}

	if fields["coldeflist"] != nil {
		node.Coldeflist, err = UnmarshalNodeArrayJSON(fields["coldeflist"])
		if err != nil {
			return
		}
	}

	return
}

func (node *RangeTableSample) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		node.Relation, err = UnmarshalNodeJSON(fields["relation"])
		if err != nil {
			return
		}
	}

	if fields["method"] != nil {
		node.Method, err = UnmarshalNodeArrayJSON(fields["method"])
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["repeatable"] != nil {
		node.Repeatable, err = UnmarshalNodeJSON(fields["repeatable"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *RangeTableFunc) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["lateral"] != nil {
		err = json.Unmarshal(fields["lateral"], &node.Lateral)
		if err != nil {
			return
		}
	}

	if fields["docexpr"] != nil {
		node.Docexpr, err = UnmarshalNodeJSON(fields["docexpr"])
		if err != nil {
			return
		}
	}

	if fields["rowexpr"] != nil {
		node.Rowexpr, err = UnmarshalNodeJSON(fields["rowexpr"])
		if err != nil {
			return
		}
	}

	if fields["namespaces"] != nil {
		node.Namespaces, err = UnmarshalNodeArrayJSON(fields["namespaces"])
		if err != nil {
			return
		}
	}

	if fields["columns"] != nil {
		node.Columns, err = UnmarshalNodeArrayJSON(fields["columns"])
		if err != nil {
			return
		}
	}

	if fields["alias"] != nil {
		err = json.Unmarshal(fields["alias"], &node.Alias)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *RangeTableFuncCol) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["colname"] != nil {
		err = json.Unmarshal(fields["colname"], &node.Colname)
		if err != nil {
			return
		}
	}

	if fields["typeName"] != nil {
		err = json.Unmarshal(fields["typeName"], &node.TypeName)
		if err != nil {
			return
		}
	}

	if fields["for_ordinality"] != nil {
		err = json.Unmarshal(fields["for_ordinality"], &node.ForOrdinality)
		if err != nil {
			return
		}
	}

	if fields["is_not_null"] != nil {
		err = json.Unmarshal(fields["is_not_null"], &node.IsNotNull)
		if err != nil {
			return
		}
	}

	if fields["colexpr"] != nil {
		node.Colexpr, err = UnmarshalNodeJSON(fields["colexpr"])
		if err != nil {
			return
		}
	}

	if fields["coldefexpr"] != nil {
		node.Coldefexpr, err = UnmarshalNodeJSON(fields["coldefexpr"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *TypeName) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["names"] != nil {
		node.Names, err = UnmarshalNodeArrayJSON(fields["names"])
		if err != nil {
			return
		}
	}

	if fields["typeOid"] != nil {
		err = json.Unmarshal(fields["typeOid"], &node.TypeOid)
		if err != nil {
			return
		}
	}

	if fields["setof"] != nil {
		err = json.Unmarshal(fields["setof"], &node.Setof)
		if err != nil {
			return
		}
	}

	if fields["pct_type"] != nil {
		err = json.Unmarshal(fields["pct_type"], &node.PctType)
		if err != nil {
			return
		}
	}

	if fields["typmods"] != nil {
		node.Typmods, err = UnmarshalNodeArrayJSON(fields["typmods"])
		if err != nil {
			return
		}
	}

	if fields["typemod"] != nil {
		err = json.Unmarshal(fields["typemod"], &node.Typemod)
		if err != nil {
			return
		}
	}

	if fields["arrayBounds"] != nil {
		node.ArrayBounds, err = UnmarshalNodeArrayJSON(fields["arrayBounds"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *ColumnDef) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["colname"] != nil {
		err = json.Unmarshal(fields["colname"], &node.Colname)
		if err != nil {
			return
		}
	}

	if fields["typeName"] != nil {
		err = json.Unmarshal(fields["typeName"], &node.TypeName)
		if err != nil {
			return
		}
	}

	if fields["inhcount"] != nil {
		err = json.Unmarshal(fields["inhcount"], &node.Inhcount)
		if err != nil {
			return
		}
	}

	if fields["is_local"] != nil {
		err = json.Unmarshal(fields["is_local"], &node.IsLocal)
		if err != nil {
			return
		}
	}

	if fields["is_not_null"] != nil {
		err = json.Unmarshal(fields["is_not_null"], &node.IsNotNull)
		if err != nil {
			return
		}
	}

	if fields["is_from_type"] != nil {
		err = json.Unmarshal(fields["is_from_type"], &node.IsFromType)
		if err != nil {
			return
		}
	}

	if fields["storage"] != nil {
		err = json.Unmarshal(fields["storage"], &node.Storage)
		if err != nil {
			return
		}
	}

	if fields["raw_default"] != nil {
		node.RawDefault, err = UnmarshalNodeJSON(fields["raw_default"])
		if err != nil {
			return
		}
	}

	if fields["cooked_default"] != nil {
		node.CookedDefault, err = UnmarshalNodeJSON(fields["cooked_default"])
		if err != nil {
			return
		}
	}

	if fields["identity"] != nil {
		err = json.Unmarshal(fields["identity"], &node.Identity)
		if err != nil {
			return
		}
	}

	if fields["identitySequence"] != nil {
		err = json.Unmarshal(fields["identitySequence"], &node.IdentitySequence)
		if err != nil {
			return
		}
	}

	if fields["generated"] != nil {
		err = json.Unmarshal(fields["generated"], &node.Generated)
		if err != nil {
			return
		}
	}

	if fields["collClause"] != nil {
		err = json.Unmarshal(fields["collClause"], &node.CollClause)
		if err != nil {
			return
		}
	}

	if fields["collOid"] != nil {
		err = json.Unmarshal(fields["collOid"], &node.CollOid)
		if err != nil {
			return
		}
	}

	if fields["constraints"] != nil {
		node.Constraints, err = UnmarshalNodeArrayJSON(fields["constraints"])
		if err != nil {
			return
		}
	}

	if fields["fdwoptions"] != nil {
		node.Fdwoptions, err = UnmarshalNodeArrayJSON(fields["fdwoptions"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *IndexElem) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["expr"] != nil {
		node.Expr, err = UnmarshalNodeJSON(fields["expr"])
		if err != nil {
			return
		}
	}

	if fields["indexcolname"] != nil {
		err = json.Unmarshal(fields["indexcolname"], &node.Indexcolname)
		if err != nil {
			return
		}
	}

	if fields["collation"] != nil {
		node.Collation, err = UnmarshalNodeArrayJSON(fields["collation"])
		if err != nil {
			return
		}
	}

	if fields["opclass"] != nil {
		node.Opclass, err = UnmarshalNodeArrayJSON(fields["opclass"])
		if err != nil {
			return
		}
	}

	if fields["ordering"] != nil {
		err = json.Unmarshal(fields["ordering"], &node.Ordering)
		if err != nil {
			return
		}
	}

	if fields["nulls_ordering"] != nil {
		err = json.Unmarshal(fields["nulls_ordering"], &node.NullsOrdering)
		if err != nil {
			return
		}
	}

	return
}

func (node *Constraint) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["contype"] != nil {
		err = json.Unmarshal(fields["contype"], &node.Contype)
		if err != nil {
			return
		}
	}

	if fields["conname"] != nil {
		err = json.Unmarshal(fields["conname"], &node.Conname)
		if err != nil {
			return
		}
	}

	if fields["deferrable"] != nil {
		err = json.Unmarshal(fields["deferrable"], &node.Deferrable)
		if err != nil {
			return
		}
	}

	if fields["initdeferred"] != nil {
		err = json.Unmarshal(fields["initdeferred"], &node.Initdeferred)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	if fields["is_no_inherit"] != nil {
		err = json.Unmarshal(fields["is_no_inherit"], &node.IsNoInherit)
		if err != nil {
			return
		}
	}

	if fields["raw_expr"] != nil {
		node.RawExpr, err = UnmarshalNodeJSON(fields["raw_expr"])
		if err != nil {
			return
		}
	}

	if fields["cooked_expr"] != nil {
		err = json.Unmarshal(fields["cooked_expr"], &node.CookedExpr)
		if err != nil {
			return
		}
	}

	if fields["generated_when"] != nil {
		err = json.Unmarshal(fields["generated_when"], &node.GeneratedWhen)
		if err != nil {
			return
		}
	}

	if fields["keys"] != nil {
		node.Keys, err = UnmarshalNodeArrayJSON(fields["keys"])
		if err != nil {
			return
		}
	}

	if fields["including"] != nil {
		node.Including, err = UnmarshalNodeArrayJSON(fields["including"])
		if err != nil {
			return
		}
	}

	if fields["exclusions"] != nil {
		node.Exclusions, err = UnmarshalNodeArrayJSON(fields["exclusions"])
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		node.Options, err = UnmarshalNodeArrayJSON(fields["options"])
		if err != nil {
			return
		}
	}

	if fields["indexname"] != nil {
		err = json.Unmarshal(fields["indexname"], &node.Indexname)
		if err != nil {
			return
		}
	}

	if fields["indexspace"] != nil {
		err = json.Unmarshal(fields["indexspace"], &node.Indexspace)
		if err != nil {
			return
		}
	}

	if fields["reset_default_tblspc"] != nil {
		err = json.Unmarshal(fields["reset_default_tblspc"], &node.ResetDefaultTblspc)
		if err != nil {
			return
		}
	}

	if fields["access_method"] != nil {
		err = json.Unmarshal(fields["access_method"], &node.AccessMethod)
		if err != nil {
			return
		}
	}

	if fields["where_clause"] != nil {
		node.WhereClause, err = UnmarshalNodeJSON(fields["where_clause"])
		if err != nil {
			return
		}
	}

	if fields["pktable"] != nil {
		err = json.Unmarshal(fields["pktable"], &node.Pktable)
		if err != nil {
			return
		}
	}

	if fields["fk_attrs"] != nil {
		node.FkAttrs, err = UnmarshalNodeArrayJSON(fields["fk_attrs"])
		if err != nil {
			return
		}
	}

	if fields["pk_attrs"] != nil {
		node.PkAttrs, err = UnmarshalNodeArrayJSON(fields["pk_attrs"])
		if err != nil {
			return
		}
	}

	if fields["fk_matchtype"] != nil {
		err = json.Unmarshal(fields["fk_matchtype"], &node.FkMatchtype)
		if err != nil {
			return
		}
	}

	if fields["fk_upd_action"] != nil {
		err = json.Unmarshal(fields["fk_upd_action"], &node.FkUpdAction)
		if err != nil {
			return
		}
	}

	if fields["fk_del_action"] != nil {
		err = json.Unmarshal(fields["fk_del_action"], &node.FkDelAction)
		if err != nil {
			return
		}
	}

	if fields["old_conpfeqop"] != nil {
		node.OldConpfeqop, err = UnmarshalNodeArrayJSON(fields["old_conpfeqop"])
		if err != nil {
			return
		}
	}

	if fields["old_pktable_oid"] != nil {
		err = json.Unmarshal(fields["old_pktable_oid"], &node.OldPktableOid)
		if err != nil {
			return
		}
	}

	if fields["skip_validation"] != nil {
		err = json.Unmarshal(fields["skip_validation"], &node.SkipValidation)
		if err != nil {
			return
		}
	}

	if fields["initially_valid"] != nil {
		err = json.Unmarshal(fields["initially_valid"], &node.InitiallyValid)
		if err != nil {
			return
		}
	}

	return
}

func (node *DefElem) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["defnamespace"] != nil {
		err = json.Unmarshal(fields["defnamespace"], &node.Defnamespace)
		if err != nil {
			return
		}
	}

	if fields["defname"] != nil {
		err = json.Unmarshal(fields["defname"], &node.Defname)
		if err != nil {
			return
		}
	}

	if fields["arg"] != nil {
		node.Arg, err = UnmarshalNodeJSON(fields["arg"])
		if err != nil {
			return
		}
	}

	if fields["defaction"] != nil {
		err = json.Unmarshal(fields["defaction"], &node.Defaction)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *RangeTblEntry) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["rtekind"] != nil {
		err = json.Unmarshal(fields["rtekind"], &node.Rtekind)
		if err != nil {
			return
		}
	}

	if fields["relid"] != nil {
		err = json.Unmarshal(fields["relid"], &node.Relid)
		if err != nil {
			return
		}
	}

	if fields["relkind"] != nil {
		err = json.Unmarshal(fields["relkind"], &node.Relkind)
		if err != nil {
			return
		}
	}

	if fields["rellockmode"] != nil {
		err = json.Unmarshal(fields["rellockmode"], &node.Rellockmode)
		if err != nil {
			return
		}
	}

	if fields["tablesample"] != nil {
		err = json.Unmarshal(fields["tablesample"], &node.Tablesample)
		if err != nil {
			return
		}
	}

	if fields["subquery"] != nil {
		err = json.Unmarshal(fields["subquery"], &node.Subquery)
		if err != nil {
			return
		}
	}

	if fields["security_barrier"] != nil {
		err = json.Unmarshal(fields["security_barrier"], &node.SecurityBarrier)
		if err != nil {
			return
		}
	}

	if fields["jointype"] != nil {
		err = json.Unmarshal(fields["jointype"], &node.Jointype)
		if err != nil {
			return
		}
	}

	if fields["joinaliasvars"] != nil {
		node.Joinaliasvars, err = UnmarshalNodeArrayJSON(fields["joinaliasvars"])
		if err != nil {
			return
		}
	}

	if fields["functions"] != nil {
		node.Functions, err = UnmarshalNodeArrayJSON(fields["functions"])
		if err != nil {
			return
		}
	}

	if fields["funcordinality"] != nil {
		err = json.Unmarshal(fields["funcordinality"], &node.Funcordinality)
		if err != nil {
			return
		}
	}

	if fields["tablefunc"] != nil {
		err = json.Unmarshal(fields["tablefunc"], &node.Tablefunc)
		if err != nil {
			return
		}
	}

	if fields["values_lists"] != nil {
		node.ValuesLists, err = UnmarshalNodeArrayJSON(fields["values_lists"])
		if err != nil {
			return
		}
	}

	if fields["ctename"] != nil {
		err = json.Unmarshal(fields["ctename"], &node.Ctename)
		if err != nil {
			return
		}
	}

	if fields["ctelevelsup"] != nil {
		err = json.Unmarshal(fields["ctelevelsup"], &node.Ctelevelsup)
		if err != nil {
			return
		}
	}

	if fields["self_reference"] != nil {
		err = json.Unmarshal(fields["self_reference"], &node.SelfReference)
		if err != nil {
			return
		}
	}

	if fields["coltypes"] != nil {
		node.Coltypes, err = UnmarshalNodeArrayJSON(fields["coltypes"])
		if err != nil {
			return
		}
	}

	if fields["coltypmods"] != nil {
		node.Coltypmods, err = UnmarshalNodeArrayJSON(fields["coltypmods"])
		if err != nil {
			return
		}
	}

	if fields["colcollations"] != nil {
		node.Colcollations, err = UnmarshalNodeArrayJSON(fields["colcollations"])
		if err != nil {
			return
		}
	}

	if fields["enrname"] != nil {
		err = json.Unmarshal(fields["enrname"], &node.Enrname)
		if err != nil {
			return
		}
	}

	if fields["enrtuples"] != nil {
		err = json.Unmarshal(fields["enrtuples"], &node.Enrtuples)
		if err != nil {
			return
		}
	}

	if fields["alias"] != nil {
		err = json.Unmarshal(fields["alias"], &node.Alias)
		if err != nil {
			return
		}
	}

	if fields["eref"] != nil {
		err = json.Unmarshal(fields["eref"], &node.Eref)
		if err != nil {
			return
		}
	}

	if fields["lateral"] != nil {
		err = json.Unmarshal(fields["lateral"], &node.Lateral)
		if err != nil {
			return
		}
	}

	if fields["inh"] != nil {
		err = json.Unmarshal(fields["inh"], &node.Inh)
		if err != nil {
			return
		}
	}

	if fields["inFromCl"] != nil {
		err = json.Unmarshal(fields["inFromCl"], &node.InFromCl)
		if err != nil {
			return
		}
	}

	if fields["requiredPerms"] != nil {
		err = json.Unmarshal(fields["requiredPerms"], &node.RequiredPerms)
		if err != nil {
			return
		}
	}

	if fields["checkAsUser"] != nil {
		err = json.Unmarshal(fields["checkAsUser"], &node.CheckAsUser)
		if err != nil {
			return
		}
	}

	if fields["securityQuals"] != nil {
		node.SecurityQuals, err = UnmarshalNodeArrayJSON(fields["securityQuals"])
		if err != nil {
			return
		}
	}

	return
}

func (node *RangeTblFunction) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["funcexpr"] != nil {
		node.Funcexpr, err = UnmarshalNodeJSON(fields["funcexpr"])
		if err != nil {
			return
		}
	}

	if fields["funccolcount"] != nil {
		err = json.Unmarshal(fields["funccolcount"], &node.Funccolcount)
		if err != nil {
			return
		}
	}

	if fields["funccolnames"] != nil {
		node.Funccolnames, err = UnmarshalNodeArrayJSON(fields["funccolnames"])
		if err != nil {
			return
		}
	}

	if fields["funccoltypes"] != nil {
		node.Funccoltypes, err = UnmarshalNodeArrayJSON(fields["funccoltypes"])
		if err != nil {
			return
		}
	}

	if fields["funccoltypmods"] != nil {
		node.Funccoltypmods, err = UnmarshalNodeArrayJSON(fields["funccoltypmods"])
		if err != nil {
			return
		}
	}

	if fields["funccolcollations"] != nil {
		node.Funccolcollations, err = UnmarshalNodeArrayJSON(fields["funccolcollations"])
		if err != nil {
			return
		}
	}

	return
}

func (node *TableSampleClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["tsmhandler"] != nil {
		err = json.Unmarshal(fields["tsmhandler"], &node.Tsmhandler)
		if err != nil {
			return
		}
	}

	if fields["args"] != nil {
		node.Args, err = UnmarshalNodeArrayJSON(fields["args"])
		if err != nil {
			return
		}
	}

	if fields["repeatable"] != nil {
		node.Repeatable, err = UnmarshalNodeJSON(fields["repeatable"])
		if err != nil {
			return
		}
	}

	return
}

func (node *WithCheckOption) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["relname"] != nil {
		err = json.Unmarshal(fields["relname"], &node.Relname)
		if err != nil {
			return
		}
	}

	if fields["polname"] != nil {
		err = json.Unmarshal(fields["polname"], &node.Polname)
		if err != nil {
			return
		}
	}

	if fields["qual"] != nil {
		node.Qual, err = UnmarshalNodeJSON(fields["qual"])
		if err != nil {
			return
		}
	}

	if fields["cascaded"] != nil {
		err = json.Unmarshal(fields["cascaded"], &node.Cascaded)
		if err != nil {
			return
		}
	}

	return
}

func (node *SortGroupClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["tleSortGroupRef"] != nil {
		err = json.Unmarshal(fields["tleSortGroupRef"], &node.TleSortGroupRef)
		if err != nil {
			return
		}
	}

	if fields["eqop"] != nil {
		err = json.Unmarshal(fields["eqop"], &node.Eqop)
		if err != nil {
			return
		}
	}

	if fields["sortop"] != nil {
		err = json.Unmarshal(fields["sortop"], &node.Sortop)
		if err != nil {
			return
		}
	}

	if fields["nulls_first"] != nil {
		err = json.Unmarshal(fields["nulls_first"], &node.NullsFirst)
		if err != nil {
			return
		}
	}

	if fields["hashable"] != nil {
		err = json.Unmarshal(fields["hashable"], &node.Hashable)
		if err != nil {
			return
		}
	}

	return
}

func (node *GroupingSet) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["content"] != nil {
		node.Content, err = UnmarshalNodeArrayJSON(fields["content"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *WindowClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["refname"] != nil {
		err = json.Unmarshal(fields["refname"], &node.Refname)
		if err != nil {
			return
		}
	}

	if fields["partitionClause"] != nil {
		node.PartitionClause, err = UnmarshalNodeArrayJSON(fields["partitionClause"])
		if err != nil {
			return
		}
	}

	if fields["orderClause"] != nil {
		node.OrderClause, err = UnmarshalNodeArrayJSON(fields["orderClause"])
		if err != nil {
			return
		}
	}

	if fields["frameOptions"] != nil {
		err = json.Unmarshal(fields["frameOptions"], &node.FrameOptions)
		if err != nil {
			return
		}
	}

	if fields["startOffset"] != nil {
		node.StartOffset, err = UnmarshalNodeJSON(fields["startOffset"])
		if err != nil {
			return
		}
	}

	if fields["endOffset"] != nil {
		node.EndOffset, err = UnmarshalNodeJSON(fields["endOffset"])
		if err != nil {
			return
		}
	}

	if fields["startInRangeFunc"] != nil {
		err = json.Unmarshal(fields["startInRangeFunc"], &node.StartInRangeFunc)
		if err != nil {
			return
		}
	}

	if fields["endInRangeFunc"] != nil {
		err = json.Unmarshal(fields["endInRangeFunc"], &node.EndInRangeFunc)
		if err != nil {
			return
		}
	}

	if fields["inRangeColl"] != nil {
		err = json.Unmarshal(fields["inRangeColl"], &node.InRangeColl)
		if err != nil {
			return
		}
	}

	if fields["inRangeAsc"] != nil {
		err = json.Unmarshal(fields["inRangeAsc"], &node.InRangeAsc)
		if err != nil {
			return
		}
	}

	if fields["inRangeNullsFirst"] != nil {
		err = json.Unmarshal(fields["inRangeNullsFirst"], &node.InRangeNullsFirst)
		if err != nil {
			return
		}
	}

	if fields["winref"] != nil {
		err = json.Unmarshal(fields["winref"], &node.Winref)
		if err != nil {
			return
		}
	}

	if fields["copiedOrder"] != nil {
		err = json.Unmarshal(fields["copiedOrder"], &node.CopiedOrder)
		if err != nil {
			return
		}
	}

	return
}

func (node *ObjectWithArgs) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["objname"] != nil {
		node.Objname, err = UnmarshalNodeArrayJSON(fields["objname"])
		if err != nil {
			return
		}
	}

	if fields["objargs"] != nil {
		node.Objargs, err = UnmarshalNodeArrayJSON(fields["objargs"])
		if err != nil {
			return
		}
	}

	if fields["args_unspecified"] != nil {
		err = json.Unmarshal(fields["args_unspecified"], &node.ArgsUnspecified)
		if err != nil {
			return
		}
	}

	return
}

func (node *AccessPriv) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["priv_name"] != nil {
		err = json.Unmarshal(fields["priv_name"], &node.PrivName)
		if err != nil {
			return
		}
	}

	if fields["cols"] != nil {
		node.Cols, err = UnmarshalNodeArrayJSON(fields["cols"])
		if err != nil {
			return
		}
	}

	return
}

func (node *CreateOpClassItem) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["itemtype"] != nil {
		err = json.Unmarshal(fields["itemtype"], &node.Itemtype)
		if err != nil {
			return
		}
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["number"] != nil {
		err = json.Unmarshal(fields["number"], &node.Number)
		if err != nil {
			return
		}
	}

	if fields["order_family"] != nil {
		node.OrderFamily, err = UnmarshalNodeArrayJSON(fields["order_family"])
		if err != nil {
			return
		}
	}

	if fields["class_args"] != nil {
		node.ClassArgs, err = UnmarshalNodeArrayJSON(fields["class_args"])
		if err != nil {
			return
		}
	}

	if fields["storedtype"] != nil {
		err = json.Unmarshal(fields["storedtype"], &node.Storedtype)
		if err != nil {
			return
		}
	}

	return
}

func (node *TableLikeClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["options"] != nil {
		err = json.Unmarshal(fields["options"], &node.Options)
		if err != nil {
			return
		}
	}

	return
}

func (node *FunctionParameter) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["argType"] != nil {
		err = json.Unmarshal(fields["argType"], &node.ArgType)
		if err != nil {
			return
		}
	}

	if fields["mode"] != nil {
		err = json.Unmarshal(fields["mode"], &node.Mode)
		if err != nil {
			return
		}
	}

	if fields["defexpr"] != nil {
		node.Defexpr, err = UnmarshalNodeJSON(fields["defexpr"])
		if err != nil {
			return
		}
	}

	return
}

func (node *LockingClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["lockedRels"] != nil {
		node.LockedRels, err = UnmarshalNodeArrayJSON(fields["lockedRels"])
		if err != nil {
			return
		}
	}

	if fields["strength"] != nil {
		err = json.Unmarshal(fields["strength"], &node.Strength)
		if err != nil {
			return
		}
	}

	if fields["waitPolicy"] != nil {
		err = json.Unmarshal(fields["waitPolicy"], &node.WaitPolicy)
		if err != nil {
			return
		}
	}

	return
}

func (node *RowMarkClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["rti"] != nil {
		err = json.Unmarshal(fields["rti"], &node.Rti)
		if err != nil {
			return
		}
	}

	if fields["strength"] != nil {
		err = json.Unmarshal(fields["strength"], &node.Strength)
		if err != nil {
			return
		}
	}

	if fields["waitPolicy"] != nil {
		err = json.Unmarshal(fields["waitPolicy"], &node.WaitPolicy)
		if err != nil {
			return
		}
	}

	if fields["pushedDown"] != nil {
		err = json.Unmarshal(fields["pushedDown"], &node.PushedDown)
		if err != nil {
			return
		}
	}

	return
}

func (node *XmlSerialize) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["xmloption"] != nil {
		err = json.Unmarshal(fields["xmloption"], &node.Xmloption)
		if err != nil {
			return
		}
	}

	if fields["expr"] != nil {
		node.Expr, err = UnmarshalNodeJSON(fields["expr"])
		if err != nil {
			return
		}
	}

	if fields["typeName"] != nil {
		err = json.Unmarshal(fields["typeName"], &node.TypeName)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *WithClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["ctes"] != nil {
		node.Ctes, err = UnmarshalNodeArrayJSON(fields["ctes"])
		if err != nil {
			return
		}
	}

	if fields["recursive"] != nil {
		err = json.Unmarshal(fields["recursive"], &node.Recursive)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *InferClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["indexElems"] != nil {
		node.IndexElems, err = UnmarshalNodeArrayJSON(fields["indexElems"])
		if err != nil {
			return
		}
	}

	if fields["whereClause"] != nil {
		node.WhereClause, err = UnmarshalNodeJSON(fields["whereClause"])
		if err != nil {
			return
		}
	}

	if fields["conname"] != nil {
		err = json.Unmarshal(fields["conname"], &node.Conname)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *OnConflictClause) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["action"] != nil {
		err = json.Unmarshal(fields["action"], &node.Action)
		if err != nil {
			return
		}
	}

	if fields["infer"] != nil {
		err = json.Unmarshal(fields["infer"], &node.Infer)
		if err != nil {
			return
		}
	}

	if fields["targetList"] != nil {
		node.TargetList, err = UnmarshalNodeArrayJSON(fields["targetList"])
		if err != nil {
			return
		}
	}

	if fields["whereClause"] != nil {
		node.WhereClause, err = UnmarshalNodeJSON(fields["whereClause"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *CommonTableExpr) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["ctename"] != nil {
		err = json.Unmarshal(fields["ctename"], &node.Ctename)
		if err != nil {
			return
		}
	}

	if fields["aliascolnames"] != nil {
		node.Aliascolnames, err = UnmarshalNodeArrayJSON(fields["aliascolnames"])
		if err != nil {
			return
		}
	}

	if fields["ctematerialized"] != nil {
		err = json.Unmarshal(fields["ctematerialized"], &node.Ctematerialized)
		if err != nil {
			return
		}
	}

	if fields["ctequery"] != nil {
		node.Ctequery, err = UnmarshalNodeJSON(fields["ctequery"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	if fields["cterecursive"] != nil {
		err = json.Unmarshal(fields["cterecursive"], &node.Cterecursive)
		if err != nil {
			return
		}
	}

	if fields["cterefcount"] != nil {
		err = json.Unmarshal(fields["cterefcount"], &node.Cterefcount)
		if err != nil {
			return
		}
	}

	if fields["ctecolnames"] != nil {
		node.Ctecolnames, err = UnmarshalNodeArrayJSON(fields["ctecolnames"])
		if err != nil {
			return
		}
	}

	if fields["ctecoltypes"] != nil {
		node.Ctecoltypes, err = UnmarshalNodeArrayJSON(fields["ctecoltypes"])
		if err != nil {
			return
		}
	}

	if fields["ctecoltypmods"] != nil {
		node.Ctecoltypmods, err = UnmarshalNodeArrayJSON(fields["ctecoltypmods"])
		if err != nil {
			return
		}
	}

	if fields["ctecolcollations"] != nil {
		node.Ctecolcollations, err = UnmarshalNodeArrayJSON(fields["ctecolcollations"])
		if err != nil {
			return
		}
	}

	return
}

func (node *RoleSpec) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["roletype"] != nil {
		err = json.Unmarshal(fields["roletype"], &node.Roletype)
		if err != nil {
			return
		}
	}

	if fields["rolename"] != nil {
		err = json.Unmarshal(fields["rolename"], &node.Rolename)
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *TriggerTransition) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["isNew"] != nil {
		err = json.Unmarshal(fields["isNew"], &node.IsNew)
		if err != nil {
			return
		}
	}

	if fields["isTable"] != nil {
		err = json.Unmarshal(fields["isTable"], &node.IsTable)
		if err != nil {
			return
		}
	}

	return
}

func (node *PartitionElem) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["expr"] != nil {
		node.Expr, err = UnmarshalNodeJSON(fields["expr"])
		if err != nil {
			return
		}
	}

	if fields["collation"] != nil {
		node.Collation, err = UnmarshalNodeArrayJSON(fields["collation"])
		if err != nil {
			return
		}
	}

	if fields["opclass"] != nil {
		node.Opclass, err = UnmarshalNodeArrayJSON(fields["opclass"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *PartitionSpec) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["strategy"] != nil {
		err = json.Unmarshal(fields["strategy"], &node.Strategy)
		if err != nil {
			return
		}
	}

	if fields["partParams"] != nil {
		node.PartParams, err = UnmarshalNodeArrayJSON(fields["partParams"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *PartitionBoundSpec) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["strategy"] != nil {
		err = json.Unmarshal(fields["strategy"], &node.Strategy)
		if err != nil {
			return
		}
	}

	if fields["is_default"] != nil {
		err = json.Unmarshal(fields["is_default"], &node.IsDefault)
		if err != nil {
			return
		}
	}

	if fields["modulus"] != nil {
		err = json.Unmarshal(fields["modulus"], &node.Modulus)
		if err != nil {
			return
		}
	}

	if fields["remainder"] != nil {
		err = json.Unmarshal(fields["remainder"], &node.Remainder)
		if err != nil {
			return
		}
	}

	if fields["listdatums"] != nil {
		node.Listdatums, err = UnmarshalNodeArrayJSON(fields["listdatums"])
		if err != nil {
			return
		}
	}

	if fields["lowerdatums"] != nil {
		node.Lowerdatums, err = UnmarshalNodeArrayJSON(fields["lowerdatums"])
		if err != nil {
			return
		}
	}

	if fields["upperdatums"] != nil {
		node.Upperdatums, err = UnmarshalNodeArrayJSON(fields["upperdatums"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *PartitionRangeDatum) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["kind"] != nil {
		err = json.Unmarshal(fields["kind"], &node.Kind)
		if err != nil {
			return
		}
	}

	if fields["value"] != nil {
		node.Value, err = UnmarshalNodeJSON(fields["value"])
		if err != nil {
			return
		}
	}

	if fields["location"] != nil {
		err = json.Unmarshal(fields["location"], &node.Location)
		if err != nil {
			return
		}
	}

	return
}

func (node *PartitionCmd) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["name"] != nil {
		err = json.Unmarshal(fields["name"], &node.Name)
		if err != nil {
			return
		}
	}

	if fields["bound"] != nil {
		err = json.Unmarshal(fields["bound"], &node.Bound)
		if err != nil {
			return
		}
	}

	return
}

func (node *VacuumRelation) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["relation"] != nil {
		err = json.Unmarshal(fields["relation"], &node.Relation)
		if err != nil {
			return
		}
	}

	if fields["oid"] != nil {
		err = json.Unmarshal(fields["oid"], &node.Oid)
		if err != nil {
			return
		}
	}

	if fields["va_cols"] != nil {
		node.VaCols, err = UnmarshalNodeArrayJSON(fields["va_cols"])
		if err != nil {
			return
		}
	}

	return
}

func (node *InlineCodeBlock) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["source_text"] != nil {
		err = json.Unmarshal(fields["source_text"], &node.SourceText)
		if err != nil {
			return
		}
	}

	if fields["langOid"] != nil {
		err = json.Unmarshal(fields["langOid"], &node.LangOid)
		if err != nil {
			return
		}
	}

	if fields["langIsTrusted"] != nil {
		err = json.Unmarshal(fields["langIsTrusted"], &node.LangIsTrusted)
		if err != nil {
			return
		}
	}

	if fields["atomic"] != nil {
		err = json.Unmarshal(fields["atomic"], &node.Atomic)
		if err != nil {
			return
		}
	}

	return
}

func (node *CallContext) UnmarshalJSON(input []byte) (err error) {
	var fields map[string]json.RawMessage

	err = json.Unmarshal(input, &fields)
	if err != nil {
		return
	}

	if fields["atomic"] != nil {
		err = json.Unmarshal(fields["atomic"], &node.Atomic)
		if err != nil {
			return
		}
	}

	return
}

func (node *Root) UnmarshalJSON(input []byte) (err error) {
	node.Node, err = UnmarshalNodeJSON(input)
	return
}

func (e *OverridingKind) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = OverridingKind(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewOverridingKind(s)

	return nil
}

func (e *QuerySource) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = QuerySource(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewQuerySource(s)

	return nil
}

func (e *SortByDir) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = SortByDir(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewSortByDir(s)

	return nil
}

func (e *SortByNulls) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = SortByNulls(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewSortByNulls(s)

	return nil
}

func (e *A_Expr_Kind) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = A_Expr_Kind(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewA_Expr_Kind(s)

	return nil
}

func (e *RoleSpecType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = RoleSpecType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewRoleSpecType(s)

	return nil
}

func (e *TableLikeOption) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = TableLikeOption(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewTableLikeOption(s)

	return nil
}

func (e *DefElemAction) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = DefElemAction(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewDefElemAction(s)

	return nil
}

func (e *PartitionRangeDatumKind) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = PartitionRangeDatumKind(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewPartitionRangeDatumKind(s)

	return nil
}

func (e *RTEKind) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = RTEKind(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewRTEKind(s)

	return nil
}

func (e *WCOKind) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = WCOKind(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewWCOKind(s)

	return nil
}

func (e *GroupingSetKind) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = GroupingSetKind(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewGroupingSetKind(s)

	return nil
}

func (e *CTEMaterialize) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = CTEMaterialize(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewCTEMaterialize(s)

	return nil
}

func (e *SetOperation) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = SetOperation(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewSetOperation(s)

	return nil
}

func (e *ObjectType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = ObjectType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewObjectType(s)

	return nil
}

func (e *DropBehavior) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = DropBehavior(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewDropBehavior(s)

	return nil
}

func (e *AlterTableType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = AlterTableType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewAlterTableType(s)

	return nil
}

func (e *GrantTargetType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = GrantTargetType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewGrantTargetType(s)

	return nil
}

func (e *VariableSetKind) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = VariableSetKind(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewVariableSetKind(s)

	return nil
}

func (e *ConstrType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = ConstrType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewConstrType(s)

	return nil
}

func (e *ImportForeignSchemaType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = ImportForeignSchemaType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewImportForeignSchemaType(s)

	return nil
}

func (e *RoleStmtType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = RoleStmtType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewRoleStmtType(s)

	return nil
}

func (e *FetchDirection) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = FetchDirection(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewFetchDirection(s)

	return nil
}

func (e *FunctionParameterMode) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = FunctionParameterMode(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewFunctionParameterMode(s)

	return nil
}

func (e *TransactionStmtKind) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = TransactionStmtKind(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewTransactionStmtKind(s)

	return nil
}

func (e *ViewCheckOption) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = ViewCheckOption(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewViewCheckOption(s)

	return nil
}

func (e *ClusterOption) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = ClusterOption(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewClusterOption(s)

	return nil
}

func (e *DiscardMode) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = DiscardMode(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewDiscardMode(s)

	return nil
}

func (e *ReindexObjectType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = ReindexObjectType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewReindexObjectType(s)

	return nil
}

func (e *AlterTSConfigType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = AlterTSConfigType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewAlterTSConfigType(s)

	return nil
}

func (e *AlterSubscriptionType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = AlterSubscriptionType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewAlterSubscriptionType(s)

	return nil
}

func (e *OnCommitAction) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = OnCommitAction(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewOnCommitAction(s)

	return nil
}

func (e *ParamKind) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = ParamKind(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewParamKind(s)

	return nil
}

func (e *CoercionContext) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = CoercionContext(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewCoercionContext(s)

	return nil
}

func (e *CoercionForm) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = CoercionForm(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewCoercionForm(s)

	return nil
}

func (e *BoolExprType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = BoolExprType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewBoolExprType(s)

	return nil
}

func (e *SubLinkType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = SubLinkType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewSubLinkType(s)

	return nil
}

func (e *RowCompareType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = RowCompareType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewRowCompareType(s)

	return nil
}

func (e *MinMaxOp) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = MinMaxOp(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewMinMaxOp(s)

	return nil
}

func (e *SQLValueFunctionOp) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = SQLValueFunctionOp(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewSQLValueFunctionOp(s)

	return nil
}

func (e *XmlExprOp) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = XmlExprOp(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewXmlExprOp(s)

	return nil
}

func (e *XmlOptionType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = XmlOptionType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewXmlOptionType(s)

	return nil
}

func (e *NullTestType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = NullTestType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewNullTestType(s)

	return nil
}

func (e *BoolTestType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = BoolTestType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewBoolTestType(s)

	return nil
}

func (e *CmdType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = CmdType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewCmdType(s)

	return nil
}

func (e *JoinType) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = JoinType(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewJoinType(s)

	return nil
}

func (e *AggStrategy) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = AggStrategy(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewAggStrategy(s)

	return nil
}

func (e *AggSplit) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = AggSplit(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewAggSplit(s)

	return nil
}

func (e *SetOpCmd) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = SetOpCmd(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewSetOpCmd(s)

	return nil
}

func (e *SetOpStrategy) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = SetOpStrategy(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewSetOpStrategy(s)

	return nil
}

func (e *OnConflictAction) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = OnConflictAction(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewOnConflictAction(s)

	return nil
}

func (e *LockClauseStrength) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = LockClauseStrength(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewLockClauseStrength(s)

	return nil
}

func (e *LockWaitPolicy) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = LockWaitPolicy(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewLockWaitPolicy(s)

	return nil
}

func (e *LockTupleMode) UnmarshalJSON(input []byte) (err error) {
	var i int32
	err = json.Unmarshal(input, &i)
	if err == nil {
		*e = LockTupleMode(i)
		return nil
	}
	var s string
	err = json.Unmarshal(input, &s)
	if err != nil {
		return err
	}
	*e = NewLockTupleMode(s)

	return nil
}
