// Code generated by foji 0.3, template: foji/node_print.go.tpl; DO NOT EDIT.

package pgtree

import (
	"errors"
	"fmt"
	"reflect"
	"strings"
	"unsafe"
)

// Thanks to zerolog for this utility
func isNilValue(i interface{}) bool {
	return (*[2]uintptr)(unsafe.Pointer(&i))[1] == 0
}

func (p *printer) printNode(node Node) (result string) {
	if node == nil || isNilValue(node) {
		return
	}
	p.level += 1
	defer func() {
		if p.debug {
			pad := p.pad(p.level - 1)
			t := reflect.TypeOf(node)
			name := t.Name()
			if t.Kind() == reflect.Ptr {
				name = t.Elem().Name()
			}
			p.debugOutput += fmt.Sprintln(pad + name + " = `" + strings.ReplaceAll(result, "\n", " \\n ") + "`")
		}
		p.level -= 1
	}()
	switch n := node.(type) {
	case nil:
	case *Integer:
		if n == nil {
			return
		}
		return p.printInteger(n)
	case *Float:
		if n == nil {
			return
		}
		return p.printFloat(n)
	case *String:
		if n == nil {
			return
		}
		return p.printString(n)
	case *BitString:
		if n == nil {
			return
		}
		return p.printBitString(n)
	case *Null:
		if n == nil {
			return
		}
		return p.printNull(n)
	case *List:
		if n == nil {
			return
		}
		return p.printList(n)
	case *OidList:
		if n == nil {
			return
		}
		return p.printOidList(n)
	case *IntList:
		if n == nil {
			return
		}
		return p.printIntList(n)
	case *Alias:
		if n == nil {
			return
		}
		return p.printAlias(n)
	case *RangeVar:
		if n == nil {
			return
		}
		return p.printRangeVar(n)
	case *TableFunc:
		if n == nil {
			return
		}
		return p.printTableFunc(n)
	case *Expr:
		if n == nil {
			return
		}
		return p.printExpr(n)
	case *Var:
		if n == nil {
			return
		}
		return p.printVar(n)
	case *Param:
		if n == nil {
			return
		}
		return p.printParam(n)
	case *Aggref:
		if n == nil {
			return
		}
		return p.printAggref(n)
	case *GroupingFunc:
		if n == nil {
			return
		}
		return p.printGroupingFunc(n)
	case *WindowFunc:
		if n == nil {
			return
		}
		return p.printWindowFunc(n)
	case *SubscriptingRef:
		if n == nil {
			return
		}
		return p.printSubscriptingRef(n)
	case *FuncExpr:
		if n == nil {
			return
		}
		return p.printFuncExpr(n)
	case *NamedArgExpr:
		if n == nil {
			return
		}
		return p.printNamedArgExpr(n)
	case *OpExpr:
		if n == nil {
			return
		}
		return p.printOpExpr(n)
	case *DistinctExpr:
		if n == nil {
			return
		}
		return p.printDistinctExpr(n)
	case *NullIfExpr:
		if n == nil {
			return
		}
		return p.printNullIfExpr(n)
	case *ScalarArrayOpExpr:
		if n == nil {
			return
		}
		return p.printScalarArrayOpExpr(n)
	case *BoolExpr:
		if n == nil {
			return
		}
		return p.printBoolExpr(n)
	case *SubLink:
		if n == nil {
			return
		}
		return p.printSubLink(n)
	case *SubPlan:
		if n == nil {
			return
		}
		return p.printSubPlan(n)
	case *AlternativeSubPlan:
		if n == nil {
			return
		}
		return p.printAlternativeSubPlan(n)
	case *FieldSelect:
		if n == nil {
			return
		}
		return p.printFieldSelect(n)
	case *FieldStore:
		if n == nil {
			return
		}
		return p.printFieldStore(n)
	case *RelabelType:
		if n == nil {
			return
		}
		return p.printRelabelType(n)
	case *CoerceViaIo:
		if n == nil {
			return
		}
		return p.printCoerceViaIo(n)
	case *ArrayCoerceExpr:
		if n == nil {
			return
		}
		return p.printArrayCoerceExpr(n)
	case *ConvertRowtypeExpr:
		if n == nil {
			return
		}
		return p.printConvertRowtypeExpr(n)
	case *CollateExpr:
		if n == nil {
			return
		}
		return p.printCollateExpr(n)
	case *CaseExpr:
		if n == nil {
			return
		}
		return p.printCaseExpr(n)
	case *CaseWhen:
		if n == nil {
			return
		}
		return p.printCaseWhen(n)
	case *CaseTestExpr:
		if n == nil {
			return
		}
		return p.printCaseTestExpr(n)
	case *ArrayExpr:
		if n == nil {
			return
		}
		return p.printArrayExpr(n)
	case *RowExpr:
		if n == nil {
			return
		}
		return p.printRowExpr(n)
	case *RowCompareExpr:
		if n == nil {
			return
		}
		return p.printRowCompareExpr(n)
	case *CoalesceExpr:
		if n == nil {
			return
		}
		return p.printCoalesceExpr(n)
	case *MinMaxExpr:
		if n == nil {
			return
		}
		return p.printMinMaxExpr(n)
	case *SqlvalueFunction:
		if n == nil {
			return
		}
		return p.printSqlvalueFunction(n)
	case *XmlExpr:
		if n == nil {
			return
		}
		return p.printXmlExpr(n)
	case *NullTest:
		if n == nil {
			return
		}
		return p.printNullTest(n)
	case *BooleanTest:
		if n == nil {
			return
		}
		return p.printBooleanTest(n)
	case *CoerceToDomain:
		if n == nil {
			return
		}
		return p.printCoerceToDomain(n)
	case *CoerceToDomainValue:
		if n == nil {
			return
		}
		return p.printCoerceToDomainValue(n)
	case *SetToDefault:
		if n == nil {
			return
		}
		return p.printSetToDefault(n)
	case *CurrentOfExpr:
		if n == nil {
			return
		}
		return p.printCurrentOfExpr(n)
	case *NextValueExpr:
		if n == nil {
			return
		}
		return p.printNextValueExpr(n)
	case *InferenceElem:
		if n == nil {
			return
		}
		return p.printInferenceElem(n)
	case *TargetEntry:
		if n == nil {
			return
		}
		return p.printTargetEntry(n)
	case *RangeTblRef:
		if n == nil {
			return
		}
		return p.printRangeTblRef(n)
	case *JoinExpr:
		if n == nil {
			return
		}
		return p.printJoinExpr(n)
	case *FromExpr:
		if n == nil {
			return
		}
		return p.printFromExpr(n)
	case *OnConflictExpr:
		if n == nil {
			return
		}
		return p.printOnConflictExpr(n)
	case *IntoClause:
		if n == nil {
			return
		}
		return p.printIntoClause(n)
	case *RawStmt:
		if n == nil {
			return
		}
		return p.printRawStmt(n)
	case *Query:
		if n == nil {
			return
		}
		return p.printQuery(n)
	case *InsertStmt:
		if n == nil {
			return
		}
		return p.printInsertStmt(n)
	case *DeleteStmt:
		if n == nil {
			return
		}
		return p.printDeleteStmt(n)
	case *UpdateStmt:
		if n == nil {
			return
		}
		return p.printUpdateStmt(n)
	case *SelectStmt:
		if n == nil {
			return
		}
		return p.printSelectStmt(n)
	case *AlterTableStmt:
		if n == nil {
			return
		}
		return p.printAlterTableStmt(n)
	case *AlterTableCmd:
		if n == nil {
			return
		}
		return p.printAlterTableCmd(n)
	case *AlterDomainStmt:
		if n == nil {
			return
		}
		return p.printAlterDomainStmt(n)
	case *SetOperationStmt:
		if n == nil {
			return
		}
		return p.printSetOperationStmt(n)
	case *GrantStmt:
		if n == nil {
			return
		}
		return p.printGrantStmt(n)
	case *GrantRoleStmt:
		if n == nil {
			return
		}
		return p.printGrantRoleStmt(n)
	case *AlterDefaultPrivilegesStmt:
		if n == nil {
			return
		}
		return p.printAlterDefaultPrivilegesStmt(n)
	case *ClosePortalStmt:
		if n == nil {
			return
		}
		return p.printClosePortalStmt(n)
	case *ClusterStmt:
		if n == nil {
			return
		}
		return p.printClusterStmt(n)
	case *CopyStmt:
		if n == nil {
			return
		}
		return p.printCopyStmt(n)
	case *CreateStmt:
		if n == nil {
			return
		}
		return p.printCreateStmt(n)
	case *DefineStmt:
		if n == nil {
			return
		}
		return p.printDefineStmt(n)
	case *DropStmt:
		if n == nil {
			return
		}
		return p.printDropStmt(n)
	case *TruncateStmt:
		if n == nil {
			return
		}
		return p.printTruncateStmt(n)
	case *CommentStmt:
		if n == nil {
			return
		}
		return p.printCommentStmt(n)
	case *FetchStmt:
		if n == nil {
			return
		}
		return p.printFetchStmt(n)
	case *IndexStmt:
		if n == nil {
			return
		}
		return p.printIndexStmt(n)
	case *CreateFunctionStmt:
		if n == nil {
			return
		}
		return p.printCreateFunctionStmt(n)
	case *AlterFunctionStmt:
		if n == nil {
			return
		}
		return p.printAlterFunctionStmt(n)
	case *DoStmt:
		if n == nil {
			return
		}
		return p.printDoStmt(n)
	case *RenameStmt:
		if n == nil {
			return
		}
		return p.printRenameStmt(n)
	case *RuleStmt:
		if n == nil {
			return
		}
		return p.printRuleStmt(n)
	case *NotifyStmt:
		if n == nil {
			return
		}
		return p.printNotifyStmt(n)
	case *ListenStmt:
		if n == nil {
			return
		}
		return p.printListenStmt(n)
	case *UnlistenStmt:
		if n == nil {
			return
		}
		return p.printUnlistenStmt(n)
	case *TransactionStmt:
		if n == nil {
			return
		}
		return p.printTransactionStmt(n)
	case *ViewStmt:
		if n == nil {
			return
		}
		return p.printViewStmt(n)
	case *LoadStmt:
		if n == nil {
			return
		}
		return p.printLoadStmt(n)
	case *CreateDomainStmt:
		if n == nil {
			return
		}
		return p.printCreateDomainStmt(n)
	case *CreatedbStmt:
		if n == nil {
			return
		}
		return p.printCreatedbStmt(n)
	case *DropdbStmt:
		if n == nil {
			return
		}
		return p.printDropdbStmt(n)
	case *VacuumStmt:
		if n == nil {
			return
		}
		return p.printVacuumStmt(n)
	case *ExplainStmt:
		if n == nil {
			return
		}
		return p.printExplainStmt(n)
	case *CreateTableAsStmt:
		if n == nil {
			return
		}
		return p.printCreateTableAsStmt(n)
	case *CreateSeqStmt:
		if n == nil {
			return
		}
		return p.printCreateSeqStmt(n)
	case *AlterSeqStmt:
		if n == nil {
			return
		}
		return p.printAlterSeqStmt(n)
	case *VariableSetStmt:
		if n == nil {
			return
		}
		return p.printVariableSetStmt(n)
	case *VariableShowStmt:
		if n == nil {
			return
		}
		return p.printVariableShowStmt(n)
	case *DiscardStmt:
		if n == nil {
			return
		}
		return p.printDiscardStmt(n)
	case *CreateTrigStmt:
		if n == nil {
			return
		}
		return p.printCreateTrigStmt(n)
	case *CreatePlangStmt:
		if n == nil {
			return
		}
		return p.printCreatePlangStmt(n)
	case *CreateRoleStmt:
		if n == nil {
			return
		}
		return p.printCreateRoleStmt(n)
	case *AlterRoleStmt:
		if n == nil {
			return
		}
		return p.printAlterRoleStmt(n)
	case *DropRoleStmt:
		if n == nil {
			return
		}
		return p.printDropRoleStmt(n)
	case *LockStmt:
		if n == nil {
			return
		}
		return p.printLockStmt(n)
	case *ConstraintsSetStmt:
		if n == nil {
			return
		}
		return p.printConstraintsSetStmt(n)
	case *ReindexStmt:
		if n == nil {
			return
		}
		return p.printReindexStmt(n)
	case *CheckPointStmt:
		if n == nil {
			return
		}
		return p.printCheckPointStmt(n)
	case *CreateSchemaStmt:
		if n == nil {
			return
		}
		return p.printCreateSchemaStmt(n)
	case *AlterDatabaseStmt:
		if n == nil {
			return
		}
		return p.printAlterDatabaseStmt(n)
	case *AlterDatabaseSetStmt:
		if n == nil {
			return
		}
		return p.printAlterDatabaseSetStmt(n)
	case *AlterRoleSetStmt:
		if n == nil {
			return
		}
		return p.printAlterRoleSetStmt(n)
	case *CreateConversionStmt:
		if n == nil {
			return
		}
		return p.printCreateConversionStmt(n)
	case *CreateCastStmt:
		if n == nil {
			return
		}
		return p.printCreateCastStmt(n)
	case *CreateOpClassStmt:
		if n == nil {
			return
		}
		return p.printCreateOpClassStmt(n)
	case *CreateOpFamilyStmt:
		if n == nil {
			return
		}
		return p.printCreateOpFamilyStmt(n)
	case *AlterOpFamilyStmt:
		if n == nil {
			return
		}
		return p.printAlterOpFamilyStmt(n)
	case *PrepareStmt:
		if n == nil {
			return
		}
		return p.printPrepareStmt(n)
	case *ExecuteStmt:
		if n == nil {
			return
		}
		return p.printExecuteStmt(n)
	case *DeallocateStmt:
		if n == nil {
			return
		}
		return p.printDeallocateStmt(n)
	case *DeclareCursorStmt:
		if n == nil {
			return
		}
		return p.printDeclareCursorStmt(n)
	case *CreateTableSpaceStmt:
		if n == nil {
			return
		}
		return p.printCreateTableSpaceStmt(n)
	case *DropTableSpaceStmt:
		if n == nil {
			return
		}
		return p.printDropTableSpaceStmt(n)
	case *AlterObjectDependsStmt:
		if n == nil {
			return
		}
		return p.printAlterObjectDependsStmt(n)
	case *AlterObjectSchemaStmt:
		if n == nil {
			return
		}
		return p.printAlterObjectSchemaStmt(n)
	case *AlterOwnerStmt:
		if n == nil {
			return
		}
		return p.printAlterOwnerStmt(n)
	case *AlterOperatorStmt:
		if n == nil {
			return
		}
		return p.printAlterOperatorStmt(n)
	case *DropOwnedStmt:
		if n == nil {
			return
		}
		return p.printDropOwnedStmt(n)
	case *ReassignOwnedStmt:
		if n == nil {
			return
		}
		return p.printReassignOwnedStmt(n)
	case *CompositeTypeStmt:
		if n == nil {
			return
		}
		return p.printCompositeTypeStmt(n)
	case *CreateEnumStmt:
		if n == nil {
			return
		}
		return p.printCreateEnumStmt(n)
	case *CreateRangeStmt:
		if n == nil {
			return
		}
		return p.printCreateRangeStmt(n)
	case *AlterEnumStmt:
		if n == nil {
			return
		}
		return p.printAlterEnumStmt(n)
	case *AlterTsdictionaryStmt:
		if n == nil {
			return
		}
		return p.printAlterTsdictionaryStmt(n)
	case *AlterTsconfigurationStmt:
		if n == nil {
			return
		}
		return p.printAlterTsconfigurationStmt(n)
	case *CreateFdwStmt:
		if n == nil {
			return
		}
		return p.printCreateFdwStmt(n)
	case *AlterFdwStmt:
		if n == nil {
			return
		}
		return p.printAlterFdwStmt(n)
	case *CreateForeignServerStmt:
		if n == nil {
			return
		}
		return p.printCreateForeignServerStmt(n)
	case *AlterForeignServerStmt:
		if n == nil {
			return
		}
		return p.printAlterForeignServerStmt(n)
	case *CreateUserMappingStmt:
		if n == nil {
			return
		}
		return p.printCreateUserMappingStmt(n)
	case *AlterUserMappingStmt:
		if n == nil {
			return
		}
		return p.printAlterUserMappingStmt(n)
	case *DropUserMappingStmt:
		if n == nil {
			return
		}
		return p.printDropUserMappingStmt(n)
	case *AlterTableSpaceOptionsStmt:
		if n == nil {
			return
		}
		return p.printAlterTableSpaceOptionsStmt(n)
	case *AlterTableMoveAllStmt:
		if n == nil {
			return
		}
		return p.printAlterTableMoveAllStmt(n)
	case *SecLabelStmt:
		if n == nil {
			return
		}
		return p.printSecLabelStmt(n)
	case *CreateForeignTableStmt:
		if n == nil {
			return
		}
		return p.printCreateForeignTableStmt(n)
	case *ImportForeignSchemaStmt:
		if n == nil {
			return
		}
		return p.printImportForeignSchemaStmt(n)
	case *CreateExtensionStmt:
		if n == nil {
			return
		}
		return p.printCreateExtensionStmt(n)
	case *AlterExtensionStmt:
		if n == nil {
			return
		}
		return p.printAlterExtensionStmt(n)
	case *AlterExtensionContentsStmt:
		if n == nil {
			return
		}
		return p.printAlterExtensionContentsStmt(n)
	case *CreateEventTrigStmt:
		if n == nil {
			return
		}
		return p.printCreateEventTrigStmt(n)
	case *AlterEventTrigStmt:
		if n == nil {
			return
		}
		return p.printAlterEventTrigStmt(n)
	case *RefreshMatViewStmt:
		if n == nil {
			return
		}
		return p.printRefreshMatViewStmt(n)
	case *ReplicaIdentityStmt:
		if n == nil {
			return
		}
		return p.printReplicaIdentityStmt(n)
	case *AlterSystemStmt:
		if n == nil {
			return
		}
		return p.printAlterSystemStmt(n)
	case *CreatePolicyStmt:
		if n == nil {
			return
		}
		return p.printCreatePolicyStmt(n)
	case *AlterPolicyStmt:
		if n == nil {
			return
		}
		return p.printAlterPolicyStmt(n)
	case *CreateTransformStmt:
		if n == nil {
			return
		}
		return p.printCreateTransformStmt(n)
	case *CreateAmStmt:
		if n == nil {
			return
		}
		return p.printCreateAmStmt(n)
	case *CreatePublicationStmt:
		if n == nil {
			return
		}
		return p.printCreatePublicationStmt(n)
	case *AlterPublicationStmt:
		if n == nil {
			return
		}
		return p.printAlterPublicationStmt(n)
	case *CreateSubscriptionStmt:
		if n == nil {
			return
		}
		return p.printCreateSubscriptionStmt(n)
	case *AlterSubscriptionStmt:
		if n == nil {
			return
		}
		return p.printAlterSubscriptionStmt(n)
	case *DropSubscriptionStmt:
		if n == nil {
			return
		}
		return p.printDropSubscriptionStmt(n)
	case *CreateStatsStmt:
		if n == nil {
			return
		}
		return p.printCreateStatsStmt(n)
	case *AlterCollationStmt:
		if n == nil {
			return
		}
		return p.printAlterCollationStmt(n)
	case *CallStmt:
		if n == nil {
			return
		}
		return p.printCallStmt(n)
	case *AExpr:
		if n == nil {
			return
		}
		return p.printAExpr(n)
	case *ColumnRef:
		if n == nil {
			return
		}
		return p.printColumnRef(n)
	case *ParamRef:
		if n == nil {
			return
		}
		return p.printParamRef(n)
	case *AConst:
		if n == nil {
			return
		}
		return p.printAConst(n)
	case *FuncCall:
		if n == nil {
			return
		}
		return p.printFuncCall(n)
	case *AStar:
		if n == nil {
			return
		}
		return p.printAStar(n)
	case *AIndices:
		if n == nil {
			return
		}
		return p.printAIndices(n)
	case *AIndirection:
		if n == nil {
			return
		}
		return p.printAIndirection(n)
	case *AArrayExpr:
		if n == nil {
			return
		}
		return p.printAArrayExpr(n)
	case *ResTarget:
		if n == nil {
			return
		}
		return p.printResTarget(n)
	case *MultiAssignRef:
		if n == nil {
			return
		}
		return p.printMultiAssignRef(n)
	case *TypeCast:
		if n == nil {
			return
		}
		return p.printTypeCast(n)
	case *CollateClause:
		if n == nil {
			return
		}
		return p.printCollateClause(n)
	case *SortBy:
		if n == nil {
			return
		}
		return p.printSortBy(n)
	case *WindowDef:
		if n == nil {
			return
		}
		return p.printWindowDef(n)
	case *RangeSubselect:
		if n == nil {
			return
		}
		return p.printRangeSubselect(n)
	case *RangeFunction:
		if n == nil {
			return
		}
		return p.printRangeFunction(n)
	case *RangeTableSample:
		if n == nil {
			return
		}
		return p.printRangeTableSample(n)
	case *RangeTableFunc:
		if n == nil {
			return
		}
		return p.printRangeTableFunc(n)
	case *RangeTableFuncCol:
		if n == nil {
			return
		}
		return p.printRangeTableFuncCol(n)
	case *TypeName:
		if n == nil {
			return
		}
		return p.printTypeName(n)
	case *ColumnDef:
		if n == nil {
			return
		}
		return p.printColumnDef(n)
	case *IndexElem:
		if n == nil {
			return
		}
		return p.printIndexElem(n)
	case *Constraint:
		if n == nil {
			return
		}
		return p.printConstraint(n)
	case *DefElem:
		if n == nil {
			return
		}
		return p.printDefElem(n)
	case *RangeTblEntry:
		if n == nil {
			return
		}
		return p.printRangeTblEntry(n)
	case *RangeTblFunction:
		if n == nil {
			return
		}
		return p.printRangeTblFunction(n)
	case *TableSampleClause:
		if n == nil {
			return
		}
		return p.printTableSampleClause(n)
	case *WithCheckOption:
		if n == nil {
			return
		}
		return p.printWithCheckOption(n)
	case *SortGroupClause:
		if n == nil {
			return
		}
		return p.printSortGroupClause(n)
	case *GroupingSet:
		if n == nil {
			return
		}
		return p.printGroupingSet(n)
	case *WindowClause:
		if n == nil {
			return
		}
		return p.printWindowClause(n)
	case *ObjectWithArgs:
		if n == nil {
			return
		}
		return p.printObjectWithArgs(n)
	case *AccessPriv:
		if n == nil {
			return
		}
		return p.printAccessPriv(n)
	case *CreateOpClassItem:
		if n == nil {
			return
		}
		return p.printCreateOpClassItem(n)
	case *TableLikeClause:
		if n == nil {
			return
		}
		return p.printTableLikeClause(n)
	case *FunctionParameter:
		if n == nil {
			return
		}
		return p.printFunctionParameter(n)
	case *LockingClause:
		if n == nil {
			return
		}
		return p.printLockingClause(n)
	case *RowMarkClause:
		if n == nil {
			return
		}
		return p.printRowMarkClause(n)
	case *XmlSerialize:
		if n == nil {
			return
		}
		return p.printXmlSerialize(n)
	case *WithClause:
		if n == nil {
			return
		}
		return p.printWithClause(n)
	case *InferClause:
		if n == nil {
			return
		}
		return p.printInferClause(n)
	case *OnConflictClause:
		if n == nil {
			return
		}
		return p.printOnConflictClause(n)
	case *CommonTableExpr:
		if n == nil {
			return
		}
		return p.printCommonTableExpr(n)
	case *RoleSpec:
		if n == nil {
			return
		}
		return p.printRoleSpec(n)
	case *TriggerTransition:
		if n == nil {
			return
		}
		return p.printTriggerTransition(n)
	case *PartitionElem:
		if n == nil {
			return
		}
		return p.printPartitionElem(n)
	case *PartitionSpec:
		if n == nil {
			return
		}
		return p.printPartitionSpec(n)
	case *PartitionBoundSpec:
		if n == nil {
			return
		}
		return p.printPartitionBoundSpec(n)
	case *PartitionRangeDatum:
		if n == nil {
			return
		}
		return p.printPartitionRangeDatum(n)
	case *PartitionCmd:
		if n == nil {
			return
		}
		return p.printPartitionCmd(n)
	case *VacuumRelation:
		if n == nil {
			return
		}
		return p.printVacuumRelation(n)
	case *InlineCodeBlock:
		if n == nil {
			return
		}
		return p.printInlineCodeBlock(n)
	case *CallContext:
		if n == nil {
			return
		}
		return p.printCallContext(n)

	case *Root:
		return p.printNode(n.Node)
	case Nodes:
		return p.printNodes(n, " ")
	default:
		p.addError(errors.New("unhandled node type: " + reflect.TypeOf(node).String()))
	}

	return result
}

func (p *printer) printOidList(node *OidList) string {
	p.addError(errors.New("OidList not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printIntList(node *IntList) string {
	p.addError(errors.New("IntList not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTableFunc(node *TableFunc) string {
	p.addError(errors.New("TableFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printExpr(node *Expr) string {
	p.addError(errors.New("Expr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVar(node *Var) string {
	p.addError(errors.New("Var not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printParam(node *Param) string {
	p.addError(errors.New("Param not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAggref(node *Aggref) string {
	p.addError(errors.New("Aggref not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGroupingFunc(node *GroupingFunc) string {
	p.addError(errors.New("GroupingFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWindowFunc(node *WindowFunc) string {
	p.addError(errors.New("WindowFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSubscriptingRef(node *SubscriptingRef) string {
	p.addError(errors.New("SubscriptingRef not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFuncExpr(node *FuncExpr) string {
	p.addError(errors.New("FuncExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printOpExpr(node *OpExpr) string {
	p.addError(errors.New("OpExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDistinctExpr(node *DistinctExpr) string {
	p.addError(errors.New("DistinctExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printNullIfExpr(node *NullIfExpr) string {
	p.addError(errors.New("NullIfExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printScalarArrayOpExpr(node *ScalarArrayOpExpr) string {
	p.addError(errors.New("ScalarArrayOpExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSubPlan(node *SubPlan) string {
	p.addError(errors.New("SubPlan not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlternativeSubPlan(node *AlternativeSubPlan) string {
	p.addError(errors.New("AlternativeSubPlan not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFieldSelect(node *FieldSelect) string {
	p.addError(errors.New("FieldSelect not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFieldStore(node *FieldStore) string {
	p.addError(errors.New("FieldStore not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRelabelType(node *RelabelType) string {
	p.addError(errors.New("RelabelType not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCoerceViaIo(node *CoerceViaIo) string {
	p.addError(errors.New("CoerceViaIO not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printArrayCoerceExpr(node *ArrayCoerceExpr) string {
	p.addError(errors.New("ArrayCoerceExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printConvertRowtypeExpr(node *ConvertRowtypeExpr) string {
	p.addError(errors.New("ConvertRowtypeExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCollateExpr(node *CollateExpr) string {
	p.addError(errors.New("CollateExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCaseTestExpr(node *CaseTestExpr) string {
	p.addError(errors.New("CaseTestExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printArrayExpr(node *ArrayExpr) string {
	p.addError(errors.New("ArrayExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRowCompareExpr(node *RowCompareExpr) string {
	p.addError(errors.New("RowCompareExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printMinMaxExpr(node *MinMaxExpr) string {
	p.addError(errors.New("MinMaxExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printXmlExpr(node *XmlExpr) string {
	p.addError(errors.New("XmlExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printBooleanTest(node *BooleanTest) string {
	p.addError(errors.New("BooleanTest not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCoerceToDomain(node *CoerceToDomain) string {
	p.addError(errors.New("CoerceToDomain not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCoerceToDomainValue(node *CoerceToDomainValue) string {
	p.addError(errors.New("CoerceToDomainValue not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSetToDefault(node *SetToDefault) string {
	p.addError(errors.New("SetToDefault not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCurrentOfExpr(node *CurrentOfExpr) string {
	p.addError(errors.New("CurrentOfExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printNextValueExpr(node *NextValueExpr) string {
	p.addError(errors.New("NextValueExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printInferenceElem(node *InferenceElem) string {
	p.addError(errors.New("InferenceElem not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTargetEntry(node *TargetEntry) string {
	p.addError(errors.New("TargetEntry not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTblRef(node *RangeTblRef) string {
	p.addError(errors.New("RangeTblRef not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFromExpr(node *FromExpr) string {
	p.addError(errors.New("FromExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printOnConflictExpr(node *OnConflictExpr) string {
	p.addError(errors.New("OnConflictExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printQuery(node *Query) string {
	p.addError(errors.New("Query not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDomainStmt(node *AlterDomainStmt) string {
	p.addError(errors.New("AlterDomainStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSetOperationStmt(node *SetOperationStmt) string {
	p.addError(errors.New("SetOperationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGrantStmt(node *GrantStmt) string {
	p.addError(errors.New("GrantStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGrantRoleStmt(node *GrantRoleStmt) string {
	p.addError(errors.New("GrantRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDefaultPrivilegesStmt(node *AlterDefaultPrivilegesStmt) string {
	p.addError(errors.New("AlterDefaultPrivilegesStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printClosePortalStmt(node *ClosePortalStmt) string {
	p.addError(errors.New("ClosePortalStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printClusterStmt(node *ClusterStmt) string {
	p.addError(errors.New("ClusterStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCopyStmt(node *CopyStmt) string {
	p.addError(errors.New("CopyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDefineStmt(node *DefineStmt) string {
	p.addError(errors.New("DefineStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFetchStmt(node *FetchStmt) string {
	p.addError(errors.New("FetchStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printIndexStmt(node *IndexStmt) string {
	p.addError(errors.New("IndexStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterFunctionStmt(node *AlterFunctionStmt) string {
	p.addError(errors.New("AlterFunctionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDoStmt(node *DoStmt) string {
	p.addError(errors.New("DoStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRuleStmt(node *RuleStmt) string {
	p.addError(errors.New("RuleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printNotifyStmt(node *NotifyStmt) string {
	p.addError(errors.New("NotifyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printListenStmt(node *ListenStmt) string {
	p.addError(errors.New("ListenStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printUnlistenStmt(node *UnlistenStmt) string {
	p.addError(errors.New("UnlistenStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTransactionStmt(node *TransactionStmt) string {
	p.addError(errors.New("TransactionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printLoadStmt(node *LoadStmt) string {
	p.addError(errors.New("LoadStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateDomainStmt(node *CreateDomainStmt) string {
	p.addError(errors.New("CreateDomainStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatedbStmt(node *CreatedbStmt) string {
	p.addError(errors.New("CreatedbStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropdbStmt(node *DropdbStmt) string {
	p.addError(errors.New("DropdbStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVacuumStmt(node *VacuumStmt) string {
	p.addError(errors.New("VacuumStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateSeqStmt(node *CreateSeqStmt) string {
	p.addError(errors.New("CreateSeqStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterSeqStmt(node *AlterSeqStmt) string {
	p.addError(errors.New("AlterSeqStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVariableSetStmt(node *VariableSetStmt) string {
	p.addError(errors.New("VariableSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVariableShowStmt(node *VariableShowStmt) string {
	p.addError(errors.New("VariableShowStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDiscardStmt(node *DiscardStmt) string {
	p.addError(errors.New("DiscardStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateTrigStmt(node *CreateTrigStmt) string {
	p.addError(errors.New("CreateTrigStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatePlangStmt(node *CreatePlangStmt) string {
	p.addError(errors.New("CreatePLangStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateRoleStmt(node *CreateRoleStmt) string {
	p.addError(errors.New("CreateRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterRoleStmt(node *AlterRoleStmt) string {
	p.addError(errors.New("AlterRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropRoleStmt(node *DropRoleStmt) string {
	p.addError(errors.New("DropRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printLockStmt(node *LockStmt) string {
	p.addError(errors.New("LockStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printConstraintsSetStmt(node *ConstraintsSetStmt) string {
	p.addError(errors.New("ConstraintsSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReindexStmt(node *ReindexStmt) string {
	p.addError(errors.New("ReindexStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCheckPointStmt(node *CheckPointStmt) string {
	p.addError(errors.New("CheckPointStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDatabaseStmt(node *AlterDatabaseStmt) string {
	p.addError(errors.New("AlterDatabaseStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDatabaseSetStmt(node *AlterDatabaseSetStmt) string {
	p.addError(errors.New("AlterDatabaseSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterRoleSetStmt(node *AlterRoleSetStmt) string {
	p.addError(errors.New("AlterRoleSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateConversionStmt(node *CreateConversionStmt) string {
	p.addError(errors.New("CreateConversionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateCastStmt(node *CreateCastStmt) string {
	p.addError(errors.New("CreateCastStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateOpClassStmt(node *CreateOpClassStmt) string {
	p.addError(errors.New("CreateOpClassStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateOpFamilyStmt(node *CreateOpFamilyStmt) string {
	p.addError(errors.New("CreateOpFamilyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterOpFamilyStmt(node *AlterOpFamilyStmt) string {
	p.addError(errors.New("AlterOpFamilyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPrepareStmt(node *PrepareStmt) string {
	p.addError(errors.New("PrepareStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printExecuteStmt(node *ExecuteStmt) string {
	p.addError(errors.New("ExecuteStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDeallocateStmt(node *DeallocateStmt) string {
	p.addError(errors.New("DeallocateStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDeclareCursorStmt(node *DeclareCursorStmt) string {
	p.addError(errors.New("DeclareCursorStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateTableSpaceStmt(node *CreateTableSpaceStmt) string {
	p.addError(errors.New("CreateTableSpaceStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropTableSpaceStmt(node *DropTableSpaceStmt) string {
	p.addError(errors.New("DropTableSpaceStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterObjectDependsStmt(node *AlterObjectDependsStmt) string {
	p.addError(errors.New("AlterObjectDependsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterOwnerStmt(node *AlterOwnerStmt) string {
	p.addError(errors.New("AlterOwnerStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterOperatorStmt(node *AlterOperatorStmt) string {
	p.addError(errors.New("AlterOperatorStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropOwnedStmt(node *DropOwnedStmt) string {
	p.addError(errors.New("DropOwnedStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReassignOwnedStmt(node *ReassignOwnedStmt) string {
	p.addError(errors.New("ReassignOwnedStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateRangeStmt(node *CreateRangeStmt) string {
	p.addError(errors.New("CreateRangeStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTsdictionaryStmt(node *AlterTsdictionaryStmt) string {
	p.addError(errors.New("AlterTSDictionaryStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTsconfigurationStmt(node *AlterTsconfigurationStmt) string {
	p.addError(errors.New("AlterTSConfigurationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateFdwStmt(node *CreateFdwStmt) string {
	p.addError(errors.New("CreateFdwStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterFdwStmt(node *AlterFdwStmt) string {
	p.addError(errors.New("AlterFdwStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateForeignServerStmt(node *CreateForeignServerStmt) string {
	p.addError(errors.New("CreateForeignServerStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterForeignServerStmt(node *AlterForeignServerStmt) string {
	p.addError(errors.New("AlterForeignServerStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateUserMappingStmt(node *CreateUserMappingStmt) string {
	p.addError(errors.New("CreateUserMappingStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterUserMappingStmt(node *AlterUserMappingStmt) string {
	p.addError(errors.New("AlterUserMappingStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropUserMappingStmt(node *DropUserMappingStmt) string {
	p.addError(errors.New("DropUserMappingStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTableSpaceOptionsStmt(node *AlterTableSpaceOptionsStmt) string {
	p.addError(errors.New("AlterTableSpaceOptionsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTableMoveAllStmt(node *AlterTableMoveAllStmt) string {
	p.addError(errors.New("AlterTableMoveAllStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSecLabelStmt(node *SecLabelStmt) string {
	p.addError(errors.New("SecLabelStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateForeignTableStmt(node *CreateForeignTableStmt) string {
	p.addError(errors.New("CreateForeignTableStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printImportForeignSchemaStmt(node *ImportForeignSchemaStmt) string {
	p.addError(errors.New("ImportForeignSchemaStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterExtensionStmt(node *AlterExtensionStmt) string {
	p.addError(errors.New("AlterExtensionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterExtensionContentsStmt(node *AlterExtensionContentsStmt) string {
	p.addError(errors.New("AlterExtensionContentsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateEventTrigStmt(node *CreateEventTrigStmt) string {
	p.addError(errors.New("CreateEventTrigStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterEventTrigStmt(node *AlterEventTrigStmt) string {
	p.addError(errors.New("AlterEventTrigStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRefreshMatViewStmt(node *RefreshMatViewStmt) string {
	p.addError(errors.New("RefreshMatViewStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReplicaIdentityStmt(node *ReplicaIdentityStmt) string {
	p.addError(errors.New("ReplicaIdentityStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterSystemStmt(node *AlterSystemStmt) string {
	p.addError(errors.New("AlterSystemStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatePolicyStmt(node *CreatePolicyStmt) string {
	p.addError(errors.New("CreatePolicyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterPolicyStmt(node *AlterPolicyStmt) string {
	p.addError(errors.New("AlterPolicyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateTransformStmt(node *CreateTransformStmt) string {
	p.addError(errors.New("CreateTransformStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateAmStmt(node *CreateAmStmt) string {
	p.addError(errors.New("CreateAmStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatePublicationStmt(node *CreatePublicationStmt) string {
	p.addError(errors.New("CreatePublicationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterPublicationStmt(node *AlterPublicationStmt) string {
	p.addError(errors.New("AlterPublicationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateSubscriptionStmt(node *CreateSubscriptionStmt) string {
	p.addError(errors.New("CreateSubscriptionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterSubscriptionStmt(node *AlterSubscriptionStmt) string {
	p.addError(errors.New("AlterSubscriptionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropSubscriptionStmt(node *DropSubscriptionStmt) string {
	p.addError(errors.New("DropSubscriptionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateStatsStmt(node *CreateStatsStmt) string {
	p.addError(errors.New("CreateStatsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterCollationStmt(node *AlterCollationStmt) string {
	p.addError(errors.New("AlterCollationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCallStmt(node *CallStmt) string {
	p.addError(errors.New("CallStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAIndices(node *AIndices) string {
	p.addError(errors.New("A_Indices not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAIndirection(node *AIndirection) string {
	p.addError(errors.New("A_Indirection not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCollateClause(node *CollateClause) string {
	p.addError(errors.New("CollateClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWindowDef(node *WindowDef) string {
	p.addError(errors.New("WindowDef not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeFunction(node *RangeFunction) string {
	p.addError(errors.New("RangeFunction not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTableSample(node *RangeTableSample) string {
	p.addError(errors.New("RangeTableSample not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTableFunc(node *RangeTableFunc) string {
	p.addError(errors.New("RangeTableFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTableFuncCol(node *RangeTableFuncCol) string {
	p.addError(errors.New("RangeTableFuncCol not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTblEntry(node *RangeTblEntry) string {
	p.addError(errors.New("RangeTblEntry not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTblFunction(node *RangeTblFunction) string {
	p.addError(errors.New("RangeTblFunction not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTableSampleClause(node *TableSampleClause) string {
	p.addError(errors.New("TableSampleClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWithCheckOption(node *WithCheckOption) string {
	p.addError(errors.New("WithCheckOption not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSortGroupClause(node *SortGroupClause) string {
	p.addError(errors.New("SortGroupClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGroupingSet(node *GroupingSet) string {
	p.addError(errors.New("GroupingSet not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWindowClause(node *WindowClause) string {
	p.addError(errors.New("WindowClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAccessPriv(node *AccessPriv) string {
	p.addError(errors.New("AccessPriv not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateOpClassItem(node *CreateOpClassItem) string {
	p.addError(errors.New("CreateOpClassItem not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTableLikeClause(node *TableLikeClause) string {
	p.addError(errors.New("TableLikeClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printLockingClause(node *LockingClause) string {
	p.addError(errors.New("LockingClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRowMarkClause(node *RowMarkClause) string {
	p.addError(errors.New("RowMarkClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printXmlSerialize(node *XmlSerialize) string {
	p.addError(errors.New("XmlSerialize not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printInferClause(node *InferClause) string {
	p.addError(errors.New("InferClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printOnConflictClause(node *OnConflictClause) string {
	p.addError(errors.New("OnConflictClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRoleSpec(node *RoleSpec) string {
	p.addError(errors.New("RoleSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTriggerTransition(node *TriggerTransition) string {
	p.addError(errors.New("TriggerTransition not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionElem(node *PartitionElem) string {
	p.addError(errors.New("PartitionElem not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionSpec(node *PartitionSpec) string {
	p.addError(errors.New("PartitionSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionBoundSpec(node *PartitionBoundSpec) string {
	p.addError(errors.New("PartitionBoundSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionRangeDatum(node *PartitionRangeDatum) string {
	p.addError(errors.New("PartitionRangeDatum not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionCmd(node *PartitionCmd) string {
	p.addError(errors.New("PartitionCmd not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVacuumRelation(node *VacuumRelation) string {
	p.addError(errors.New("VacuumRelation not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printInlineCodeBlock(node *InlineCodeBlock) string {
	p.addError(errors.New("InlineCodeBlock not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCallContext(node *CallContext) string {
	p.addError(errors.New("CallContext not implemented"))
	return "NOT IMPLEMENTED"
}
