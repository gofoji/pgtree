// Code generated by foji 0.3, template: foji/node_print.go.tpl; DO NOT EDIT.

package pgtree

import (
	"errors"
	"fmt"
	"reflect"
	"strings"
	"unsafe"

	"github.com/gofoji/pgtree/nodes"
)

// Thanks to zerolog for this utility
func isNilValue(i interface{}) bool {
	return (*[2]uintptr)(unsafe.Pointer(&i))[1] == 0
}

func (p *printer) printNode(node nodes.Node) (result string) {
	if node == nil || isNilValue(node) {
		return
	}
	p.level += 1
	defer func() {
		if p.debug {
			pad := p.pad(p.level - 1)
			t := reflect.TypeOf(node)
			name := t.Name()
			if t.Kind() == reflect.Ptr {
				name = t.Elem().Name()
			}
			debugLine := fmt.Sprintln(pad + name + " = `" + strings.ReplaceAll(result, "\n", " \\n ") + "`")
			p.debugOutput = append([]string{debugLine}, p.debugOutput...)
		}
		p.level -= 1
	}()

	switch n := node.(type) {
	case *nodes.Integer:
		return p.printInteger(n)
	case *nodes.Float:
		return p.printFloat(n)
	case *nodes.String:
		return p.printString(n)
	case *nodes.BitString:
		return p.printBitString(n)
	case *nodes.Null:
		return p.printNull(n)
	case *nodes.List:
		return p.printList(n)
	case *nodes.OidList:
		return p.printOidList(n)
	case *nodes.IntList:
		return p.printIntList(n)
	case *nodes.Alias:
		return p.printAlias(n)
	case *nodes.RangeVar:
		return p.printRangeVar(n)
	case *nodes.TableFunc:
		return p.printTableFunc(n)
	case *nodes.Expr:
		return p.printExpr(n)
	case *nodes.Var:
		return p.printVar(n)
	case *nodes.Param:
		return p.printParam(n)
	case *nodes.Aggref:
		return p.printAggref(n)
	case *nodes.GroupingFunc:
		return p.printGroupingFunc(n)
	case *nodes.WindowFunc:
		return p.printWindowFunc(n)
	case *nodes.SubscriptingRef:
		return p.printSubscriptingRef(n)
	case *nodes.FuncExpr:
		return p.printFuncExpr(n)
	case *nodes.NamedArgExpr:
		return p.printNamedArgExpr(n)
	case *nodes.OpExpr:
		return p.printOpExpr(n)
	case *nodes.DistinctExpr:
		return p.printDistinctExpr(n)
	case *nodes.NullIfExpr:
		return p.printNullIfExpr(n)
	case *nodes.ScalarArrayOpExpr:
		return p.printScalarArrayOpExpr(n)
	case *nodes.BoolExpr:
		return p.printBoolExpr(n)
	case *nodes.SubLink:
		return p.printSubLink(n)
	case *nodes.SubPlan:
		return p.printSubPlan(n)
	case *nodes.AlternativeSubPlan:
		return p.printAlternativeSubPlan(n)
	case *nodes.FieldSelect:
		return p.printFieldSelect(n)
	case *nodes.FieldStore:
		return p.printFieldStore(n)
	case *nodes.RelabelType:
		return p.printRelabelType(n)
	case *nodes.CoerceViaIo:
		return p.printCoerceViaIo(n)
	case *nodes.ArrayCoerceExpr:
		return p.printArrayCoerceExpr(n)
	case *nodes.ConvertRowtypeExpr:
		return p.printConvertRowtypeExpr(n)
	case *nodes.CollateExpr:
		return p.printCollateExpr(n)
	case *nodes.CaseExpr:
		return p.printCaseExpr(n)
	case *nodes.CaseWhen:
		return p.printCaseWhen(n)
	case *nodes.CaseTestExpr:
		return p.printCaseTestExpr(n)
	case *nodes.ArrayExpr:
		return p.printArrayExpr(n)
	case *nodes.RowExpr:
		return p.printRowExpr(n)
	case *nodes.RowCompareExpr:
		return p.printRowCompareExpr(n)
	case *nodes.CoalesceExpr:
		return p.printCoalesceExpr(n)
	case *nodes.MinMaxExpr:
		return p.printMinMaxExpr(n)
	case *nodes.SqlvalueFunction:
		return p.printSqlvalueFunction(n)
	case *nodes.XmlExpr:
		return p.printXmlExpr(n)
	case *nodes.NullTest:
		return p.printNullTest(n)
	case *nodes.BooleanTest:
		return p.printBooleanTest(n)
	case *nodes.CoerceToDomain:
		return p.printCoerceToDomain(n)
	case *nodes.CoerceToDomainValue:
		return p.printCoerceToDomainValue(n)
	case *nodes.SetToDefault:
		return p.printSetToDefault(n)
	case *nodes.CurrentOfExpr:
		return p.printCurrentOfExpr(n)
	case *nodes.NextValueExpr:
		return p.printNextValueExpr(n)
	case *nodes.InferenceElem:
		return p.printInferenceElem(n)
	case *nodes.TargetEntry:
		return p.printTargetEntry(n)
	case *nodes.RangeTblRef:
		return p.printRangeTblRef(n)
	case *nodes.JoinExpr:
		return p.printJoinExpr(n)
	case *nodes.FromExpr:
		return p.printFromExpr(n)
	case *nodes.OnConflictExpr:
		return p.printOnConflictExpr(n)
	case *nodes.IntoClause:
		return p.printIntoClause(n)
	case *nodes.RawStmt:
		return p.printRawStmt(n)
	case *nodes.Query:
		return p.printQuery(n)
	case *nodes.InsertStmt:
		return p.printInsertStmt(n)
	case *nodes.DeleteStmt:
		return p.printDeleteStmt(n)
	case *nodes.UpdateStmt:
		return p.printUpdateStmt(n)
	case *nodes.SelectStmt:
		return p.printSelectStmt(n)
	case *nodes.AlterTableStmt:
		return p.printAlterTableStmt(n)
	case *nodes.AlterTableCmd:
		return p.printAlterTableCmd(n)
	case *nodes.AlterDomainStmt:
		return p.printAlterDomainStmt(n)
	case *nodes.SetOperationStmt:
		return p.printSetOperationStmt(n)
	case *nodes.GrantStmt:
		return p.printGrantStmt(n)
	case *nodes.GrantRoleStmt:
		return p.printGrantRoleStmt(n)
	case *nodes.AlterDefaultPrivilegesStmt:
		return p.printAlterDefaultPrivilegesStmt(n)
	case *nodes.ClosePortalStmt:
		return p.printClosePortalStmt(n)
	case *nodes.ClusterStmt:
		return p.printClusterStmt(n)
	case *nodes.CopyStmt:
		return p.printCopyStmt(n)
	case *nodes.CreateStmt:
		return p.printCreateStmt(n)
	case *nodes.DefineStmt:
		return p.printDefineStmt(n)
	case *nodes.DropStmt:
		return p.printDropStmt(n)
	case *nodes.TruncateStmt:
		return p.printTruncateStmt(n)
	case *nodes.CommentStmt:
		return p.printCommentStmt(n)
	case *nodes.FetchStmt:
		return p.printFetchStmt(n)
	case *nodes.IndexStmt:
		return p.printIndexStmt(n)
	case *nodes.CreateFunctionStmt:
		return p.printCreateFunctionStmt(n)
	case *nodes.AlterFunctionStmt:
		return p.printAlterFunctionStmt(n)
	case *nodes.DoStmt:
		return p.printDoStmt(n)
	case *nodes.RenameStmt:
		return p.printRenameStmt(n)
	case *nodes.RuleStmt:
		return p.printRuleStmt(n)
	case *nodes.NotifyStmt:
		return p.printNotifyStmt(n)
	case *nodes.ListenStmt:
		return p.printListenStmt(n)
	case *nodes.UnlistenStmt:
		return p.printUnlistenStmt(n)
	case *nodes.TransactionStmt:
		return p.printTransactionStmt(n)
	case *nodes.ViewStmt:
		return p.printViewStmt(n)
	case *nodes.LoadStmt:
		return p.printLoadStmt(n)
	case *nodes.CreateDomainStmt:
		return p.printCreateDomainStmt(n)
	case *nodes.CreatedbStmt:
		return p.printCreatedbStmt(n)
	case *nodes.DropdbStmt:
		return p.printDropdbStmt(n)
	case *nodes.VacuumStmt:
		return p.printVacuumStmt(n)
	case *nodes.ExplainStmt:
		return p.printExplainStmt(n)
	case *nodes.CreateTableAsStmt:
		return p.printCreateTableAsStmt(n)
	case *nodes.CreateSeqStmt:
		return p.printCreateSeqStmt(n)
	case *nodes.AlterSeqStmt:
		return p.printAlterSeqStmt(n)
	case *nodes.VariableSetStmt:
		return p.printVariableSetStmt(n)
	case *nodes.VariableShowStmt:
		return p.printVariableShowStmt(n)
	case *nodes.DiscardStmt:
		return p.printDiscardStmt(n)
	case *nodes.CreateTrigStmt:
		return p.printCreateTrigStmt(n)
	case *nodes.CreatePlangStmt:
		return p.printCreatePlangStmt(n)
	case *nodes.CreateRoleStmt:
		return p.printCreateRoleStmt(n)
	case *nodes.AlterRoleStmt:
		return p.printAlterRoleStmt(n)
	case *nodes.DropRoleStmt:
		return p.printDropRoleStmt(n)
	case *nodes.LockStmt:
		return p.printLockStmt(n)
	case *nodes.ConstraintsSetStmt:
		return p.printConstraintsSetStmt(n)
	case *nodes.ReindexStmt:
		return p.printReindexStmt(n)
	case *nodes.CheckPointStmt:
		return p.printCheckPointStmt(n)
	case *nodes.CreateSchemaStmt:
		return p.printCreateSchemaStmt(n)
	case *nodes.AlterDatabaseStmt:
		return p.printAlterDatabaseStmt(n)
	case *nodes.AlterDatabaseSetStmt:
		return p.printAlterDatabaseSetStmt(n)
	case *nodes.AlterRoleSetStmt:
		return p.printAlterRoleSetStmt(n)
	case *nodes.CreateConversionStmt:
		return p.printCreateConversionStmt(n)
	case *nodes.CreateCastStmt:
		return p.printCreateCastStmt(n)
	case *nodes.CreateOpClassStmt:
		return p.printCreateOpClassStmt(n)
	case *nodes.CreateOpFamilyStmt:
		return p.printCreateOpFamilyStmt(n)
	case *nodes.AlterOpFamilyStmt:
		return p.printAlterOpFamilyStmt(n)
	case *nodes.PrepareStmt:
		return p.printPrepareStmt(n)
	case *nodes.ExecuteStmt:
		return p.printExecuteStmt(n)
	case *nodes.DeallocateStmt:
		return p.printDeallocateStmt(n)
	case *nodes.DeclareCursorStmt:
		return p.printDeclareCursorStmt(n)
	case *nodes.CreateTableSpaceStmt:
		return p.printCreateTableSpaceStmt(n)
	case *nodes.DropTableSpaceStmt:
		return p.printDropTableSpaceStmt(n)
	case *nodes.AlterObjectDependsStmt:
		return p.printAlterObjectDependsStmt(n)
	case *nodes.AlterObjectSchemaStmt:
		return p.printAlterObjectSchemaStmt(n)
	case *nodes.AlterOwnerStmt:
		return p.printAlterOwnerStmt(n)
	case *nodes.AlterOperatorStmt:
		return p.printAlterOperatorStmt(n)
	case *nodes.DropOwnedStmt:
		return p.printDropOwnedStmt(n)
	case *nodes.ReassignOwnedStmt:
		return p.printReassignOwnedStmt(n)
	case *nodes.CompositeTypeStmt:
		return p.printCompositeTypeStmt(n)
	case *nodes.CreateEnumStmt:
		return p.printCreateEnumStmt(n)
	case *nodes.CreateRangeStmt:
		return p.printCreateRangeStmt(n)
	case *nodes.AlterEnumStmt:
		return p.printAlterEnumStmt(n)
	case *nodes.AlterTsdictionaryStmt:
		return p.printAlterTsdictionaryStmt(n)
	case *nodes.AlterTsconfigurationStmt:
		return p.printAlterTsconfigurationStmt(n)
	case *nodes.CreateFdwStmt:
		return p.printCreateFdwStmt(n)
	case *nodes.AlterFdwStmt:
		return p.printAlterFdwStmt(n)
	case *nodes.CreateForeignServerStmt:
		return p.printCreateForeignServerStmt(n)
	case *nodes.AlterForeignServerStmt:
		return p.printAlterForeignServerStmt(n)
	case *nodes.CreateUserMappingStmt:
		return p.printCreateUserMappingStmt(n)
	case *nodes.AlterUserMappingStmt:
		return p.printAlterUserMappingStmt(n)
	case *nodes.DropUserMappingStmt:
		return p.printDropUserMappingStmt(n)
	case *nodes.AlterTableSpaceOptionsStmt:
		return p.printAlterTableSpaceOptionsStmt(n)
	case *nodes.AlterTableMoveAllStmt:
		return p.printAlterTableMoveAllStmt(n)
	case *nodes.SecLabelStmt:
		return p.printSecLabelStmt(n)
	case *nodes.CreateForeignTableStmt:
		return p.printCreateForeignTableStmt(n)
	case *nodes.ImportForeignSchemaStmt:
		return p.printImportForeignSchemaStmt(n)
	case *nodes.CreateExtensionStmt:
		return p.printCreateExtensionStmt(n)
	case *nodes.AlterExtensionStmt:
		return p.printAlterExtensionStmt(n)
	case *nodes.AlterExtensionContentsStmt:
		return p.printAlterExtensionContentsStmt(n)
	case *nodes.CreateEventTrigStmt:
		return p.printCreateEventTrigStmt(n)
	case *nodes.AlterEventTrigStmt:
		return p.printAlterEventTrigStmt(n)
	case *nodes.RefreshMatViewStmt:
		return p.printRefreshMatViewStmt(n)
	case *nodes.ReplicaIdentityStmt:
		return p.printReplicaIdentityStmt(n)
	case *nodes.AlterSystemStmt:
		return p.printAlterSystemStmt(n)
	case *nodes.CreatePolicyStmt:
		return p.printCreatePolicyStmt(n)
	case *nodes.AlterPolicyStmt:
		return p.printAlterPolicyStmt(n)
	case *nodes.CreateTransformStmt:
		return p.printCreateTransformStmt(n)
	case *nodes.CreateAmStmt:
		return p.printCreateAmStmt(n)
	case *nodes.CreatePublicationStmt:
		return p.printCreatePublicationStmt(n)
	case *nodes.AlterPublicationStmt:
		return p.printAlterPublicationStmt(n)
	case *nodes.CreateSubscriptionStmt:
		return p.printCreateSubscriptionStmt(n)
	case *nodes.AlterSubscriptionStmt:
		return p.printAlterSubscriptionStmt(n)
	case *nodes.DropSubscriptionStmt:
		return p.printDropSubscriptionStmt(n)
	case *nodes.CreateStatsStmt:
		return p.printCreateStatsStmt(n)
	case *nodes.AlterCollationStmt:
		return p.printAlterCollationStmt(n)
	case *nodes.CallStmt:
		return p.printCallStmt(n)
	case *nodes.AExpr:
		return p.printAExpr(n)
	case *nodes.ColumnRef:
		return p.printColumnRef(n)
	case *nodes.ParamRef:
		return p.printParamRef(n)
	case *nodes.AConst:
		return p.printAConst(n)
	case *nodes.FuncCall:
		return p.printFuncCall(n)
	case *nodes.AStar:
		return p.printAStar(n)
	case *nodes.AIndices:
		return p.printAIndices(n)
	case *nodes.AIndirection:
		return p.printAIndirection(n)
	case *nodes.AArrayExpr:
		return p.printAArrayExpr(n)
	case *nodes.ResTarget:
		return p.printResTarget(n)
	case *nodes.MultiAssignRef:
		return p.printMultiAssignRef(n)
	case *nodes.TypeCast:
		return p.printTypeCast(n)
	case *nodes.CollateClause:
		return p.printCollateClause(n)
	case *nodes.SortBy:
		return p.printSortBy(n)
	case *nodes.WindowDef:
		return p.printWindowDef(n)
	case *nodes.RangeSubselect:
		return p.printRangeSubselect(n)
	case *nodes.RangeFunction:
		return p.printRangeFunction(n)
	case *nodes.RangeTableSample:
		return p.printRangeTableSample(n)
	case *nodes.RangeTableFunc:
		return p.printRangeTableFunc(n)
	case *nodes.RangeTableFuncCol:
		return p.printRangeTableFuncCol(n)
	case *nodes.TypeName:
		return p.printTypeName(n)
	case *nodes.ColumnDef:
		return p.printColumnDef(n)
	case *nodes.IndexElem:
		return p.printIndexElem(n)
	case *nodes.Constraint:
		return p.printConstraint(n)
	case *nodes.DefElem:
		return p.printDefElem(n)
	case *nodes.RangeTblEntry:
		return p.printRangeTblEntry(n)
	case *nodes.RangeTblFunction:
		return p.printRangeTblFunction(n)
	case *nodes.TableSampleClause:
		return p.printTableSampleClause(n)
	case *nodes.WithCheckOption:
		return p.printWithCheckOption(n)
	case *nodes.SortGroupClause:
		return p.printSortGroupClause(n)
	case *nodes.GroupingSet:
		return p.printGroupingSet(n)
	case *nodes.WindowClause:
		return p.printWindowClause(n)
	case *nodes.ObjectWithArgs:
		return p.printObjectWithArgs(n)
	case *nodes.AccessPriv:
		return p.printAccessPriv(n)
	case *nodes.CreateOpClassItem:
		return p.printCreateOpClassItem(n)
	case *nodes.TableLikeClause:
		return p.printTableLikeClause(n)
	case *nodes.FunctionParameter:
		return p.printFunctionParameter(n)
	case *nodes.LockingClause:
		return p.printLockingClause(n)
	case *nodes.RowMarkClause:
		return p.printRowMarkClause(n)
	case *nodes.XmlSerialize:
		return p.printXmlSerialize(n)
	case *nodes.WithClause:
		return p.printWithClause(n)
	case *nodes.InferClause:
		return p.printInferClause(n)
	case *nodes.OnConflictClause:
		return p.printOnConflictClause(n)
	case *nodes.CommonTableExpr:
		return p.printCommonTableExpr(n)
	case *nodes.RoleSpec:
		return p.printRoleSpec(n)
	case *nodes.TriggerTransition:
		return p.printTriggerTransition(n)
	case *nodes.PartitionElem:
		return p.printPartitionElem(n)
	case *nodes.PartitionSpec:
		return p.printPartitionSpec(n)
	case *nodes.PartitionBoundSpec:
		return p.printPartitionBoundSpec(n)
	case *nodes.PartitionRangeDatum:
		return p.printPartitionRangeDatum(n)
	case *nodes.PartitionCmd:
		return p.printPartitionCmd(n)
	case *nodes.VacuumRelation:
		return p.printVacuumRelation(n)
	case *nodes.InlineCodeBlock:
		return p.printInlineCodeBlock(n)
	case *nodes.CallContext:
		return p.printCallContext(n)

	case *nodes.Root:
		return p.printNode(n.Node)
	case nodes.Nodes:
		return p.printNodes(n, " ")
	default:
		p.addError(errors.New("unhandled node type: " + reflect.TypeOf(node).String()))
	}

	return result
}

func (p *printer) printOidList(node *nodes.OidList) string {
	p.addError(errors.New("OidList not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printIntList(node *nodes.IntList) string {
	p.addError(errors.New("IntList not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTableFunc(node *nodes.TableFunc) string {
	p.addError(errors.New("TableFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printExpr(node *nodes.Expr) string {
	p.addError(errors.New("Expr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVar(node *nodes.Var) string {
	p.addError(errors.New("Var not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printParam(node *nodes.Param) string {
	p.addError(errors.New("Param not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAggref(node *nodes.Aggref) string {
	p.addError(errors.New("Aggref not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGroupingFunc(node *nodes.GroupingFunc) string {
	p.addError(errors.New("GroupingFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWindowFunc(node *nodes.WindowFunc) string {
	p.addError(errors.New("WindowFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSubscriptingRef(node *nodes.SubscriptingRef) string {
	p.addError(errors.New("SubscriptingRef not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFuncExpr(node *nodes.FuncExpr) string {
	p.addError(errors.New("FuncExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printOpExpr(node *nodes.OpExpr) string {
	p.addError(errors.New("OpExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDistinctExpr(node *nodes.DistinctExpr) string {
	p.addError(errors.New("DistinctExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printNullIfExpr(node *nodes.NullIfExpr) string {
	p.addError(errors.New("NullIfExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printScalarArrayOpExpr(node *nodes.ScalarArrayOpExpr) string {
	p.addError(errors.New("ScalarArrayOpExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSubPlan(node *nodes.SubPlan) string {
	p.addError(errors.New("SubPlan not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlternativeSubPlan(node *nodes.AlternativeSubPlan) string {
	p.addError(errors.New("AlternativeSubPlan not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFieldSelect(node *nodes.FieldSelect) string {
	p.addError(errors.New("FieldSelect not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFieldStore(node *nodes.FieldStore) string {
	p.addError(errors.New("FieldStore not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRelabelType(node *nodes.RelabelType) string {
	p.addError(errors.New("RelabelType not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCoerceViaIo(node *nodes.CoerceViaIo) string {
	p.addError(errors.New("CoerceViaIO not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printArrayCoerceExpr(node *nodes.ArrayCoerceExpr) string {
	p.addError(errors.New("ArrayCoerceExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printConvertRowtypeExpr(node *nodes.ConvertRowtypeExpr) string {
	p.addError(errors.New("ConvertRowtypeExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCollateExpr(node *nodes.CollateExpr) string {
	p.addError(errors.New("CollateExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCaseTestExpr(node *nodes.CaseTestExpr) string {
	p.addError(errors.New("CaseTestExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printArrayExpr(node *nodes.ArrayExpr) string {
	p.addError(errors.New("ArrayExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRowCompareExpr(node *nodes.RowCompareExpr) string {
	p.addError(errors.New("RowCompareExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printMinMaxExpr(node *nodes.MinMaxExpr) string {
	p.addError(errors.New("MinMaxExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printXmlExpr(node *nodes.XmlExpr) string {
	p.addError(errors.New("XmlExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printBooleanTest(node *nodes.BooleanTest) string {
	p.addError(errors.New("BooleanTest not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCoerceToDomain(node *nodes.CoerceToDomain) string {
	p.addError(errors.New("CoerceToDomain not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCoerceToDomainValue(node *nodes.CoerceToDomainValue) string {
	p.addError(errors.New("CoerceToDomainValue not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printNextValueExpr(node *nodes.NextValueExpr) string {
	p.addError(errors.New("NextValueExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printInferenceElem(node *nodes.InferenceElem) string {
	p.addError(errors.New("InferenceElem not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTargetEntry(node *nodes.TargetEntry) string {
	p.addError(errors.New("TargetEntry not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTblRef(node *nodes.RangeTblRef) string {
	p.addError(errors.New("RangeTblRef not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFromExpr(node *nodes.FromExpr) string {
	p.addError(errors.New("FromExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printOnConflictExpr(node *nodes.OnConflictExpr) string {
	p.addError(errors.New("OnConflictExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printQuery(node *nodes.Query) string {
	p.addError(errors.New("Query not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDomainStmt(node *nodes.AlterDomainStmt) string {
	p.addError(errors.New("AlterDomainStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSetOperationStmt(node *nodes.SetOperationStmt) string {
	p.addError(errors.New("SetOperationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGrantStmt(node *nodes.GrantStmt) string {
	p.addError(errors.New("GrantStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGrantRoleStmt(node *nodes.GrantRoleStmt) string {
	p.addError(errors.New("GrantRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDefaultPrivilegesStmt(node *nodes.AlterDefaultPrivilegesStmt) string {
	p.addError(errors.New("AlterDefaultPrivilegesStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printClosePortalStmt(node *nodes.ClosePortalStmt) string {
	p.addError(errors.New("ClosePortalStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printClusterStmt(node *nodes.ClusterStmt) string {
	p.addError(errors.New("ClusterStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCopyStmt(node *nodes.CopyStmt) string {
	p.addError(errors.New("CopyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDefineStmt(node *nodes.DefineStmt) string {
	p.addError(errors.New("DefineStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFetchStmt(node *nodes.FetchStmt) string {
	p.addError(errors.New("FetchStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printIndexStmt(node *nodes.IndexStmt) string {
	p.addError(errors.New("IndexStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterFunctionStmt(node *nodes.AlterFunctionStmt) string {
	p.addError(errors.New("AlterFunctionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDoStmt(node *nodes.DoStmt) string {
	p.addError(errors.New("DoStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printListenStmt(node *nodes.ListenStmt) string {
	p.addError(errors.New("ListenStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printUnlistenStmt(node *nodes.UnlistenStmt) string {
	p.addError(errors.New("UnlistenStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTransactionStmt(node *nodes.TransactionStmt) string {
	p.addError(errors.New("TransactionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printLoadStmt(node *nodes.LoadStmt) string {
	p.addError(errors.New("LoadStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateDomainStmt(node *nodes.CreateDomainStmt) string {
	p.addError(errors.New("CreateDomainStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatedbStmt(node *nodes.CreatedbStmt) string {
	p.addError(errors.New("CreatedbStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropdbStmt(node *nodes.DropdbStmt) string {
	p.addError(errors.New("DropdbStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVacuumStmt(node *nodes.VacuumStmt) string {
	p.addError(errors.New("VacuumStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateSeqStmt(node *nodes.CreateSeqStmt) string {
	p.addError(errors.New("CreateSeqStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterSeqStmt(node *nodes.AlterSeqStmt) string {
	p.addError(errors.New("AlterSeqStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVariableSetStmt(node *nodes.VariableSetStmt) string {
	p.addError(errors.New("VariableSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVariableShowStmt(node *nodes.VariableShowStmt) string {
	p.addError(errors.New("VariableShowStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDiscardStmt(node *nodes.DiscardStmt) string {
	p.addError(errors.New("DiscardStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateTrigStmt(node *nodes.CreateTrigStmt) string {
	p.addError(errors.New("CreateTrigStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatePlangStmt(node *nodes.CreatePlangStmt) string {
	p.addError(errors.New("CreatePLangStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateRoleStmt(node *nodes.CreateRoleStmt) string {
	p.addError(errors.New("CreateRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterRoleStmt(node *nodes.AlterRoleStmt) string {
	p.addError(errors.New("AlterRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropRoleStmt(node *nodes.DropRoleStmt) string {
	p.addError(errors.New("DropRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printConstraintsSetStmt(node *nodes.ConstraintsSetStmt) string {
	p.addError(errors.New("ConstraintsSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReindexStmt(node *nodes.ReindexStmt) string {
	p.addError(errors.New("ReindexStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCheckPointStmt(node *nodes.CheckPointStmt) string {
	p.addError(errors.New("CheckPointStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDatabaseStmt(node *nodes.AlterDatabaseStmt) string {
	p.addError(errors.New("AlterDatabaseStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDatabaseSetStmt(node *nodes.AlterDatabaseSetStmt) string {
	p.addError(errors.New("AlterDatabaseSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterRoleSetStmt(node *nodes.AlterRoleSetStmt) string {
	p.addError(errors.New("AlterRoleSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateConversionStmt(node *nodes.CreateConversionStmt) string {
	p.addError(errors.New("CreateConversionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateOpFamilyStmt(node *nodes.CreateOpFamilyStmt) string {
	p.addError(errors.New("CreateOpFamilyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterOpFamilyStmt(node *nodes.AlterOpFamilyStmt) string {
	p.addError(errors.New("AlterOpFamilyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPrepareStmt(node *nodes.PrepareStmt) string {
	p.addError(errors.New("PrepareStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printExecuteStmt(node *nodes.ExecuteStmt) string {
	p.addError(errors.New("ExecuteStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDeallocateStmt(node *nodes.DeallocateStmt) string {
	p.addError(errors.New("DeallocateStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDeclareCursorStmt(node *nodes.DeclareCursorStmt) string {
	p.addError(errors.New("DeclareCursorStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateTableSpaceStmt(node *nodes.CreateTableSpaceStmt) string {
	p.addError(errors.New("CreateTableSpaceStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropTableSpaceStmt(node *nodes.DropTableSpaceStmt) string {
	p.addError(errors.New("DropTableSpaceStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterObjectDependsStmt(node *nodes.AlterObjectDependsStmt) string {
	p.addError(errors.New("AlterObjectDependsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterOwnerStmt(node *nodes.AlterOwnerStmt) string {
	p.addError(errors.New("AlterOwnerStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterOperatorStmt(node *nodes.AlterOperatorStmt) string {
	p.addError(errors.New("AlterOperatorStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropOwnedStmt(node *nodes.DropOwnedStmt) string {
	p.addError(errors.New("DropOwnedStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReassignOwnedStmt(node *nodes.ReassignOwnedStmt) string {
	p.addError(errors.New("ReassignOwnedStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateRangeStmt(node *nodes.CreateRangeStmt) string {
	p.addError(errors.New("CreateRangeStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTsdictionaryStmt(node *nodes.AlterTsdictionaryStmt) string {
	p.addError(errors.New("AlterTSDictionaryStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTsconfigurationStmt(node *nodes.AlterTsconfigurationStmt) string {
	p.addError(errors.New("AlterTSConfigurationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateFdwStmt(node *nodes.CreateFdwStmt) string {
	p.addError(errors.New("CreateFdwStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterFdwStmt(node *nodes.AlterFdwStmt) string {
	p.addError(errors.New("AlterFdwStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateForeignServerStmt(node *nodes.CreateForeignServerStmt) string {
	p.addError(errors.New("CreateForeignServerStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterForeignServerStmt(node *nodes.AlterForeignServerStmt) string {
	p.addError(errors.New("AlterForeignServerStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateUserMappingStmt(node *nodes.CreateUserMappingStmt) string {
	p.addError(errors.New("CreateUserMappingStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterUserMappingStmt(node *nodes.AlterUserMappingStmt) string {
	p.addError(errors.New("AlterUserMappingStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropUserMappingStmt(node *nodes.DropUserMappingStmt) string {
	p.addError(errors.New("DropUserMappingStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTableSpaceOptionsStmt(node *nodes.AlterTableSpaceOptionsStmt) string {
	p.addError(errors.New("AlterTableSpaceOptionsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTableMoveAllStmt(node *nodes.AlterTableMoveAllStmt) string {
	p.addError(errors.New("AlterTableMoveAllStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSecLabelStmt(node *nodes.SecLabelStmt) string {
	p.addError(errors.New("SecLabelStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateForeignTableStmt(node *nodes.CreateForeignTableStmt) string {
	p.addError(errors.New("CreateForeignTableStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printImportForeignSchemaStmt(node *nodes.ImportForeignSchemaStmt) string {
	p.addError(errors.New("ImportForeignSchemaStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterExtensionStmt(node *nodes.AlterExtensionStmt) string {
	p.addError(errors.New("AlterExtensionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterExtensionContentsStmt(node *nodes.AlterExtensionContentsStmt) string {
	p.addError(errors.New("AlterExtensionContentsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateEventTrigStmt(node *nodes.CreateEventTrigStmt) string {
	p.addError(errors.New("CreateEventTrigStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterEventTrigStmt(node *nodes.AlterEventTrigStmt) string {
	p.addError(errors.New("AlterEventTrigStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRefreshMatViewStmt(node *nodes.RefreshMatViewStmt) string {
	p.addError(errors.New("RefreshMatViewStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReplicaIdentityStmt(node *nodes.ReplicaIdentityStmt) string {
	p.addError(errors.New("ReplicaIdentityStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterSystemStmt(node *nodes.AlterSystemStmt) string {
	p.addError(errors.New("AlterSystemStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatePolicyStmt(node *nodes.CreatePolicyStmt) string {
	p.addError(errors.New("CreatePolicyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterPolicyStmt(node *nodes.AlterPolicyStmt) string {
	p.addError(errors.New("AlterPolicyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateAmStmt(node *nodes.CreateAmStmt) string {
	p.addError(errors.New("CreateAmStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatePublicationStmt(node *nodes.CreatePublicationStmt) string {
	p.addError(errors.New("CreatePublicationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterPublicationStmt(node *nodes.AlterPublicationStmt) string {
	p.addError(errors.New("AlterPublicationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateSubscriptionStmt(node *nodes.CreateSubscriptionStmt) string {
	p.addError(errors.New("CreateSubscriptionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterSubscriptionStmt(node *nodes.AlterSubscriptionStmt) string {
	p.addError(errors.New("AlterSubscriptionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropSubscriptionStmt(node *nodes.DropSubscriptionStmt) string {
	p.addError(errors.New("DropSubscriptionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateStatsStmt(node *nodes.CreateStatsStmt) string {
	p.addError(errors.New("CreateStatsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterCollationStmt(node *nodes.AlterCollationStmt) string {
	p.addError(errors.New("AlterCollationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCallStmt(node *nodes.CallStmt) string {
	p.addError(errors.New("CallStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAIndices(node *nodes.AIndices) string {
	p.addError(errors.New("A_Indices not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAIndirection(node *nodes.AIndirection) string {
	p.addError(errors.New("A_Indirection not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCollateClause(node *nodes.CollateClause) string {
	p.addError(errors.New("CollateClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTableSample(node *nodes.RangeTableSample) string {
	p.addError(errors.New("RangeTableSample not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTableFunc(node *nodes.RangeTableFunc) string {
	p.addError(errors.New("RangeTableFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTableFuncCol(node *nodes.RangeTableFuncCol) string {
	p.addError(errors.New("RangeTableFuncCol not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTblEntry(node *nodes.RangeTblEntry) string {
	p.addError(errors.New("RangeTblEntry not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTblFunction(node *nodes.RangeTblFunction) string {
	p.addError(errors.New("RangeTblFunction not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTableSampleClause(node *nodes.TableSampleClause) string {
	p.addError(errors.New("TableSampleClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWithCheckOption(node *nodes.WithCheckOption) string {
	p.addError(errors.New("WithCheckOption not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSortGroupClause(node *nodes.SortGroupClause) string {
	p.addError(errors.New("SortGroupClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGroupingSet(node *nodes.GroupingSet) string {
	p.addError(errors.New("GroupingSet not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWindowClause(node *nodes.WindowClause) string {
	p.addError(errors.New("WindowClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAccessPriv(node *nodes.AccessPriv) string {
	p.addError(errors.New("AccessPriv not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTableLikeClause(node *nodes.TableLikeClause) string {
	p.addError(errors.New("TableLikeClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRowMarkClause(node *nodes.RowMarkClause) string {
	p.addError(errors.New("RowMarkClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printXmlSerialize(node *nodes.XmlSerialize) string {
	p.addError(errors.New("XmlSerialize not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printInferClause(node *nodes.InferClause) string {
	p.addError(errors.New("InferClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printOnConflictClause(node *nodes.OnConflictClause) string {
	p.addError(errors.New("OnConflictClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTriggerTransition(node *nodes.TriggerTransition) string {
	p.addError(errors.New("TriggerTransition not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionElem(node *nodes.PartitionElem) string {
	p.addError(errors.New("PartitionElem not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionSpec(node *nodes.PartitionSpec) string {
	p.addError(errors.New("PartitionSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionBoundSpec(node *nodes.PartitionBoundSpec) string {
	p.addError(errors.New("PartitionBoundSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionRangeDatum(node *nodes.PartitionRangeDatum) string {
	p.addError(errors.New("PartitionRangeDatum not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionCmd(node *nodes.PartitionCmd) string {
	p.addError(errors.New("PartitionCmd not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVacuumRelation(node *nodes.VacuumRelation) string {
	p.addError(errors.New("VacuumRelation not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printInlineCodeBlock(node *nodes.InlineCodeBlock) string {
	p.addError(errors.New("InlineCodeBlock not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCallContext(node *nodes.CallContext) string {
	p.addError(errors.New("CallContext not implemented"))
	return "NOT IMPLEMENTED"
}
