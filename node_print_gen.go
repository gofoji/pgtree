// Code generated by foji 0.3.7, template: foji/node_print.go.tpl; DO NOT EDIT.

package pgtree

import (
	"errors"
	"fmt"
	"reflect"
	"strings"
	"unsafe"

	nodes "github.com/pganalyze/pg_query_go/v6"
)

// Thanks to zerolog for this utility
func isNilValue(i interface{}) bool {
	return (*[2]uintptr)(unsafe.Pointer(&i))[1] == 0
}

func (p *printer) printNode(node *nodes.Node) (result string) {
	if node == nil || isNilValue(node) {
		return
	}
	p.level += 1
	defer func() {
		if p.debug {
			pad := p.pad(p.level - 1)
			t := reflect.TypeOf(node.Node)
			name := t.Name()
			if t.Kind() == reflect.Ptr {
				name = t.Elem().Name()
			}
			debugLine := fmt.Sprintln(pad + name + " = `" + strings.ReplaceAll(result, "\n", " \\n ") + "`")
			p.debugOutput = append([]string{debugLine}, p.debugOutput...)
		}
		p.level -= 1
	}()

	switch n := node.Node.(type) {

	case *nodes.Node_Integer:
		return p.printInteger(n.Integer)

	case *nodes.Node_Float:
		return p.printFloat(n.Float)

	case *nodes.Node_Boolean:
		return p.printBoolean(n.Boolean)

	case *nodes.Node_String_:
		return p.printString(n.String_)

	case *nodes.Node_BitString:
		return p.printBitString(n.BitString)

	case *nodes.Node_List:
		return p.printList(n.List)

	case *nodes.Node_OidList:
		return p.printOidList(n.OidList)

	case *nodes.Node_IntList:
		return p.printIntList(n.IntList)

	case *nodes.Node_AConst:
		return p.printAConst(n.AConst)

	case *nodes.Node_Alias:
		return p.printAlias(n.Alias)

	case *nodes.Node_RangeVar:
		return p.printRangeVar(n.RangeVar)

	case *nodes.Node_TableFunc:
		return p.printTableFunc(n.TableFunc)

	case *nodes.Node_IntoClause:
		return p.printIntoClause(n.IntoClause)

	case *nodes.Node_Var:
		return p.printVar(n.Var)

	case *nodes.Node_Param:
		return p.printParam(n.Param)

	case *nodes.Node_Aggref:
		return p.printAggref(n.Aggref)

	case *nodes.Node_GroupingFunc:
		return p.printGroupingFunc(n.GroupingFunc)

	case *nodes.Node_WindowFunc:
		return p.printWindowFunc(n.WindowFunc)

	case *nodes.Node_WindowFuncRunCondition:
		return p.printWindowFuncRunCondition(n.WindowFuncRunCondition)

	case *nodes.Node_MergeSupportFunc:
		return p.printMergeSupportFunc(n.MergeSupportFunc)

	case *nodes.Node_SubscriptingRef:
		return p.printSubscriptingRef(n.SubscriptingRef)

	case *nodes.Node_FuncExpr:
		return p.printFuncExpr(n.FuncExpr)

	case *nodes.Node_NamedArgExpr:
		return p.printNamedArgExpr(n.NamedArgExpr)

	case *nodes.Node_OpExpr:
		return p.printOpExpr(n.OpExpr)

	case *nodes.Node_DistinctExpr:
		return p.printDistinctExpr(n.DistinctExpr)

	case *nodes.Node_NullIfExpr:
		return p.printNullIfExpr(n.NullIfExpr)

	case *nodes.Node_ScalarArrayOpExpr:
		return p.printScalarArrayOpExpr(n.ScalarArrayOpExpr)

	case *nodes.Node_BoolExpr:
		return p.printBoolExpr(n.BoolExpr)

	case *nodes.Node_SubLink:
		return p.printSubLink(n.SubLink)

	case *nodes.Node_SubPlan:
		return p.printSubPlan(n.SubPlan)

	case *nodes.Node_AlternativeSubPlan:
		return p.printAlternativeSubPlan(n.AlternativeSubPlan)

	case *nodes.Node_FieldSelect:
		return p.printFieldSelect(n.FieldSelect)

	case *nodes.Node_FieldStore:
		return p.printFieldStore(n.FieldStore)

	case *nodes.Node_RelabelType:
		return p.printRelabelType(n.RelabelType)

	case *nodes.Node_CoerceViaIo:
		return p.printCoerceViaIo(n.CoerceViaIo)

	case *nodes.Node_ArrayCoerceExpr:
		return p.printArrayCoerceExpr(n.ArrayCoerceExpr)

	case *nodes.Node_ConvertRowtypeExpr:
		return p.printConvertRowtypeExpr(n.ConvertRowtypeExpr)

	case *nodes.Node_CollateExpr:
		return p.printCollateExpr(n.CollateExpr)

	case *nodes.Node_CaseExpr:
		return p.printCaseExpr(n.CaseExpr)

	case *nodes.Node_CaseWhen:
		return p.printCaseWhen(n.CaseWhen)

	case *nodes.Node_CaseTestExpr:
		return p.printCaseTestExpr(n.CaseTestExpr)

	case *nodes.Node_ArrayExpr:
		return p.printArrayExpr(n.ArrayExpr)

	case *nodes.Node_RowExpr:
		return p.printRowExpr(n.RowExpr)

	case *nodes.Node_RowCompareExpr:
		return p.printRowCompareExpr(n.RowCompareExpr)

	case *nodes.Node_CoalesceExpr:
		return p.printCoalesceExpr(n.CoalesceExpr)

	case *nodes.Node_MinMaxExpr:
		return p.printMinMaxExpr(n.MinMaxExpr)

	case *nodes.Node_SqlvalueFunction:
		return p.printSqlvalueFunction(n.SqlvalueFunction)

	case *nodes.Node_XmlExpr:
		return p.printXmlExpr(n.XmlExpr)

	case *nodes.Node_JsonFormat:
		return p.printJsonFormat(n.JsonFormat)

	case *nodes.Node_JsonReturning:
		return p.printJsonReturning(n.JsonReturning)

	case *nodes.Node_JsonValueExpr:
		return p.printJsonValueExpr(n.JsonValueExpr)

	case *nodes.Node_JsonConstructorExpr:
		return p.printJsonConstructorExpr(n.JsonConstructorExpr)

	case *nodes.Node_JsonIsPredicate:
		return p.printJsonIsPredicate(n.JsonIsPredicate)

	case *nodes.Node_JsonBehavior:
		return p.printJsonBehavior(n.JsonBehavior)

	case *nodes.Node_JsonExpr:
		return p.printJsonExpr(n.JsonExpr)

	case *nodes.Node_JsonTablePath:
		return p.printJsonTablePath(n.JsonTablePath)

	case *nodes.Node_JsonTablePathScan:
		return p.printJsonTablePathScan(n.JsonTablePathScan)

	case *nodes.Node_JsonTableSiblingJoin:
		return p.printJsonTableSiblingJoin(n.JsonTableSiblingJoin)

	case *nodes.Node_NullTest:
		return p.printNullTest(n.NullTest)

	case *nodes.Node_BooleanTest:
		return p.printBooleanTest(n.BooleanTest)

	case *nodes.Node_MergeAction:
		return p.printMergeAction(n.MergeAction)

	case *nodes.Node_CoerceToDomain:
		return p.printCoerceToDomain(n.CoerceToDomain)

	case *nodes.Node_CoerceToDomainValue:
		return p.printCoerceToDomainValue(n.CoerceToDomainValue)

	case *nodes.Node_SetToDefault:
		return p.printSetToDefault(n.SetToDefault)

	case *nodes.Node_CurrentOfExpr:
		return p.printCurrentOfExpr(n.CurrentOfExpr)

	case *nodes.Node_NextValueExpr:
		return p.printNextValueExpr(n.NextValueExpr)

	case *nodes.Node_InferenceElem:
		return p.printInferenceElem(n.InferenceElem)

	case *nodes.Node_TargetEntry:
		return p.printTargetEntry(n.TargetEntry)

	case *nodes.Node_RangeTblRef:
		return p.printRangeTblRef(n.RangeTblRef)

	case *nodes.Node_JoinExpr:
		return p.printJoinExpr(n.JoinExpr)

	case *nodes.Node_FromExpr:
		return p.printFromExpr(n.FromExpr)

	case *nodes.Node_OnConflictExpr:
		return p.printOnConflictExpr(n.OnConflictExpr)

	case *nodes.Node_Query:
		return p.printQuery(n.Query)

	case *nodes.Node_TypeName:
		return p.printTypeName(n.TypeName)

	case *nodes.Node_ColumnRef:
		return p.printColumnRef(n.ColumnRef)

	case *nodes.Node_ParamRef:
		return p.printParamRef(n.ParamRef)

	case *nodes.Node_AExpr:
		return p.printAExpr(n.AExpr)

	case *nodes.Node_TypeCast:
		return p.printTypeCast(n.TypeCast)

	case *nodes.Node_CollateClause:
		return p.printCollateClause(n.CollateClause)

	case *nodes.Node_RoleSpec:
		return p.printRoleSpec(n.RoleSpec)

	case *nodes.Node_FuncCall:
		return p.printFuncCall(n.FuncCall)

	case *nodes.Node_AStar:
		return p.printAStar(n.AStar)

	case *nodes.Node_AIndices:
		return p.printAIndices(n.AIndices)

	case *nodes.Node_AIndirection:
		return p.printAIndirection(n.AIndirection)

	case *nodes.Node_AArrayExpr:
		return p.printAArrayExpr(n.AArrayExpr)

	case *nodes.Node_ResTarget:
		return p.printResTarget(n.ResTarget)

	case *nodes.Node_MultiAssignRef:
		return p.printMultiAssignRef(n.MultiAssignRef)

	case *nodes.Node_SortBy:
		return p.printSortBy(n.SortBy)

	case *nodes.Node_WindowDef:
		return p.printWindowDef(n.WindowDef)

	case *nodes.Node_RangeSubselect:
		return p.printRangeSubselect(n.RangeSubselect)

	case *nodes.Node_RangeFunction:
		return p.printRangeFunction(n.RangeFunction)

	case *nodes.Node_RangeTableFunc:
		return p.printRangeTableFunc(n.RangeTableFunc)

	case *nodes.Node_RangeTableFuncCol:
		return p.printRangeTableFuncCol(n.RangeTableFuncCol)

	case *nodes.Node_RangeTableSample:
		return p.printRangeTableSample(n.RangeTableSample)

	case *nodes.Node_ColumnDef:
		return p.printColumnDef(n.ColumnDef)

	case *nodes.Node_TableLikeClause:
		return p.printTableLikeClause(n.TableLikeClause)

	case *nodes.Node_IndexElem:
		return p.printIndexElem(n.IndexElem)

	case *nodes.Node_DefElem:
		return p.printDefElem(n.DefElem)

	case *nodes.Node_LockingClause:
		return p.printLockingClause(n.LockingClause)

	case *nodes.Node_XmlSerialize:
		return p.printXmlSerialize(n.XmlSerialize)

	case *nodes.Node_PartitionElem:
		return p.printPartitionElem(n.PartitionElem)

	case *nodes.Node_PartitionSpec:
		return p.printPartitionSpec(n.PartitionSpec)

	case *nodes.Node_PartitionBoundSpec:
		return p.printPartitionBoundSpec(n.PartitionBoundSpec)

	case *nodes.Node_PartitionRangeDatum:
		return p.printPartitionRangeDatum(n.PartitionRangeDatum)

	case *nodes.Node_SinglePartitionSpec:
		return p.printSinglePartitionSpec(n.SinglePartitionSpec)

	case *nodes.Node_PartitionCmd:
		return p.printPartitionCmd(n.PartitionCmd)

	case *nodes.Node_RangeTblEntry:
		return p.printRangeTblEntry(n.RangeTblEntry)

	case *nodes.Node_RtepermissionInfo:
		return p.printRtepermissionInfo(n.RtepermissionInfo)

	case *nodes.Node_RangeTblFunction:
		return p.printRangeTblFunction(n.RangeTblFunction)

	case *nodes.Node_TableSampleClause:
		return p.printTableSampleClause(n.TableSampleClause)

	case *nodes.Node_WithCheckOption:
		return p.printWithCheckOption(n.WithCheckOption)

	case *nodes.Node_SortGroupClause:
		return p.printSortGroupClause(n.SortGroupClause)

	case *nodes.Node_GroupingSet:
		return p.printGroupingSet(n.GroupingSet)

	case *nodes.Node_WindowClause:
		return p.printWindowClause(n.WindowClause)

	case *nodes.Node_RowMarkClause:
		return p.printRowMarkClause(n.RowMarkClause)

	case *nodes.Node_WithClause:
		return p.printWithClause(n.WithClause)

	case *nodes.Node_InferClause:
		return p.printInferClause(n.InferClause)

	case *nodes.Node_OnConflictClause:
		return p.printOnConflictClause(n.OnConflictClause)

	case *nodes.Node_CtesearchClause:
		return p.printCtesearchClause(n.CtesearchClause)

	case *nodes.Node_CtecycleClause:
		return p.printCtecycleClause(n.CtecycleClause)

	case *nodes.Node_CommonTableExpr:
		return p.printCommonTableExpr(n.CommonTableExpr)

	case *nodes.Node_MergeWhenClause:
		return p.printMergeWhenClause(n.MergeWhenClause)

	case *nodes.Node_TriggerTransition:
		return p.printTriggerTransition(n.TriggerTransition)

	case *nodes.Node_JsonOutput:
		return p.printJsonOutput(n.JsonOutput)

	case *nodes.Node_JsonArgument:
		return p.printJsonArgument(n.JsonArgument)

	case *nodes.Node_JsonFuncExpr:
		return p.printJsonFuncExpr(n.JsonFuncExpr)

	case *nodes.Node_JsonTablePathSpec:
		return p.printJsonTablePathSpec(n.JsonTablePathSpec)

	case *nodes.Node_JsonTable:
		return p.printJsonTable(n.JsonTable)

	case *nodes.Node_JsonTableColumn:
		return p.printJsonTableColumn(n.JsonTableColumn)

	case *nodes.Node_JsonKeyValue:
		return p.printJsonKeyValue(n.JsonKeyValue)

	case *nodes.Node_JsonParseExpr:
		return p.printJsonParseExpr(n.JsonParseExpr)

	case *nodes.Node_JsonScalarExpr:
		return p.printJsonScalarExpr(n.JsonScalarExpr)

	case *nodes.Node_JsonSerializeExpr:
		return p.printJsonSerializeExpr(n.JsonSerializeExpr)

	case *nodes.Node_JsonObjectConstructor:
		return p.printJsonObjectConstructor(n.JsonObjectConstructor)

	case *nodes.Node_JsonArrayConstructor:
		return p.printJsonArrayConstructor(n.JsonArrayConstructor)

	case *nodes.Node_JsonArrayQueryConstructor:
		return p.printJsonArrayQueryConstructor(n.JsonArrayQueryConstructor)

	case *nodes.Node_JsonAggConstructor:
		return p.printJsonAggConstructor(n.JsonAggConstructor)

	case *nodes.Node_JsonObjectAgg:
		return p.printJsonObjectAgg(n.JsonObjectAgg)

	case *nodes.Node_JsonArrayAgg:
		return p.printJsonArrayAgg(n.JsonArrayAgg)

	case *nodes.Node_RawStmt:
		return p.printRawStmt(n.RawStmt)

	case *nodes.Node_InsertStmt:
		return p.printInsertStmt(n.InsertStmt)

	case *nodes.Node_DeleteStmt:
		return p.printDeleteStmt(n.DeleteStmt)

	case *nodes.Node_UpdateStmt:
		return p.printUpdateStmt(n.UpdateStmt)

	case *nodes.Node_MergeStmt:
		return p.printMergeStmt(n.MergeStmt)

	case *nodes.Node_SelectStmt:
		return p.printSelectStmt(n.SelectStmt)

	case *nodes.Node_SetOperationStmt:
		return p.printSetOperationStmt(n.SetOperationStmt)

	case *nodes.Node_ReturnStmt:
		return p.printReturnStmt(n.ReturnStmt)

	case *nodes.Node_PlassignStmt:
		return p.printPlassignStmt(n.PlassignStmt)

	case *nodes.Node_CreateSchemaStmt:
		return p.printCreateSchemaStmt(n.CreateSchemaStmt)

	case *nodes.Node_AlterTableStmt:
		return p.printAlterTableStmt(n.AlterTableStmt)

	case *nodes.Node_ReplicaIdentityStmt:
		return p.printReplicaIdentityStmt(n.ReplicaIdentityStmt)

	case *nodes.Node_AlterTableCmd:
		return p.printAlterTableCmd(n.AlterTableCmd)

	case *nodes.Node_AlterCollationStmt:
		return p.printAlterCollationStmt(n.AlterCollationStmt)

	case *nodes.Node_AlterDomainStmt:
		return p.printAlterDomainStmt(n.AlterDomainStmt)

	case *nodes.Node_GrantStmt:
		return p.printGrantStmt(n.GrantStmt)

	case *nodes.Node_ObjectWithArgs:
		return p.printObjectWithArgs(n.ObjectWithArgs)

	case *nodes.Node_AccessPriv:
		return p.printAccessPriv(n.AccessPriv)

	case *nodes.Node_GrantRoleStmt:
		return p.printGrantRoleStmt(n.GrantRoleStmt)

	case *nodes.Node_AlterDefaultPrivilegesStmt:
		return p.printAlterDefaultPrivilegesStmt(n.AlterDefaultPrivilegesStmt)

	case *nodes.Node_CopyStmt:
		return p.printCopyStmt(n.CopyStmt)

	case *nodes.Node_VariableSetStmt:
		return p.printVariableSetStmt(n.VariableSetStmt)

	case *nodes.Node_VariableShowStmt:
		return p.printVariableShowStmt(n.VariableShowStmt)

	case *nodes.Node_CreateStmt:
		return p.printCreateStmt(n.CreateStmt)

	case *nodes.Node_Constraint:
		return p.printConstraint(n.Constraint)

	case *nodes.Node_CreateTableSpaceStmt:
		return p.printCreateTableSpaceStmt(n.CreateTableSpaceStmt)

	case *nodes.Node_DropTableSpaceStmt:
		return p.printDropTableSpaceStmt(n.DropTableSpaceStmt)

	case *nodes.Node_AlterTableSpaceOptionsStmt:
		return p.printAlterTableSpaceOptionsStmt(n.AlterTableSpaceOptionsStmt)

	case *nodes.Node_AlterTableMoveAllStmt:
		return p.printAlterTableMoveAllStmt(n.AlterTableMoveAllStmt)

	case *nodes.Node_CreateExtensionStmt:
		return p.printCreateExtensionStmt(n.CreateExtensionStmt)

	case *nodes.Node_AlterExtensionStmt:
		return p.printAlterExtensionStmt(n.AlterExtensionStmt)

	case *nodes.Node_AlterExtensionContentsStmt:
		return p.printAlterExtensionContentsStmt(n.AlterExtensionContentsStmt)

	case *nodes.Node_CreateFdwStmt:
		return p.printCreateFdwStmt(n.CreateFdwStmt)

	case *nodes.Node_AlterFdwStmt:
		return p.printAlterFdwStmt(n.AlterFdwStmt)

	case *nodes.Node_CreateForeignServerStmt:
		return p.printCreateForeignServerStmt(n.CreateForeignServerStmt)

	case *nodes.Node_AlterForeignServerStmt:
		return p.printAlterForeignServerStmt(n.AlterForeignServerStmt)

	case *nodes.Node_CreateForeignTableStmt:
		return p.printCreateForeignTableStmt(n.CreateForeignTableStmt)

	case *nodes.Node_CreateUserMappingStmt:
		return p.printCreateUserMappingStmt(n.CreateUserMappingStmt)

	case *nodes.Node_AlterUserMappingStmt:
		return p.printAlterUserMappingStmt(n.AlterUserMappingStmt)

	case *nodes.Node_DropUserMappingStmt:
		return p.printDropUserMappingStmt(n.DropUserMappingStmt)

	case *nodes.Node_ImportForeignSchemaStmt:
		return p.printImportForeignSchemaStmt(n.ImportForeignSchemaStmt)

	case *nodes.Node_CreatePolicyStmt:
		return p.printCreatePolicyStmt(n.CreatePolicyStmt)

	case *nodes.Node_AlterPolicyStmt:
		return p.printAlterPolicyStmt(n.AlterPolicyStmt)

	case *nodes.Node_CreateAmStmt:
		return p.printCreateAmStmt(n.CreateAmStmt)

	case *nodes.Node_CreateTrigStmt:
		return p.printCreateTrigStmt(n.CreateTrigStmt)

	case *nodes.Node_CreateEventTrigStmt:
		return p.printCreateEventTrigStmt(n.CreateEventTrigStmt)

	case *nodes.Node_AlterEventTrigStmt:
		return p.printAlterEventTrigStmt(n.AlterEventTrigStmt)

	case *nodes.Node_CreatePlangStmt:
		return p.printCreatePlangStmt(n.CreatePlangStmt)

	case *nodes.Node_CreateRoleStmt:
		return p.printCreateRoleStmt(n.CreateRoleStmt)

	case *nodes.Node_AlterRoleStmt:
		return p.printAlterRoleStmt(n.AlterRoleStmt)

	case *nodes.Node_AlterRoleSetStmt:
		return p.printAlterRoleSetStmt(n.AlterRoleSetStmt)

	case *nodes.Node_DropRoleStmt:
		return p.printDropRoleStmt(n.DropRoleStmt)

	case *nodes.Node_CreateSeqStmt:
		return p.printCreateSeqStmt(n.CreateSeqStmt)

	case *nodes.Node_AlterSeqStmt:
		return p.printAlterSeqStmt(n.AlterSeqStmt)

	case *nodes.Node_DefineStmt:
		return p.printDefineStmt(n.DefineStmt)

	case *nodes.Node_CreateDomainStmt:
		return p.printCreateDomainStmt(n.CreateDomainStmt)

	case *nodes.Node_CreateOpClassStmt:
		return p.printCreateOpClassStmt(n.CreateOpClassStmt)

	case *nodes.Node_CreateOpClassItem:
		return p.printCreateOpClassItem(n.CreateOpClassItem)

	case *nodes.Node_CreateOpFamilyStmt:
		return p.printCreateOpFamilyStmt(n.CreateOpFamilyStmt)

	case *nodes.Node_AlterOpFamilyStmt:
		return p.printAlterOpFamilyStmt(n.AlterOpFamilyStmt)

	case *nodes.Node_DropStmt:
		return p.printDropStmt(n.DropStmt)

	case *nodes.Node_TruncateStmt:
		return p.printTruncateStmt(n.TruncateStmt)

	case *nodes.Node_CommentStmt:
		return p.printCommentStmt(n.CommentStmt)

	case *nodes.Node_SecLabelStmt:
		return p.printSecLabelStmt(n.SecLabelStmt)

	case *nodes.Node_DeclareCursorStmt:
		return p.printDeclareCursorStmt(n.DeclareCursorStmt)

	case *nodes.Node_ClosePortalStmt:
		return p.printClosePortalStmt(n.ClosePortalStmt)

	case *nodes.Node_FetchStmt:
		return p.printFetchStmt(n.FetchStmt)

	case *nodes.Node_IndexStmt:
		return p.printIndexStmt(n.IndexStmt)

	case *nodes.Node_CreateStatsStmt:
		return p.printCreateStatsStmt(n.CreateStatsStmt)

	case *nodes.Node_StatsElem:
		return p.printStatsElem(n.StatsElem)

	case *nodes.Node_AlterStatsStmt:
		return p.printAlterStatsStmt(n.AlterStatsStmt)

	case *nodes.Node_CreateFunctionStmt:
		return p.printCreateFunctionStmt(n.CreateFunctionStmt)

	case *nodes.Node_FunctionParameter:
		return p.printFunctionParameter(n.FunctionParameter)

	case *nodes.Node_AlterFunctionStmt:
		return p.printAlterFunctionStmt(n.AlterFunctionStmt)

	case *nodes.Node_DoStmt:
		return p.printDoStmt(n.DoStmt)

	case *nodes.Node_InlineCodeBlock:
		return p.printInlineCodeBlock(n.InlineCodeBlock)

	case *nodes.Node_CallStmt:
		return p.printCallStmt(n.CallStmt)

	case *nodes.Node_CallContext:
		return p.printCallContext(n.CallContext)

	case *nodes.Node_RenameStmt:
		return p.printRenameStmt(n.RenameStmt)

	case *nodes.Node_AlterObjectDependsStmt:
		return p.printAlterObjectDependsStmt(n.AlterObjectDependsStmt)

	case *nodes.Node_AlterObjectSchemaStmt:
		return p.printAlterObjectSchemaStmt(n.AlterObjectSchemaStmt)

	case *nodes.Node_AlterOwnerStmt:
		return p.printAlterOwnerStmt(n.AlterOwnerStmt)

	case *nodes.Node_AlterOperatorStmt:
		return p.printAlterOperatorStmt(n.AlterOperatorStmt)

	case *nodes.Node_AlterTypeStmt:
		return p.printAlterTypeStmt(n.AlterTypeStmt)

	case *nodes.Node_RuleStmt:
		return p.printRuleStmt(n.RuleStmt)

	case *nodes.Node_NotifyStmt:
		return p.printNotifyStmt(n.NotifyStmt)

	case *nodes.Node_ListenStmt:
		return p.printListenStmt(n.ListenStmt)

	case *nodes.Node_UnlistenStmt:
		return p.printUnlistenStmt(n.UnlistenStmt)

	case *nodes.Node_TransactionStmt:
		return p.printTransactionStmt(n.TransactionStmt)

	case *nodes.Node_CompositeTypeStmt:
		return p.printCompositeTypeStmt(n.CompositeTypeStmt)

	case *nodes.Node_CreateEnumStmt:
		return p.printCreateEnumStmt(n.CreateEnumStmt)

	case *nodes.Node_CreateRangeStmt:
		return p.printCreateRangeStmt(n.CreateRangeStmt)

	case *nodes.Node_AlterEnumStmt:
		return p.printAlterEnumStmt(n.AlterEnumStmt)

	case *nodes.Node_ViewStmt:
		return p.printViewStmt(n.ViewStmt)

	case *nodes.Node_LoadStmt:
		return p.printLoadStmt(n.LoadStmt)

	case *nodes.Node_CreatedbStmt:
		return p.printCreatedbStmt(n.CreatedbStmt)

	case *nodes.Node_AlterDatabaseStmt:
		return p.printAlterDatabaseStmt(n.AlterDatabaseStmt)

	case *nodes.Node_AlterDatabaseRefreshCollStmt:
		return p.printAlterDatabaseRefreshCollStmt(n.AlterDatabaseRefreshCollStmt)

	case *nodes.Node_AlterDatabaseSetStmt:
		return p.printAlterDatabaseSetStmt(n.AlterDatabaseSetStmt)

	case *nodes.Node_DropdbStmt:
		return p.printDropdbStmt(n.DropdbStmt)

	case *nodes.Node_AlterSystemStmt:
		return p.printAlterSystemStmt(n.AlterSystemStmt)

	case *nodes.Node_ClusterStmt:
		return p.printClusterStmt(n.ClusterStmt)

	case *nodes.Node_VacuumStmt:
		return p.printVacuumStmt(n.VacuumStmt)

	case *nodes.Node_VacuumRelation:
		return p.printVacuumRelation(n.VacuumRelation)

	case *nodes.Node_ExplainStmt:
		return p.printExplainStmt(n.ExplainStmt)

	case *nodes.Node_CreateTableAsStmt:
		return p.printCreateTableAsStmt(n.CreateTableAsStmt)

	case *nodes.Node_RefreshMatViewStmt:
		return p.printRefreshMatViewStmt(n.RefreshMatViewStmt)

	case *nodes.Node_CheckPointStmt:
		return p.printCheckPointStmt(n.CheckPointStmt)

	case *nodes.Node_DiscardStmt:
		return p.printDiscardStmt(n.DiscardStmt)

	case *nodes.Node_LockStmt:
		return p.printLockStmt(n.LockStmt)

	case *nodes.Node_ConstraintsSetStmt:
		return p.printConstraintsSetStmt(n.ConstraintsSetStmt)

	case *nodes.Node_ReindexStmt:
		return p.printReindexStmt(n.ReindexStmt)

	case *nodes.Node_CreateConversionStmt:
		return p.printCreateConversionStmt(n.CreateConversionStmt)

	case *nodes.Node_CreateCastStmt:
		return p.printCreateCastStmt(n.CreateCastStmt)

	case *nodes.Node_CreateTransformStmt:
		return p.printCreateTransformStmt(n.CreateTransformStmt)

	case *nodes.Node_PrepareStmt:
		return p.printPrepareStmt(n.PrepareStmt)

	case *nodes.Node_ExecuteStmt:
		return p.printExecuteStmt(n.ExecuteStmt)

	case *nodes.Node_DeallocateStmt:
		return p.printDeallocateStmt(n.DeallocateStmt)

	case *nodes.Node_DropOwnedStmt:
		return p.printDropOwnedStmt(n.DropOwnedStmt)

	case *nodes.Node_ReassignOwnedStmt:
		return p.printReassignOwnedStmt(n.ReassignOwnedStmt)

	case *nodes.Node_AlterTsdictionaryStmt:
		return p.printAlterTsdictionaryStmt(n.AlterTsdictionaryStmt)

	case *nodes.Node_AlterTsconfigurationStmt:
		return p.printAlterTsconfigurationStmt(n.AlterTsconfigurationStmt)

	case *nodes.Node_PublicationTable:
		return p.printPublicationTable(n.PublicationTable)

	case *nodes.Node_PublicationObjSpec:
		return p.printPublicationObjSpec(n.PublicationObjSpec)

	case *nodes.Node_CreatePublicationStmt:
		return p.printCreatePublicationStmt(n.CreatePublicationStmt)

	case *nodes.Node_AlterPublicationStmt:
		return p.printAlterPublicationStmt(n.AlterPublicationStmt)

	case *nodes.Node_CreateSubscriptionStmt:
		return p.printCreateSubscriptionStmt(n.CreateSubscriptionStmt)

	case *nodes.Node_AlterSubscriptionStmt:
		return p.printAlterSubscriptionStmt(n.AlterSubscriptionStmt)

	case *nodes.Node_DropSubscriptionStmt:
		return p.printDropSubscriptionStmt(n.DropSubscriptionStmt)

	default:
		if node.Node != nil {
			p.addError(errors.New("unhandled node type: " + reflect.TypeOf(node.Node).String()))
		}
	}

	return result
}

func (p *printer) printOidList(node *nodes.OidList) string {
	p.addError(errors.New("OidList not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printIntList(node *nodes.IntList) string {
	p.addError(errors.New("IntList not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTableFunc(node *nodes.TableFunc) string {
	p.addError(errors.New("TableFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVar(node *nodes.Var) string {
	p.addError(errors.New("Var not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printParam(node *nodes.Param) string {
	p.addError(errors.New("Param not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAggref(node *nodes.Aggref) string {
	p.addError(errors.New("Aggref not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGroupingFunc(node *nodes.GroupingFunc) string {
	p.addError(errors.New("GroupingFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWindowFunc(node *nodes.WindowFunc) string {
	p.addError(errors.New("WindowFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWindowFuncRunCondition(node *nodes.WindowFuncRunCondition) string {
	p.addError(errors.New("WindowFuncRunCondition not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printMergeSupportFunc(node *nodes.MergeSupportFunc) string {
	p.addError(errors.New("MergeSupportFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSubscriptingRef(node *nodes.SubscriptingRef) string {
	p.addError(errors.New("SubscriptingRef not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFuncExpr(node *nodes.FuncExpr) string {
	p.addError(errors.New("FuncExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printOpExpr(node *nodes.OpExpr) string {
	p.addError(errors.New("OpExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDistinctExpr(node *nodes.DistinctExpr) string {
	p.addError(errors.New("DistinctExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printNullIfExpr(node *nodes.NullIfExpr) string {
	p.addError(errors.New("NullIfExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printScalarArrayOpExpr(node *nodes.ScalarArrayOpExpr) string {
	p.addError(errors.New("ScalarArrayOpExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSubPlan(node *nodes.SubPlan) string {
	p.addError(errors.New("SubPlan not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlternativeSubPlan(node *nodes.AlternativeSubPlan) string {
	p.addError(errors.New("AlternativeSubPlan not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFieldSelect(node *nodes.FieldSelect) string {
	p.addError(errors.New("FieldSelect not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFieldStore(node *nodes.FieldStore) string {
	p.addError(errors.New("FieldStore not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRelabelType(node *nodes.RelabelType) string {
	p.addError(errors.New("RelabelType not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCoerceViaIo(node *nodes.CoerceViaIO) string {
	p.addError(errors.New("CoerceViaIO not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printArrayCoerceExpr(node *nodes.ArrayCoerceExpr) string {
	p.addError(errors.New("ArrayCoerceExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printConvertRowtypeExpr(node *nodes.ConvertRowtypeExpr) string {
	p.addError(errors.New("ConvertRowtypeExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCollateExpr(node *nodes.CollateExpr) string {
	p.addError(errors.New("CollateExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCaseTestExpr(node *nodes.CaseTestExpr) string {
	p.addError(errors.New("CaseTestExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printArrayExpr(node *nodes.ArrayExpr) string {
	p.addError(errors.New("ArrayExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRowCompareExpr(node *nodes.RowCompareExpr) string {
	p.addError(errors.New("RowCompareExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printMinMaxExpr(node *nodes.MinMaxExpr) string {
	p.addError(errors.New("MinMaxExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printXmlExpr(node *nodes.XmlExpr) string {
	p.addError(errors.New("XmlExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonFormat(node *nodes.JsonFormat) string {
	p.addError(errors.New("JsonFormat not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonReturning(node *nodes.JsonReturning) string {
	p.addError(errors.New("JsonReturning not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonValueExpr(node *nodes.JsonValueExpr) string {
	p.addError(errors.New("JsonValueExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonConstructorExpr(node *nodes.JsonConstructorExpr) string {
	p.addError(errors.New("JsonConstructorExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonIsPredicate(node *nodes.JsonIsPredicate) string {
	p.addError(errors.New("JsonIsPredicate not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonBehavior(node *nodes.JsonBehavior) string {
	p.addError(errors.New("JsonBehavior not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonExpr(node *nodes.JsonExpr) string {
	p.addError(errors.New("JsonExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonTablePath(node *nodes.JsonTablePath) string {
	p.addError(errors.New("JsonTablePath not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonTablePathScan(node *nodes.JsonTablePathScan) string {
	p.addError(errors.New("JsonTablePathScan not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonTableSiblingJoin(node *nodes.JsonTableSiblingJoin) string {
	p.addError(errors.New("JsonTableSiblingJoin not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printBooleanTest(node *nodes.BooleanTest) string {
	p.addError(errors.New("BooleanTest not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printMergeAction(node *nodes.MergeAction) string {
	p.addError(errors.New("MergeAction not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCoerceToDomain(node *nodes.CoerceToDomain) string {
	p.addError(errors.New("CoerceToDomain not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCoerceToDomainValue(node *nodes.CoerceToDomainValue) string {
	p.addError(errors.New("CoerceToDomainValue not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printNextValueExpr(node *nodes.NextValueExpr) string {
	p.addError(errors.New("NextValueExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printInferenceElem(node *nodes.InferenceElem) string {
	p.addError(errors.New("InferenceElem not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTargetEntry(node *nodes.TargetEntry) string {
	p.addError(errors.New("TargetEntry not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTblRef(node *nodes.RangeTblRef) string {
	p.addError(errors.New("RangeTblRef not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFromExpr(node *nodes.FromExpr) string {
	p.addError(errors.New("FromExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printOnConflictExpr(node *nodes.OnConflictExpr) string {
	p.addError(errors.New("OnConflictExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printQuery(node *nodes.Query) string {
	p.addError(errors.New("Query not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCollateClause(node *nodes.CollateClause) string {
	p.addError(errors.New("CollateClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAIndices(node *nodes.A_Indices) string {
	p.addError(errors.New("A_Indices not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAIndirection(node *nodes.A_Indirection) string {
	p.addError(errors.New("A_Indirection not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTableFunc(node *nodes.RangeTableFunc) string {
	p.addError(errors.New("RangeTableFunc not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTableFuncCol(node *nodes.RangeTableFuncCol) string {
	p.addError(errors.New("RangeTableFuncCol not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTableSample(node *nodes.RangeTableSample) string {
	p.addError(errors.New("RangeTableSample not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTableLikeClause(node *nodes.TableLikeClause) string {
	p.addError(errors.New("TableLikeClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printXmlSerialize(node *nodes.XmlSerialize) string {
	p.addError(errors.New("XmlSerialize not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionElem(node *nodes.PartitionElem) string {
	p.addError(errors.New("PartitionElem not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionSpec(node *nodes.PartitionSpec) string {
	p.addError(errors.New("PartitionSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionBoundSpec(node *nodes.PartitionBoundSpec) string {
	p.addError(errors.New("PartitionBoundSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionRangeDatum(node *nodes.PartitionRangeDatum) string {
	p.addError(errors.New("PartitionRangeDatum not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSinglePartitionSpec(node *nodes.SinglePartitionSpec) string {
	p.addError(errors.New("SinglePartitionSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPartitionCmd(node *nodes.PartitionCmd) string {
	p.addError(errors.New("PartitionCmd not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTblEntry(node *nodes.RangeTblEntry) string {
	p.addError(errors.New("RangeTblEntry not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRtepermissionInfo(node *nodes.RTEPermissionInfo) string {
	p.addError(errors.New("RTEPermissionInfo not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRangeTblFunction(node *nodes.RangeTblFunction) string {
	p.addError(errors.New("RangeTblFunction not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTableSampleClause(node *nodes.TableSampleClause) string {
	p.addError(errors.New("TableSampleClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWithCheckOption(node *nodes.WithCheckOption) string {
	p.addError(errors.New("WithCheckOption not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSortGroupClause(node *nodes.SortGroupClause) string {
	p.addError(errors.New("SortGroupClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGroupingSet(node *nodes.GroupingSet) string {
	p.addError(errors.New("GroupingSet not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printWindowClause(node *nodes.WindowClause) string {
	p.addError(errors.New("WindowClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRowMarkClause(node *nodes.RowMarkClause) string {
	p.addError(errors.New("RowMarkClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printInferClause(node *nodes.InferClause) string {
	p.addError(errors.New("InferClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printOnConflictClause(node *nodes.OnConflictClause) string {
	p.addError(errors.New("OnConflictClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCtesearchClause(node *nodes.CTESearchClause) string {
	p.addError(errors.New("CTESearchClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCtecycleClause(node *nodes.CTECycleClause) string {
	p.addError(errors.New("CTECycleClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printMergeWhenClause(node *nodes.MergeWhenClause) string {
	p.addError(errors.New("MergeWhenClause not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTriggerTransition(node *nodes.TriggerTransition) string {
	p.addError(errors.New("TriggerTransition not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonOutput(node *nodes.JsonOutput) string {
	p.addError(errors.New("JsonOutput not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonArgument(node *nodes.JsonArgument) string {
	p.addError(errors.New("JsonArgument not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonFuncExpr(node *nodes.JsonFuncExpr) string {
	p.addError(errors.New("JsonFuncExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonTablePathSpec(node *nodes.JsonTablePathSpec) string {
	p.addError(errors.New("JsonTablePathSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonTable(node *nodes.JsonTable) string {
	p.addError(errors.New("JsonTable not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonTableColumn(node *nodes.JsonTableColumn) string {
	p.addError(errors.New("JsonTableColumn not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonKeyValue(node *nodes.JsonKeyValue) string {
	p.addError(errors.New("JsonKeyValue not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonParseExpr(node *nodes.JsonParseExpr) string {
	p.addError(errors.New("JsonParseExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonScalarExpr(node *nodes.JsonScalarExpr) string {
	p.addError(errors.New("JsonScalarExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonSerializeExpr(node *nodes.JsonSerializeExpr) string {
	p.addError(errors.New("JsonSerializeExpr not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonObjectConstructor(node *nodes.JsonObjectConstructor) string {
	p.addError(errors.New("JsonObjectConstructor not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonArrayConstructor(node *nodes.JsonArrayConstructor) string {
	p.addError(errors.New("JsonArrayConstructor not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonArrayQueryConstructor(node *nodes.JsonArrayQueryConstructor) string {
	p.addError(errors.New("JsonArrayQueryConstructor not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonAggConstructor(node *nodes.JsonAggConstructor) string {
	p.addError(errors.New("JsonAggConstructor not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonObjectAgg(node *nodes.JsonObjectAgg) string {
	p.addError(errors.New("JsonObjectAgg not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printJsonArrayAgg(node *nodes.JsonArrayAgg) string {
	p.addError(errors.New("JsonArrayAgg not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printMergeStmt(node *nodes.MergeStmt) string {
	p.addError(errors.New("MergeStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSetOperationStmt(node *nodes.SetOperationStmt) string {
	p.addError(errors.New("SetOperationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReturnStmt(node *nodes.ReturnStmt) string {
	p.addError(errors.New("ReturnStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPlassignStmt(node *nodes.PLAssignStmt) string {
	p.addError(errors.New("PLAssignStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReplicaIdentityStmt(node *nodes.ReplicaIdentityStmt) string {
	p.addError(errors.New("ReplicaIdentityStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterCollationStmt(node *nodes.AlterCollationStmt) string {
	p.addError(errors.New("AlterCollationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDomainStmt(node *nodes.AlterDomainStmt) string {
	p.addError(errors.New("AlterDomainStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGrantStmt(node *nodes.GrantStmt) string {
	p.addError(errors.New("GrantStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAccessPriv(node *nodes.AccessPriv) string {
	p.addError(errors.New("AccessPriv not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printGrantRoleStmt(node *nodes.GrantRoleStmt) string {
	p.addError(errors.New("GrantRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDefaultPrivilegesStmt(node *nodes.AlterDefaultPrivilegesStmt) string {
	p.addError(errors.New("AlterDefaultPrivilegesStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCopyStmt(node *nodes.CopyStmt) string {
	p.addError(errors.New("CopyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVariableSetStmt(node *nodes.VariableSetStmt) string {
	p.addError(errors.New("VariableSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVariableShowStmt(node *nodes.VariableShowStmt) string {
	p.addError(errors.New("VariableShowStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateTableSpaceStmt(node *nodes.CreateTableSpaceStmt) string {
	p.addError(errors.New("CreateTableSpaceStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropTableSpaceStmt(node *nodes.DropTableSpaceStmt) string {
	p.addError(errors.New("DropTableSpaceStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTableSpaceOptionsStmt(node *nodes.AlterTableSpaceOptionsStmt) string {
	p.addError(errors.New("AlterTableSpaceOptionsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTableMoveAllStmt(node *nodes.AlterTableMoveAllStmt) string {
	p.addError(errors.New("AlterTableMoveAllStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterExtensionStmt(node *nodes.AlterExtensionStmt) string {
	p.addError(errors.New("AlterExtensionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterExtensionContentsStmt(node *nodes.AlterExtensionContentsStmt) string {
	p.addError(errors.New("AlterExtensionContentsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateFdwStmt(node *nodes.CreateFdwStmt) string {
	p.addError(errors.New("CreateFdwStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterFdwStmt(node *nodes.AlterFdwStmt) string {
	p.addError(errors.New("AlterFdwStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateForeignServerStmt(node *nodes.CreateForeignServerStmt) string {
	p.addError(errors.New("CreateForeignServerStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterForeignServerStmt(node *nodes.AlterForeignServerStmt) string {
	p.addError(errors.New("AlterForeignServerStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateForeignTableStmt(node *nodes.CreateForeignTableStmt) string {
	p.addError(errors.New("CreateForeignTableStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateUserMappingStmt(node *nodes.CreateUserMappingStmt) string {
	p.addError(errors.New("CreateUserMappingStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterUserMappingStmt(node *nodes.AlterUserMappingStmt) string {
	p.addError(errors.New("AlterUserMappingStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropUserMappingStmt(node *nodes.DropUserMappingStmt) string {
	p.addError(errors.New("DropUserMappingStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printImportForeignSchemaStmt(node *nodes.ImportForeignSchemaStmt) string {
	p.addError(errors.New("ImportForeignSchemaStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatePolicyStmt(node *nodes.CreatePolicyStmt) string {
	p.addError(errors.New("CreatePolicyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterPolicyStmt(node *nodes.AlterPolicyStmt) string {
	p.addError(errors.New("AlterPolicyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateAmStmt(node *nodes.CreateAmStmt) string {
	p.addError(errors.New("CreateAmStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateTrigStmt(node *nodes.CreateTrigStmt) string {
	p.addError(errors.New("CreateTrigStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateEventTrigStmt(node *nodes.CreateEventTrigStmt) string {
	p.addError(errors.New("CreateEventTrigStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterEventTrigStmt(node *nodes.AlterEventTrigStmt) string {
	p.addError(errors.New("AlterEventTrigStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatePlangStmt(node *nodes.CreatePLangStmt) string {
	p.addError(errors.New("CreatePLangStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateRoleStmt(node *nodes.CreateRoleStmt) string {
	p.addError(errors.New("CreateRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterRoleStmt(node *nodes.AlterRoleStmt) string {
	p.addError(errors.New("AlterRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterRoleSetStmt(node *nodes.AlterRoleSetStmt) string {
	p.addError(errors.New("AlterRoleSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropRoleStmt(node *nodes.DropRoleStmt) string {
	p.addError(errors.New("DropRoleStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateSeqStmt(node *nodes.CreateSeqStmt) string {
	p.addError(errors.New("CreateSeqStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterSeqStmt(node *nodes.AlterSeqStmt) string {
	p.addError(errors.New("AlterSeqStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDefineStmt(node *nodes.DefineStmt) string {
	p.addError(errors.New("DefineStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateDomainStmt(node *nodes.CreateDomainStmt) string {
	p.addError(errors.New("CreateDomainStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateOpFamilyStmt(node *nodes.CreateOpFamilyStmt) string {
	p.addError(errors.New("CreateOpFamilyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterOpFamilyStmt(node *nodes.AlterOpFamilyStmt) string {
	p.addError(errors.New("AlterOpFamilyStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printSecLabelStmt(node *nodes.SecLabelStmt) string {
	p.addError(errors.New("SecLabelStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDeclareCursorStmt(node *nodes.DeclareCursorStmt) string {
	p.addError(errors.New("DeclareCursorStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printClosePortalStmt(node *nodes.ClosePortalStmt) string {
	p.addError(errors.New("ClosePortalStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printFetchStmt(node *nodes.FetchStmt) string {
	p.addError(errors.New("FetchStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printIndexStmt(node *nodes.IndexStmt) string {
	p.addError(errors.New("IndexStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateStatsStmt(node *nodes.CreateStatsStmt) string {
	p.addError(errors.New("CreateStatsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printStatsElem(node *nodes.StatsElem) string {
	p.addError(errors.New("StatsElem not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterStatsStmt(node *nodes.AlterStatsStmt) string {
	p.addError(errors.New("AlterStatsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterFunctionStmt(node *nodes.AlterFunctionStmt) string {
	p.addError(errors.New("AlterFunctionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDoStmt(node *nodes.DoStmt) string {
	p.addError(errors.New("DoStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printInlineCodeBlock(node *nodes.InlineCodeBlock) string {
	p.addError(errors.New("InlineCodeBlock not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCallStmt(node *nodes.CallStmt) string {
	p.addError(errors.New("CallStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCallContext(node *nodes.CallContext) string {
	p.addError(errors.New("CallContext not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterObjectDependsStmt(node *nodes.AlterObjectDependsStmt) string {
	p.addError(errors.New("AlterObjectDependsStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterOwnerStmt(node *nodes.AlterOwnerStmt) string {
	p.addError(errors.New("AlterOwnerStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterOperatorStmt(node *nodes.AlterOperatorStmt) string {
	p.addError(errors.New("AlterOperatorStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTypeStmt(node *nodes.AlterTypeStmt) string {
	p.addError(errors.New("AlterTypeStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printListenStmt(node *nodes.ListenStmt) string {
	p.addError(errors.New("ListenStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printUnlistenStmt(node *nodes.UnlistenStmt) string {
	p.addError(errors.New("UnlistenStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printTransactionStmt(node *nodes.TransactionStmt) string {
	p.addError(errors.New("TransactionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateRangeStmt(node *nodes.CreateRangeStmt) string {
	p.addError(errors.New("CreateRangeStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printLoadStmt(node *nodes.LoadStmt) string {
	p.addError(errors.New("LoadStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatedbStmt(node *nodes.CreatedbStmt) string {
	p.addError(errors.New("CreatedbStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDatabaseStmt(node *nodes.AlterDatabaseStmt) string {
	p.addError(errors.New("AlterDatabaseStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDatabaseRefreshCollStmt(node *nodes.AlterDatabaseRefreshCollStmt) string {
	p.addError(errors.New("AlterDatabaseRefreshCollStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterDatabaseSetStmt(node *nodes.AlterDatabaseSetStmt) string {
	p.addError(errors.New("AlterDatabaseSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropdbStmt(node *nodes.DropdbStmt) string {
	p.addError(errors.New("DropdbStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterSystemStmt(node *nodes.AlterSystemStmt) string {
	p.addError(errors.New("AlterSystemStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printClusterStmt(node *nodes.ClusterStmt) string {
	p.addError(errors.New("ClusterStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVacuumStmt(node *nodes.VacuumStmt) string {
	p.addError(errors.New("VacuumStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printVacuumRelation(node *nodes.VacuumRelation) string {
	p.addError(errors.New("VacuumRelation not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printRefreshMatViewStmt(node *nodes.RefreshMatViewStmt) string {
	p.addError(errors.New("RefreshMatViewStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCheckPointStmt(node *nodes.CheckPointStmt) string {
	p.addError(errors.New("CheckPointStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDiscardStmt(node *nodes.DiscardStmt) string {
	p.addError(errors.New("DiscardStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printConstraintsSetStmt(node *nodes.ConstraintsSetStmt) string {
	p.addError(errors.New("ConstraintsSetStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReindexStmt(node *nodes.ReindexStmt) string {
	p.addError(errors.New("ReindexStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateConversionStmt(node *nodes.CreateConversionStmt) string {
	p.addError(errors.New("CreateConversionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPrepareStmt(node *nodes.PrepareStmt) string {
	p.addError(errors.New("PrepareStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printExecuteStmt(node *nodes.ExecuteStmt) string {
	p.addError(errors.New("ExecuteStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDeallocateStmt(node *nodes.DeallocateStmt) string {
	p.addError(errors.New("DeallocateStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropOwnedStmt(node *nodes.DropOwnedStmt) string {
	p.addError(errors.New("DropOwnedStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printReassignOwnedStmt(node *nodes.ReassignOwnedStmt) string {
	p.addError(errors.New("ReassignOwnedStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTsdictionaryStmt(node *nodes.AlterTSDictionaryStmt) string {
	p.addError(errors.New("AlterTSDictionaryStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterTsconfigurationStmt(node *nodes.AlterTSConfigurationStmt) string {
	p.addError(errors.New("AlterTSConfigurationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPublicationTable(node *nodes.PublicationTable) string {
	p.addError(errors.New("PublicationTable not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printPublicationObjSpec(node *nodes.PublicationObjSpec) string {
	p.addError(errors.New("PublicationObjSpec not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreatePublicationStmt(node *nodes.CreatePublicationStmt) string {
	p.addError(errors.New("CreatePublicationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterPublicationStmt(node *nodes.AlterPublicationStmt) string {
	p.addError(errors.New("AlterPublicationStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printCreateSubscriptionStmt(node *nodes.CreateSubscriptionStmt) string {
	p.addError(errors.New("CreateSubscriptionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printAlterSubscriptionStmt(node *nodes.AlterSubscriptionStmt) string {
	p.addError(errors.New("AlterSubscriptionStmt not implemented"))
	return "NOT IMPLEMENTED"
}

func (p *printer) printDropSubscriptionStmt(node *nodes.DropSubscriptionStmt) string {
	p.addError(errors.New("DropSubscriptionStmt not implemented"))
	return "NOT IMPLEMENTED"
}
