// Code generated by foji 0.3.7, template: foji/node_walk.go.tpl; DO NOT EDIT.

package pgtree

import (
	nodes "github.com/pganalyze/pg_query_go/v6"
)

type Visitor func(node *nodes.Node, stack []*nodes.Node, v Visitor) Visitor

func WalkList(list []*nodes.Node, stack []*nodes.Node, v Visitor) {
	for _, n := range list {
		Walk(n, stack, v)
	}
}

func Walk(node *nodes.Node, stack []*nodes.Node, v Visitor) {
	if node == nil || isNilValue(node) {
		return
	}

	if v = v(node, stack, v); v == nil {
		return
	}

	stack = append(stack, node)
	switch n := node.Node.(type) {

	case *nodes.Node_List:

		WalkList(n.List.Items, stack, v)

	case *nodes.Node_OidList:

		WalkList(n.OidList.Items, stack, v)

	case *nodes.Node_IntList:

		WalkList(n.IntList.Items, stack, v)

	case *nodes.Node_Alias:

		WalkList(n.Alias.Colnames, stack, v)

	case *nodes.Node_RangeVar:

		if n.RangeVar.Alias != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.RangeVar.Alias}}, stack, v)
		}

	case *nodes.Node_TableFunc:

		WalkList(n.TableFunc.NsUris, stack, v)

		WalkList(n.TableFunc.NsNames, stack, v)

		Walk(n.TableFunc.Docexpr, stack, v)

		Walk(n.TableFunc.Rowexpr, stack, v)

		WalkList(n.TableFunc.Colnames, stack, v)

		WalkList(n.TableFunc.Coltypes, stack, v)

		WalkList(n.TableFunc.Coltypmods, stack, v)

		WalkList(n.TableFunc.Colcollations, stack, v)

		WalkList(n.TableFunc.Colexprs, stack, v)

		WalkList(n.TableFunc.Coldefexprs, stack, v)

		WalkList(n.TableFunc.Colvalexprs, stack, v)

		WalkList(n.TableFunc.Passingvalexprs, stack, v)

		Walk(n.TableFunc.Plan, stack, v)

	case *nodes.Node_IntoClause:

		if n.IntoClause.Rel != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.IntoClause.Rel}}, stack, v)
		}

		WalkList(n.IntoClause.ColNames, stack, v)

		WalkList(n.IntoClause.Options, stack, v)

		Walk(n.IntoClause.ViewQuery, stack, v)

	case *nodes.Node_Var:
		Walk(n.Var.Xpr, stack, v)

	case *nodes.Node_Param:
		Walk(n.Param.Xpr, stack, v)

	case *nodes.Node_Aggref:
		Walk(n.Aggref.Xpr, stack, v)

		WalkList(n.Aggref.Aggargtypes, stack, v)

		WalkList(n.Aggref.Aggdirectargs, stack, v)

		WalkList(n.Aggref.Args, stack, v)

		WalkList(n.Aggref.Aggorder, stack, v)

		WalkList(n.Aggref.Aggdistinct, stack, v)

		Walk(n.Aggref.Aggfilter, stack, v)

	case *nodes.Node_GroupingFunc:
		Walk(n.GroupingFunc.Xpr, stack, v)

		WalkList(n.GroupingFunc.Args, stack, v)

		WalkList(n.GroupingFunc.Refs, stack, v)

	case *nodes.Node_WindowFunc:
		Walk(n.WindowFunc.Xpr, stack, v)

		WalkList(n.WindowFunc.Args, stack, v)

		Walk(n.WindowFunc.Aggfilter, stack, v)

		WalkList(n.WindowFunc.RunCondition, stack, v)

	case *nodes.Node_WindowFuncRunCondition:
		Walk(n.WindowFuncRunCondition.Xpr, stack, v)

		Walk(n.WindowFuncRunCondition.Arg, stack, v)

	case *nodes.Node_MergeSupportFunc:
		Walk(n.MergeSupportFunc.Xpr, stack, v)

	case *nodes.Node_SubscriptingRef:
		Walk(n.SubscriptingRef.Xpr, stack, v)

		WalkList(n.SubscriptingRef.Refupperindexpr, stack, v)

		WalkList(n.SubscriptingRef.Reflowerindexpr, stack, v)

		Walk(n.SubscriptingRef.Refexpr, stack, v)

		Walk(n.SubscriptingRef.Refassgnexpr, stack, v)

	case *nodes.Node_FuncExpr:
		Walk(n.FuncExpr.Xpr, stack, v)

		WalkList(n.FuncExpr.Args, stack, v)

	case *nodes.Node_NamedArgExpr:
		Walk(n.NamedArgExpr.Xpr, stack, v)

		Walk(n.NamedArgExpr.Arg, stack, v)

	case *nodes.Node_OpExpr:
		Walk(n.OpExpr.Xpr, stack, v)

		WalkList(n.OpExpr.Args, stack, v)

	case *nodes.Node_DistinctExpr:
		Walk(n.DistinctExpr.Xpr, stack, v)

		WalkList(n.DistinctExpr.Args, stack, v)

	case *nodes.Node_NullIfExpr:
		Walk(n.NullIfExpr.Xpr, stack, v)

		WalkList(n.NullIfExpr.Args, stack, v)

	case *nodes.Node_ScalarArrayOpExpr:
		Walk(n.ScalarArrayOpExpr.Xpr, stack, v)

		WalkList(n.ScalarArrayOpExpr.Args, stack, v)

	case *nodes.Node_BoolExpr:
		Walk(n.BoolExpr.Xpr, stack, v)

		WalkList(n.BoolExpr.Args, stack, v)

	case *nodes.Node_SubLink:
		Walk(n.SubLink.Xpr, stack, v)

		Walk(n.SubLink.Testexpr, stack, v)

		WalkList(n.SubLink.OperName, stack, v)

		Walk(n.SubLink.Subselect, stack, v)

	case *nodes.Node_SubPlan:
		Walk(n.SubPlan.Xpr, stack, v)

		Walk(n.SubPlan.Testexpr, stack, v)

		WalkList(n.SubPlan.ParamIds, stack, v)

		WalkList(n.SubPlan.SetParam, stack, v)

		WalkList(n.SubPlan.ParParam, stack, v)

		WalkList(n.SubPlan.Args, stack, v)

	case *nodes.Node_AlternativeSubPlan:
		Walk(n.AlternativeSubPlan.Xpr, stack, v)

		WalkList(n.AlternativeSubPlan.Subplans, stack, v)

	case *nodes.Node_FieldSelect:
		Walk(n.FieldSelect.Xpr, stack, v)

		Walk(n.FieldSelect.Arg, stack, v)

	case *nodes.Node_FieldStore:
		Walk(n.FieldStore.Xpr, stack, v)

		Walk(n.FieldStore.Arg, stack, v)

		WalkList(n.FieldStore.Newvals, stack, v)

		WalkList(n.FieldStore.Fieldnums, stack, v)

	case *nodes.Node_RelabelType:
		Walk(n.RelabelType.Xpr, stack, v)

		Walk(n.RelabelType.Arg, stack, v)

	case *nodes.Node_CoerceViaIo:
		Walk(n.CoerceViaIo.Xpr, stack, v)

		Walk(n.CoerceViaIo.Arg, stack, v)

	case *nodes.Node_ArrayCoerceExpr:
		Walk(n.ArrayCoerceExpr.Xpr, stack, v)

		Walk(n.ArrayCoerceExpr.Arg, stack, v)

		Walk(n.ArrayCoerceExpr.Elemexpr, stack, v)

	case *nodes.Node_ConvertRowtypeExpr:
		Walk(n.ConvertRowtypeExpr.Xpr, stack, v)

		Walk(n.ConvertRowtypeExpr.Arg, stack, v)

	case *nodes.Node_CollateExpr:
		Walk(n.CollateExpr.Xpr, stack, v)

		Walk(n.CollateExpr.Arg, stack, v)

	case *nodes.Node_CaseExpr:
		Walk(n.CaseExpr.Xpr, stack, v)

		Walk(n.CaseExpr.Arg, stack, v)

		WalkList(n.CaseExpr.Args, stack, v)

		Walk(n.CaseExpr.Defresult, stack, v)

	case *nodes.Node_CaseWhen:
		Walk(n.CaseWhen.Xpr, stack, v)

		Walk(n.CaseWhen.Expr, stack, v)

		Walk(n.CaseWhen.Result, stack, v)

	case *nodes.Node_CaseTestExpr:
		Walk(n.CaseTestExpr.Xpr, stack, v)

	case *nodes.Node_ArrayExpr:
		Walk(n.ArrayExpr.Xpr, stack, v)

		WalkList(n.ArrayExpr.Elements, stack, v)

	case *nodes.Node_RowExpr:
		Walk(n.RowExpr.Xpr, stack, v)

		WalkList(n.RowExpr.Args, stack, v)

		WalkList(n.RowExpr.Colnames, stack, v)

	case *nodes.Node_RowCompareExpr:
		Walk(n.RowCompareExpr.Xpr, stack, v)

		WalkList(n.RowCompareExpr.Opnos, stack, v)

		WalkList(n.RowCompareExpr.Opfamilies, stack, v)

		WalkList(n.RowCompareExpr.Inputcollids, stack, v)

		WalkList(n.RowCompareExpr.Largs, stack, v)

		WalkList(n.RowCompareExpr.Rargs, stack, v)

	case *nodes.Node_CoalesceExpr:
		Walk(n.CoalesceExpr.Xpr, stack, v)

		WalkList(n.CoalesceExpr.Args, stack, v)

	case *nodes.Node_MinMaxExpr:
		Walk(n.MinMaxExpr.Xpr, stack, v)

		WalkList(n.MinMaxExpr.Args, stack, v)

	case *nodes.Node_SqlvalueFunction:
		Walk(n.SqlvalueFunction.Xpr, stack, v)

	case *nodes.Node_XmlExpr:
		Walk(n.XmlExpr.Xpr, stack, v)

		WalkList(n.XmlExpr.NamedArgs, stack, v)

		WalkList(n.XmlExpr.ArgNames, stack, v)

		WalkList(n.XmlExpr.Args, stack, v)

	case *nodes.Node_JsonReturning:

		if n.JsonReturning.Format != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonFormat{JsonFormat: n.JsonReturning.Format}}, stack, v)
		}

	case *nodes.Node_JsonValueExpr:
		Walk(n.JsonValueExpr.RawExpr, stack, v)

		Walk(n.JsonValueExpr.FormattedExpr, stack, v)

		if n.JsonValueExpr.Format != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonFormat{JsonFormat: n.JsonValueExpr.Format}}, stack, v)
		}

	case *nodes.Node_JsonConstructorExpr:
		Walk(n.JsonConstructorExpr.Xpr, stack, v)

		WalkList(n.JsonConstructorExpr.Args, stack, v)

		Walk(n.JsonConstructorExpr.Func, stack, v)

		Walk(n.JsonConstructorExpr.Coercion, stack, v)

		if n.JsonConstructorExpr.Returning != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonReturning{JsonReturning: n.JsonConstructorExpr.Returning}}, stack, v)
		}

	case *nodes.Node_JsonIsPredicate:
		Walk(n.JsonIsPredicate.Expr, stack, v)

		if n.JsonIsPredicate.Format != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonFormat{JsonFormat: n.JsonIsPredicate.Format}}, stack, v)
		}

	case *nodes.Node_JsonBehavior:
		Walk(n.JsonBehavior.Expr, stack, v)

	case *nodes.Node_JsonExpr:
		Walk(n.JsonExpr.Xpr, stack, v)

		Walk(n.JsonExpr.FormattedExpr, stack, v)

		if n.JsonExpr.Format != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonFormat{JsonFormat: n.JsonExpr.Format}}, stack, v)
		}

		Walk(n.JsonExpr.PathSpec, stack, v)

		if n.JsonExpr.Returning != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonReturning{JsonReturning: n.JsonExpr.Returning}}, stack, v)
		}

		WalkList(n.JsonExpr.PassingNames, stack, v)

		WalkList(n.JsonExpr.PassingValues, stack, v)

		if n.JsonExpr.OnEmpty != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonBehavior{JsonBehavior: n.JsonExpr.OnEmpty}}, stack, v)
		}

		if n.JsonExpr.OnError != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonBehavior{JsonBehavior: n.JsonExpr.OnError}}, stack, v)
		}

	case *nodes.Node_JsonTablePathScan:
		Walk(n.JsonTablePathScan.Plan, stack, v)

		if n.JsonTablePathScan.Path != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonTablePath{JsonTablePath: n.JsonTablePathScan.Path}}, stack, v)
		}

		Walk(n.JsonTablePathScan.Child, stack, v)

	case *nodes.Node_JsonTableSiblingJoin:
		Walk(n.JsonTableSiblingJoin.Plan, stack, v)

		Walk(n.JsonTableSiblingJoin.Lplan, stack, v)

		Walk(n.JsonTableSiblingJoin.Rplan, stack, v)

	case *nodes.Node_NullTest:
		Walk(n.NullTest.Xpr, stack, v)

		Walk(n.NullTest.Arg, stack, v)

	case *nodes.Node_BooleanTest:
		Walk(n.BooleanTest.Xpr, stack, v)

		Walk(n.BooleanTest.Arg, stack, v)

	case *nodes.Node_MergeAction:
		Walk(n.MergeAction.Qual, stack, v)

		WalkList(n.MergeAction.TargetList, stack, v)

		WalkList(n.MergeAction.UpdateColnos, stack, v)

	case *nodes.Node_CoerceToDomain:
		Walk(n.CoerceToDomain.Xpr, stack, v)

		Walk(n.CoerceToDomain.Arg, stack, v)

	case *nodes.Node_CoerceToDomainValue:
		Walk(n.CoerceToDomainValue.Xpr, stack, v)

	case *nodes.Node_SetToDefault:
		Walk(n.SetToDefault.Xpr, stack, v)

	case *nodes.Node_CurrentOfExpr:
		Walk(n.CurrentOfExpr.Xpr, stack, v)

	case *nodes.Node_NextValueExpr:
		Walk(n.NextValueExpr.Xpr, stack, v)

	case *nodes.Node_InferenceElem:
		Walk(n.InferenceElem.Xpr, stack, v)

		Walk(n.InferenceElem.Expr, stack, v)

	case *nodes.Node_TargetEntry:
		Walk(n.TargetEntry.Xpr, stack, v)

		Walk(n.TargetEntry.Expr, stack, v)

	case *nodes.Node_JoinExpr:
		Walk(n.JoinExpr.Larg, stack, v)

		Walk(n.JoinExpr.Rarg, stack, v)

		WalkList(n.JoinExpr.UsingClause, stack, v)

		if n.JoinExpr.JoinUsingAlias != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.JoinExpr.JoinUsingAlias}}, stack, v)
		}

		Walk(n.JoinExpr.Quals, stack, v)

		if n.JoinExpr.Alias != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.JoinExpr.Alias}}, stack, v)
		}

	case *nodes.Node_FromExpr:

		WalkList(n.FromExpr.Fromlist, stack, v)

		Walk(n.FromExpr.Quals, stack, v)

	case *nodes.Node_OnConflictExpr:

		WalkList(n.OnConflictExpr.ArbiterElems, stack, v)

		Walk(n.OnConflictExpr.ArbiterWhere, stack, v)

		WalkList(n.OnConflictExpr.OnConflictSet, stack, v)

		Walk(n.OnConflictExpr.OnConflictWhere, stack, v)

		WalkList(n.OnConflictExpr.ExclRelTlist, stack, v)

	case *nodes.Node_Query:
		Walk(n.Query.UtilityStmt, stack, v)

		WalkList(n.Query.CteList, stack, v)

		WalkList(n.Query.Rtable, stack, v)

		WalkList(n.Query.Rteperminfos, stack, v)

		if n.Query.Jointree != nil {
			Walk(&nodes.Node{Node: &nodes.Node_FromExpr{FromExpr: n.Query.Jointree}}, stack, v)
		}

		WalkList(n.Query.MergeActionList, stack, v)

		Walk(n.Query.MergeJoinCondition, stack, v)

		WalkList(n.Query.TargetList, stack, v)

		if n.Query.OnConflict != nil {
			Walk(&nodes.Node{Node: &nodes.Node_OnConflictExpr{OnConflictExpr: n.Query.OnConflict}}, stack, v)
		}

		WalkList(n.Query.ReturningList, stack, v)

		WalkList(n.Query.GroupClause, stack, v)

		WalkList(n.Query.GroupingSets, stack, v)

		Walk(n.Query.HavingQual, stack, v)

		WalkList(n.Query.WindowClause, stack, v)

		WalkList(n.Query.DistinctClause, stack, v)

		WalkList(n.Query.SortClause, stack, v)

		Walk(n.Query.LimitOffset, stack, v)

		Walk(n.Query.LimitCount, stack, v)

		WalkList(n.Query.RowMarks, stack, v)

		Walk(n.Query.SetOperations, stack, v)

		WalkList(n.Query.ConstraintDeps, stack, v)

		WalkList(n.Query.WithCheckOptions, stack, v)

	case *nodes.Node_TypeName:

		WalkList(n.TypeName.Names, stack, v)

		WalkList(n.TypeName.Typmods, stack, v)

		WalkList(n.TypeName.ArrayBounds, stack, v)

	case *nodes.Node_ColumnRef:

		WalkList(n.ColumnRef.Fields, stack, v)

	case *nodes.Node_AExpr:

		WalkList(n.AExpr.Name, stack, v)

		Walk(n.AExpr.Lexpr, stack, v)

		Walk(n.AExpr.Rexpr, stack, v)

	case *nodes.Node_TypeCast:
		Walk(n.TypeCast.Arg, stack, v)

		if n.TypeCast.TypeName != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.TypeCast.TypeName}}, stack, v)
		}

	case *nodes.Node_CollateClause:
		Walk(n.CollateClause.Arg, stack, v)

		WalkList(n.CollateClause.Collname, stack, v)

	case *nodes.Node_FuncCall:

		WalkList(n.FuncCall.Funcname, stack, v)

		WalkList(n.FuncCall.Args, stack, v)

		WalkList(n.FuncCall.AggOrder, stack, v)

		Walk(n.FuncCall.AggFilter, stack, v)

		if n.FuncCall.Over != nil {
			Walk(&nodes.Node{Node: &nodes.Node_WindowDef{WindowDef: n.FuncCall.Over}}, stack, v)
		}

	case *nodes.Node_AIndices:
		Walk(n.AIndices.Lidx, stack, v)

		Walk(n.AIndices.Uidx, stack, v)

	case *nodes.Node_AIndirection:
		Walk(n.AIndirection.Arg, stack, v)

		WalkList(n.AIndirection.Indirection, stack, v)

	case *nodes.Node_AArrayExpr:

		WalkList(n.AArrayExpr.Elements, stack, v)

	case *nodes.Node_ResTarget:

		WalkList(n.ResTarget.Indirection, stack, v)

		Walk(n.ResTarget.Val, stack, v)

	case *nodes.Node_MultiAssignRef:
		Walk(n.MultiAssignRef.Source, stack, v)

	case *nodes.Node_SortBy:
		Walk(n.SortBy.Node, stack, v)

		WalkList(n.SortBy.UseOp, stack, v)

	case *nodes.Node_WindowDef:

		WalkList(n.WindowDef.PartitionClause, stack, v)

		WalkList(n.WindowDef.OrderClause, stack, v)

		Walk(n.WindowDef.StartOffset, stack, v)

		Walk(n.WindowDef.EndOffset, stack, v)

	case *nodes.Node_RangeSubselect:
		Walk(n.RangeSubselect.Subquery, stack, v)

		if n.RangeSubselect.Alias != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.RangeSubselect.Alias}}, stack, v)
		}

	case *nodes.Node_RangeFunction:

		WalkList(n.RangeFunction.Functions, stack, v)

		if n.RangeFunction.Alias != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.RangeFunction.Alias}}, stack, v)
		}

		WalkList(n.RangeFunction.Coldeflist, stack, v)

	case *nodes.Node_RangeTableFunc:
		Walk(n.RangeTableFunc.Docexpr, stack, v)

		Walk(n.RangeTableFunc.Rowexpr, stack, v)

		WalkList(n.RangeTableFunc.Namespaces, stack, v)

		WalkList(n.RangeTableFunc.Columns, stack, v)

		if n.RangeTableFunc.Alias != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.RangeTableFunc.Alias}}, stack, v)
		}

	case *nodes.Node_RangeTableFuncCol:

		if n.RangeTableFuncCol.TypeName != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.RangeTableFuncCol.TypeName}}, stack, v)
		}

		Walk(n.RangeTableFuncCol.Colexpr, stack, v)

		Walk(n.RangeTableFuncCol.Coldefexpr, stack, v)

	case *nodes.Node_RangeTableSample:
		Walk(n.RangeTableSample.Relation, stack, v)

		WalkList(n.RangeTableSample.Method, stack, v)

		WalkList(n.RangeTableSample.Args, stack, v)

		Walk(n.RangeTableSample.Repeatable, stack, v)

	case *nodes.Node_ColumnDef:

		if n.ColumnDef.TypeName != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.ColumnDef.TypeName}}, stack, v)
		}

		Walk(n.ColumnDef.RawDefault, stack, v)

		Walk(n.ColumnDef.CookedDefault, stack, v)

		if n.ColumnDef.IdentitySequence != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.ColumnDef.IdentitySequence}}, stack, v)
		}

		if n.ColumnDef.CollClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_CollateClause{CollateClause: n.ColumnDef.CollClause}}, stack, v)
		}

		WalkList(n.ColumnDef.Constraints, stack, v)

		WalkList(n.ColumnDef.Fdwoptions, stack, v)

	case *nodes.Node_TableLikeClause:

		if n.TableLikeClause.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.TableLikeClause.Relation}}, stack, v)
		}

	case *nodes.Node_IndexElem:
		Walk(n.IndexElem.Expr, stack, v)

		WalkList(n.IndexElem.Collation, stack, v)

		WalkList(n.IndexElem.Opclass, stack, v)

		WalkList(n.IndexElem.Opclassopts, stack, v)

	case *nodes.Node_DefElem:
		Walk(n.DefElem.Arg, stack, v)

	case *nodes.Node_LockingClause:

		WalkList(n.LockingClause.LockedRels, stack, v)

	case *nodes.Node_XmlSerialize:
		Walk(n.XmlSerialize.Expr, stack, v)

		if n.XmlSerialize.TypeName != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.XmlSerialize.TypeName}}, stack, v)
		}

	case *nodes.Node_PartitionElem:
		Walk(n.PartitionElem.Expr, stack, v)

		WalkList(n.PartitionElem.Collation, stack, v)

		WalkList(n.PartitionElem.Opclass, stack, v)

	case *nodes.Node_PartitionSpec:

		WalkList(n.PartitionSpec.PartParams, stack, v)

	case *nodes.Node_PartitionBoundSpec:

		WalkList(n.PartitionBoundSpec.Listdatums, stack, v)

		WalkList(n.PartitionBoundSpec.Lowerdatums, stack, v)

		WalkList(n.PartitionBoundSpec.Upperdatums, stack, v)

	case *nodes.Node_PartitionRangeDatum:
		Walk(n.PartitionRangeDatum.Value, stack, v)

	case *nodes.Node_PartitionCmd:

		if n.PartitionCmd.Name != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.PartitionCmd.Name}}, stack, v)
		}

		if n.PartitionCmd.Bound != nil {
			Walk(&nodes.Node{Node: &nodes.Node_PartitionBoundSpec{PartitionBoundSpec: n.PartitionCmd.Bound}}, stack, v)
		}

	case *nodes.Node_RangeTblEntry:

		if n.RangeTblEntry.Alias != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.RangeTblEntry.Alias}}, stack, v)
		}

		if n.RangeTblEntry.Eref != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.RangeTblEntry.Eref}}, stack, v)
		}

		if n.RangeTblEntry.Tablesample != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TableSampleClause{TableSampleClause: n.RangeTblEntry.Tablesample}}, stack, v)
		}

		if n.RangeTblEntry.Subquery != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Query{Query: n.RangeTblEntry.Subquery}}, stack, v)
		}

		WalkList(n.RangeTblEntry.Joinaliasvars, stack, v)

		WalkList(n.RangeTblEntry.Joinleftcols, stack, v)

		WalkList(n.RangeTblEntry.Joinrightcols, stack, v)

		if n.RangeTblEntry.JoinUsingAlias != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.RangeTblEntry.JoinUsingAlias}}, stack, v)
		}

		WalkList(n.RangeTblEntry.Functions, stack, v)

		if n.RangeTblEntry.Tablefunc != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TableFunc{TableFunc: n.RangeTblEntry.Tablefunc}}, stack, v)
		}

		WalkList(n.RangeTblEntry.ValuesLists, stack, v)

		WalkList(n.RangeTblEntry.Coltypes, stack, v)

		WalkList(n.RangeTblEntry.Coltypmods, stack, v)

		WalkList(n.RangeTblEntry.Colcollations, stack, v)

		WalkList(n.RangeTblEntry.SecurityQuals, stack, v)

	case *nodes.Node_RangeTblFunction:
		Walk(n.RangeTblFunction.Funcexpr, stack, v)

		WalkList(n.RangeTblFunction.Funccolnames, stack, v)

		WalkList(n.RangeTblFunction.Funccoltypes, stack, v)

		WalkList(n.RangeTblFunction.Funccoltypmods, stack, v)

		WalkList(n.RangeTblFunction.Funccolcollations, stack, v)

	case *nodes.Node_TableSampleClause:

		WalkList(n.TableSampleClause.Args, stack, v)

		Walk(n.TableSampleClause.Repeatable, stack, v)

	case *nodes.Node_WithCheckOption:
		Walk(n.WithCheckOption.Qual, stack, v)

	case *nodes.Node_GroupingSet:

		WalkList(n.GroupingSet.Content, stack, v)

	case *nodes.Node_WindowClause:

		WalkList(n.WindowClause.PartitionClause, stack, v)

		WalkList(n.WindowClause.OrderClause, stack, v)

		Walk(n.WindowClause.StartOffset, stack, v)

		Walk(n.WindowClause.EndOffset, stack, v)

	case *nodes.Node_WithClause:

		WalkList(n.WithClause.Ctes, stack, v)

	case *nodes.Node_InferClause:

		WalkList(n.InferClause.IndexElems, stack, v)

		Walk(n.InferClause.WhereClause, stack, v)

	case *nodes.Node_OnConflictClause:

		if n.OnConflictClause.Infer != nil {
			Walk(&nodes.Node{Node: &nodes.Node_InferClause{InferClause: n.OnConflictClause.Infer}}, stack, v)
		}

		WalkList(n.OnConflictClause.TargetList, stack, v)

		Walk(n.OnConflictClause.WhereClause, stack, v)

	case *nodes.Node_CtesearchClause:

		WalkList(n.CtesearchClause.SearchColList, stack, v)

	case *nodes.Node_CtecycleClause:

		WalkList(n.CtecycleClause.CycleColList, stack, v)

		Walk(n.CtecycleClause.CycleMarkValue, stack, v)

		Walk(n.CtecycleClause.CycleMarkDefault, stack, v)

	case *nodes.Node_CommonTableExpr:

		WalkList(n.CommonTableExpr.Aliascolnames, stack, v)

		Walk(n.CommonTableExpr.Ctequery, stack, v)

		if n.CommonTableExpr.SearchClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_CtesearchClause{CtesearchClause: n.CommonTableExpr.SearchClause}}, stack, v)
		}

		if n.CommonTableExpr.CycleClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_CtecycleClause{CtecycleClause: n.CommonTableExpr.CycleClause}}, stack, v)
		}

		WalkList(n.CommonTableExpr.Ctecolnames, stack, v)

		WalkList(n.CommonTableExpr.Ctecoltypes, stack, v)

		WalkList(n.CommonTableExpr.Ctecoltypmods, stack, v)

		WalkList(n.CommonTableExpr.Ctecolcollations, stack, v)

	case *nodes.Node_MergeWhenClause:
		Walk(n.MergeWhenClause.Condition, stack, v)

		WalkList(n.MergeWhenClause.TargetList, stack, v)

		WalkList(n.MergeWhenClause.Values, stack, v)

	case *nodes.Node_JsonOutput:

		if n.JsonOutput.TypeName != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.JsonOutput.TypeName}}, stack, v)
		}

		if n.JsonOutput.Returning != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonReturning{JsonReturning: n.JsonOutput.Returning}}, stack, v)
		}

	case *nodes.Node_JsonArgument:

		if n.JsonArgument.Val != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonValueExpr{JsonValueExpr: n.JsonArgument.Val}}, stack, v)
		}

	case *nodes.Node_JsonFuncExpr:

		if n.JsonFuncExpr.ContextItem != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonValueExpr{JsonValueExpr: n.JsonFuncExpr.ContextItem}}, stack, v)
		}

		Walk(n.JsonFuncExpr.Pathspec, stack, v)

		WalkList(n.JsonFuncExpr.Passing, stack, v)

		if n.JsonFuncExpr.Output != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonOutput{JsonOutput: n.JsonFuncExpr.Output}}, stack, v)
		}

		if n.JsonFuncExpr.OnEmpty != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonBehavior{JsonBehavior: n.JsonFuncExpr.OnEmpty}}, stack, v)
		}

		if n.JsonFuncExpr.OnError != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonBehavior{JsonBehavior: n.JsonFuncExpr.OnError}}, stack, v)
		}

	case *nodes.Node_JsonTablePathSpec:
		Walk(n.JsonTablePathSpec.String_, stack, v)

	case *nodes.Node_JsonTable:

		if n.JsonTable.ContextItem != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonValueExpr{JsonValueExpr: n.JsonTable.ContextItem}}, stack, v)
		}

		if n.JsonTable.Pathspec != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonTablePathSpec{JsonTablePathSpec: n.JsonTable.Pathspec}}, stack, v)
		}

		WalkList(n.JsonTable.Passing, stack, v)

		WalkList(n.JsonTable.Columns, stack, v)

		if n.JsonTable.OnError != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonBehavior{JsonBehavior: n.JsonTable.OnError}}, stack, v)
		}

		if n.JsonTable.Alias != nil {
			Walk(&nodes.Node{Node: &nodes.Node_Alias{Alias: n.JsonTable.Alias}}, stack, v)
		}

	case *nodes.Node_JsonTableColumn:

		if n.JsonTableColumn.TypeName != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.JsonTableColumn.TypeName}}, stack, v)
		}

		if n.JsonTableColumn.Pathspec != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonTablePathSpec{JsonTablePathSpec: n.JsonTableColumn.Pathspec}}, stack, v)
		}

		if n.JsonTableColumn.Format != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonFormat{JsonFormat: n.JsonTableColumn.Format}}, stack, v)
		}

		WalkList(n.JsonTableColumn.Columns, stack, v)

		if n.JsonTableColumn.OnEmpty != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonBehavior{JsonBehavior: n.JsonTableColumn.OnEmpty}}, stack, v)
		}

		if n.JsonTableColumn.OnError != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonBehavior{JsonBehavior: n.JsonTableColumn.OnError}}, stack, v)
		}

	case *nodes.Node_JsonKeyValue:
		Walk(n.JsonKeyValue.Key, stack, v)

		if n.JsonKeyValue.Value != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonValueExpr{JsonValueExpr: n.JsonKeyValue.Value}}, stack, v)
		}

	case *nodes.Node_JsonParseExpr:

		if n.JsonParseExpr.Expr != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonValueExpr{JsonValueExpr: n.JsonParseExpr.Expr}}, stack, v)
		}

		if n.JsonParseExpr.Output != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonOutput{JsonOutput: n.JsonParseExpr.Output}}, stack, v)
		}

	case *nodes.Node_JsonScalarExpr:
		Walk(n.JsonScalarExpr.Expr, stack, v)

		if n.JsonScalarExpr.Output != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonOutput{JsonOutput: n.JsonScalarExpr.Output}}, stack, v)
		}

	case *nodes.Node_JsonSerializeExpr:

		if n.JsonSerializeExpr.Expr != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonValueExpr{JsonValueExpr: n.JsonSerializeExpr.Expr}}, stack, v)
		}

		if n.JsonSerializeExpr.Output != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonOutput{JsonOutput: n.JsonSerializeExpr.Output}}, stack, v)
		}

	case *nodes.Node_JsonObjectConstructor:

		WalkList(n.JsonObjectConstructor.Exprs, stack, v)

		if n.JsonObjectConstructor.Output != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonOutput{JsonOutput: n.JsonObjectConstructor.Output}}, stack, v)
		}

	case *nodes.Node_JsonArrayConstructor:

		WalkList(n.JsonArrayConstructor.Exprs, stack, v)

		if n.JsonArrayConstructor.Output != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonOutput{JsonOutput: n.JsonArrayConstructor.Output}}, stack, v)
		}

	case *nodes.Node_JsonArrayQueryConstructor:
		Walk(n.JsonArrayQueryConstructor.Query, stack, v)

		if n.JsonArrayQueryConstructor.Output != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonOutput{JsonOutput: n.JsonArrayQueryConstructor.Output}}, stack, v)
		}

		if n.JsonArrayQueryConstructor.Format != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonFormat{JsonFormat: n.JsonArrayQueryConstructor.Format}}, stack, v)
		}

	case *nodes.Node_JsonAggConstructor:

		if n.JsonAggConstructor.Output != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonOutput{JsonOutput: n.JsonAggConstructor.Output}}, stack, v)
		}

		Walk(n.JsonAggConstructor.AggFilter, stack, v)

		WalkList(n.JsonAggConstructor.AggOrder, stack, v)

		if n.JsonAggConstructor.Over != nil {
			Walk(&nodes.Node{Node: &nodes.Node_WindowDef{WindowDef: n.JsonAggConstructor.Over}}, stack, v)
		}

	case *nodes.Node_JsonObjectAgg:

		if n.JsonObjectAgg.Constructor != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonAggConstructor{JsonAggConstructor: n.JsonObjectAgg.Constructor}}, stack, v)
		}

		if n.JsonObjectAgg.Arg != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonKeyValue{JsonKeyValue: n.JsonObjectAgg.Arg}}, stack, v)
		}

	case *nodes.Node_JsonArrayAgg:

		if n.JsonArrayAgg.Constructor != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonAggConstructor{JsonAggConstructor: n.JsonArrayAgg.Constructor}}, stack, v)
		}

		if n.JsonArrayAgg.Arg != nil {
			Walk(&nodes.Node{Node: &nodes.Node_JsonValueExpr{JsonValueExpr: n.JsonArrayAgg.Arg}}, stack, v)
		}

	case *nodes.Node_RawStmt:
		Walk(n.RawStmt.Stmt, stack, v)

	case *nodes.Node_InsertStmt:

		if n.InsertStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.InsertStmt.Relation}}, stack, v)
		}

		WalkList(n.InsertStmt.Cols, stack, v)

		Walk(n.InsertStmt.SelectStmt, stack, v)

		if n.InsertStmt.OnConflictClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_OnConflictClause{OnConflictClause: n.InsertStmt.OnConflictClause}}, stack, v)
		}

		WalkList(n.InsertStmt.ReturningList, stack, v)

		if n.InsertStmt.WithClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_WithClause{WithClause: n.InsertStmt.WithClause}}, stack, v)
		}

	case *nodes.Node_DeleteStmt:

		if n.DeleteStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.DeleteStmt.Relation}}, stack, v)
		}

		WalkList(n.DeleteStmt.UsingClause, stack, v)

		Walk(n.DeleteStmt.WhereClause, stack, v)

		WalkList(n.DeleteStmt.ReturningList, stack, v)

		if n.DeleteStmt.WithClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_WithClause{WithClause: n.DeleteStmt.WithClause}}, stack, v)
		}

	case *nodes.Node_UpdateStmt:

		if n.UpdateStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.UpdateStmt.Relation}}, stack, v)
		}

		WalkList(n.UpdateStmt.TargetList, stack, v)

		Walk(n.UpdateStmt.WhereClause, stack, v)

		WalkList(n.UpdateStmt.FromClause, stack, v)

		WalkList(n.UpdateStmt.ReturningList, stack, v)

		if n.UpdateStmt.WithClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_WithClause{WithClause: n.UpdateStmt.WithClause}}, stack, v)
		}

	case *nodes.Node_MergeStmt:

		if n.MergeStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.MergeStmt.Relation}}, stack, v)
		}

		Walk(n.MergeStmt.SourceRelation, stack, v)

		Walk(n.MergeStmt.JoinCondition, stack, v)

		WalkList(n.MergeStmt.MergeWhenClauses, stack, v)

		WalkList(n.MergeStmt.ReturningList, stack, v)

		if n.MergeStmt.WithClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_WithClause{WithClause: n.MergeStmt.WithClause}}, stack, v)
		}

	case *nodes.Node_SelectStmt:

		WalkList(n.SelectStmt.DistinctClause, stack, v)

		if n.SelectStmt.IntoClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_IntoClause{IntoClause: n.SelectStmt.IntoClause}}, stack, v)
		}

		WalkList(n.SelectStmt.TargetList, stack, v)

		WalkList(n.SelectStmt.FromClause, stack, v)

		Walk(n.SelectStmt.WhereClause, stack, v)

		WalkList(n.SelectStmt.GroupClause, stack, v)

		Walk(n.SelectStmt.HavingClause, stack, v)

		WalkList(n.SelectStmt.WindowClause, stack, v)

		WalkList(n.SelectStmt.ValuesLists, stack, v)

		WalkList(n.SelectStmt.SortClause, stack, v)

		Walk(n.SelectStmt.LimitOffset, stack, v)

		Walk(n.SelectStmt.LimitCount, stack, v)

		WalkList(n.SelectStmt.LockingClause, stack, v)

		if n.SelectStmt.WithClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_WithClause{WithClause: n.SelectStmt.WithClause}}, stack, v)
		}

		if n.SelectStmt.Larg != nil {
			Walk(&nodes.Node{Node: &nodes.Node_SelectStmt{SelectStmt: n.SelectStmt.Larg}}, stack, v)
		}

		if n.SelectStmt.Rarg != nil {
			Walk(&nodes.Node{Node: &nodes.Node_SelectStmt{SelectStmt: n.SelectStmt.Rarg}}, stack, v)
		}

	case *nodes.Node_SetOperationStmt:
		Walk(n.SetOperationStmt.Larg, stack, v)

		Walk(n.SetOperationStmt.Rarg, stack, v)

		WalkList(n.SetOperationStmt.ColTypes, stack, v)

		WalkList(n.SetOperationStmt.ColTypmods, stack, v)

		WalkList(n.SetOperationStmt.ColCollations, stack, v)

		WalkList(n.SetOperationStmt.GroupClauses, stack, v)

	case *nodes.Node_ReturnStmt:
		Walk(n.ReturnStmt.Returnval, stack, v)

	case *nodes.Node_PlassignStmt:

		WalkList(n.PlassignStmt.Indirection, stack, v)

		if n.PlassignStmt.Val != nil {
			Walk(&nodes.Node{Node: &nodes.Node_SelectStmt{SelectStmt: n.PlassignStmt.Val}}, stack, v)
		}

	case *nodes.Node_CreateSchemaStmt:

		if n.CreateSchemaStmt.Authrole != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.CreateSchemaStmt.Authrole}}, stack, v)
		}

		WalkList(n.CreateSchemaStmt.SchemaElts, stack, v)

	case *nodes.Node_AlterTableStmt:

		if n.AlterTableStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.AlterTableStmt.Relation}}, stack, v)
		}

		WalkList(n.AlterTableStmt.Cmds, stack, v)

	case *nodes.Node_AlterTableCmd:

		if n.AlterTableCmd.Newowner != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.AlterTableCmd.Newowner}}, stack, v)
		}

		Walk(n.AlterTableCmd.Def, stack, v)

	case *nodes.Node_AlterCollationStmt:

		WalkList(n.AlterCollationStmt.Collname, stack, v)

	case *nodes.Node_AlterDomainStmt:

		WalkList(n.AlterDomainStmt.TypeName, stack, v)

		Walk(n.AlterDomainStmt.Def, stack, v)

	case *nodes.Node_GrantStmt:

		WalkList(n.GrantStmt.Objects, stack, v)

		WalkList(n.GrantStmt.Privileges, stack, v)

		WalkList(n.GrantStmt.Grantees, stack, v)

		if n.GrantStmt.Grantor != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.GrantStmt.Grantor}}, stack, v)
		}

	case *nodes.Node_ObjectWithArgs:

		WalkList(n.ObjectWithArgs.Objname, stack, v)

		WalkList(n.ObjectWithArgs.Objargs, stack, v)

		WalkList(n.ObjectWithArgs.Objfuncargs, stack, v)

	case *nodes.Node_AccessPriv:

		WalkList(n.AccessPriv.Cols, stack, v)

	case *nodes.Node_GrantRoleStmt:

		WalkList(n.GrantRoleStmt.GrantedRoles, stack, v)

		WalkList(n.GrantRoleStmt.GranteeRoles, stack, v)

		WalkList(n.GrantRoleStmt.Opt, stack, v)

		if n.GrantRoleStmt.Grantor != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.GrantRoleStmt.Grantor}}, stack, v)
		}

	case *nodes.Node_AlterDefaultPrivilegesStmt:

		WalkList(n.AlterDefaultPrivilegesStmt.Options, stack, v)

		if n.AlterDefaultPrivilegesStmt.Action != nil {
			Walk(&nodes.Node{Node: &nodes.Node_GrantStmt{GrantStmt: n.AlterDefaultPrivilegesStmt.Action}}, stack, v)
		}

	case *nodes.Node_CopyStmt:

		if n.CopyStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.CopyStmt.Relation}}, stack, v)
		}

		Walk(n.CopyStmt.Query, stack, v)

		WalkList(n.CopyStmt.Attlist, stack, v)

		WalkList(n.CopyStmt.Options, stack, v)

		Walk(n.CopyStmt.WhereClause, stack, v)

	case *nodes.Node_VariableSetStmt:

		WalkList(n.VariableSetStmt.Args, stack, v)

	case *nodes.Node_CreateStmt:

		if n.CreateStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.CreateStmt.Relation}}, stack, v)
		}

		WalkList(n.CreateStmt.TableElts, stack, v)

		WalkList(n.CreateStmt.InhRelations, stack, v)

		if n.CreateStmt.Partbound != nil {
			Walk(&nodes.Node{Node: &nodes.Node_PartitionBoundSpec{PartitionBoundSpec: n.CreateStmt.Partbound}}, stack, v)
		}

		if n.CreateStmt.Partspec != nil {
			Walk(&nodes.Node{Node: &nodes.Node_PartitionSpec{PartitionSpec: n.CreateStmt.Partspec}}, stack, v)
		}

		if n.CreateStmt.OfTypename != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.CreateStmt.OfTypename}}, stack, v)
		}

		WalkList(n.CreateStmt.Constraints, stack, v)

		WalkList(n.CreateStmt.Options, stack, v)

	case *nodes.Node_Constraint:
		Walk(n.Constraint.RawExpr, stack, v)

		WalkList(n.Constraint.Keys, stack, v)

		WalkList(n.Constraint.Including, stack, v)

		WalkList(n.Constraint.Exclusions, stack, v)

		WalkList(n.Constraint.Options, stack, v)

		Walk(n.Constraint.WhereClause, stack, v)

		if n.Constraint.Pktable != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.Constraint.Pktable}}, stack, v)
		}

		WalkList(n.Constraint.FkAttrs, stack, v)

		WalkList(n.Constraint.PkAttrs, stack, v)

		WalkList(n.Constraint.FkDelSetCols, stack, v)

		WalkList(n.Constraint.OldConpfeqop, stack, v)

	case *nodes.Node_CreateTableSpaceStmt:

		if n.CreateTableSpaceStmt.Owner != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.CreateTableSpaceStmt.Owner}}, stack, v)
		}

		WalkList(n.CreateTableSpaceStmt.Options, stack, v)

	case *nodes.Node_AlterTableSpaceOptionsStmt:

		WalkList(n.AlterTableSpaceOptionsStmt.Options, stack, v)

	case *nodes.Node_AlterTableMoveAllStmt:

		WalkList(n.AlterTableMoveAllStmt.Roles, stack, v)

	case *nodes.Node_CreateExtensionStmt:

		WalkList(n.CreateExtensionStmt.Options, stack, v)

	case *nodes.Node_AlterExtensionStmt:

		WalkList(n.AlterExtensionStmt.Options, stack, v)

	case *nodes.Node_AlterExtensionContentsStmt:
		Walk(n.AlterExtensionContentsStmt.Object, stack, v)

	case *nodes.Node_CreateFdwStmt:

		WalkList(n.CreateFdwStmt.FuncOptions, stack, v)

		WalkList(n.CreateFdwStmt.Options, stack, v)

	case *nodes.Node_AlterFdwStmt:

		WalkList(n.AlterFdwStmt.FuncOptions, stack, v)

		WalkList(n.AlterFdwStmt.Options, stack, v)

	case *nodes.Node_CreateForeignServerStmt:

		WalkList(n.CreateForeignServerStmt.Options, stack, v)

	case *nodes.Node_AlterForeignServerStmt:

		WalkList(n.AlterForeignServerStmt.Options, stack, v)

	case *nodes.Node_CreateForeignTableStmt:

		if n.CreateForeignTableStmt.BaseStmt != nil {
			Walk(&nodes.Node{Node: &nodes.Node_CreateStmt{CreateStmt: n.CreateForeignTableStmt.BaseStmt}}, stack, v)
		}

		WalkList(n.CreateForeignTableStmt.Options, stack, v)

	case *nodes.Node_CreateUserMappingStmt:

		if n.CreateUserMappingStmt.User != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.CreateUserMappingStmt.User}}, stack, v)
		}

		WalkList(n.CreateUserMappingStmt.Options, stack, v)

	case *nodes.Node_AlterUserMappingStmt:

		if n.AlterUserMappingStmt.User != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.AlterUserMappingStmt.User}}, stack, v)
		}

		WalkList(n.AlterUserMappingStmt.Options, stack, v)

	case *nodes.Node_DropUserMappingStmt:

		if n.DropUserMappingStmt.User != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.DropUserMappingStmt.User}}, stack, v)
		}

	case *nodes.Node_ImportForeignSchemaStmt:

		WalkList(n.ImportForeignSchemaStmt.TableList, stack, v)

		WalkList(n.ImportForeignSchemaStmt.Options, stack, v)

	case *nodes.Node_CreatePolicyStmt:

		if n.CreatePolicyStmt.Table != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.CreatePolicyStmt.Table}}, stack, v)
		}

		WalkList(n.CreatePolicyStmt.Roles, stack, v)

		Walk(n.CreatePolicyStmt.Qual, stack, v)

		Walk(n.CreatePolicyStmt.WithCheck, stack, v)

	case *nodes.Node_AlterPolicyStmt:

		if n.AlterPolicyStmt.Table != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.AlterPolicyStmt.Table}}, stack, v)
		}

		WalkList(n.AlterPolicyStmt.Roles, stack, v)

		Walk(n.AlterPolicyStmt.Qual, stack, v)

		Walk(n.AlterPolicyStmt.WithCheck, stack, v)

	case *nodes.Node_CreateAmStmt:

		WalkList(n.CreateAmStmt.HandlerName, stack, v)

	case *nodes.Node_CreateTrigStmt:

		if n.CreateTrigStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.CreateTrigStmt.Relation}}, stack, v)
		}

		WalkList(n.CreateTrigStmt.Funcname, stack, v)

		WalkList(n.CreateTrigStmt.Args, stack, v)

		WalkList(n.CreateTrigStmt.Columns, stack, v)

		Walk(n.CreateTrigStmt.WhenClause, stack, v)

		WalkList(n.CreateTrigStmt.TransitionRels, stack, v)

		if n.CreateTrigStmt.Constrrel != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.CreateTrigStmt.Constrrel}}, stack, v)
		}

	case *nodes.Node_CreateEventTrigStmt:

		WalkList(n.CreateEventTrigStmt.Whenclause, stack, v)

		WalkList(n.CreateEventTrigStmt.Funcname, stack, v)

	case *nodes.Node_CreatePlangStmt:

		WalkList(n.CreatePlangStmt.Plhandler, stack, v)

		WalkList(n.CreatePlangStmt.Plinline, stack, v)

		WalkList(n.CreatePlangStmt.Plvalidator, stack, v)

	case *nodes.Node_CreateRoleStmt:

		WalkList(n.CreateRoleStmt.Options, stack, v)

	case *nodes.Node_AlterRoleStmt:

		if n.AlterRoleStmt.Role != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.AlterRoleStmt.Role}}, stack, v)
		}

		WalkList(n.AlterRoleStmt.Options, stack, v)

	case *nodes.Node_AlterRoleSetStmt:

		if n.AlterRoleSetStmt.Role != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.AlterRoleSetStmt.Role}}, stack, v)
		}

		if n.AlterRoleSetStmt.Setstmt != nil {
			Walk(&nodes.Node{Node: &nodes.Node_VariableSetStmt{VariableSetStmt: n.AlterRoleSetStmt.Setstmt}}, stack, v)
		}

	case *nodes.Node_DropRoleStmt:

		WalkList(n.DropRoleStmt.Roles, stack, v)

	case *nodes.Node_CreateSeqStmt:

		if n.CreateSeqStmt.Sequence != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.CreateSeqStmt.Sequence}}, stack, v)
		}

		WalkList(n.CreateSeqStmt.Options, stack, v)

	case *nodes.Node_AlterSeqStmt:

		if n.AlterSeqStmt.Sequence != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.AlterSeqStmt.Sequence}}, stack, v)
		}

		WalkList(n.AlterSeqStmt.Options, stack, v)

	case *nodes.Node_DefineStmt:

		WalkList(n.DefineStmt.Defnames, stack, v)

		WalkList(n.DefineStmt.Args, stack, v)

		WalkList(n.DefineStmt.Definition, stack, v)

	case *nodes.Node_CreateDomainStmt:

		WalkList(n.CreateDomainStmt.Domainname, stack, v)

		if n.CreateDomainStmt.TypeName != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.CreateDomainStmt.TypeName}}, stack, v)
		}

		if n.CreateDomainStmt.CollClause != nil {
			Walk(&nodes.Node{Node: &nodes.Node_CollateClause{CollateClause: n.CreateDomainStmt.CollClause}}, stack, v)
		}

		WalkList(n.CreateDomainStmt.Constraints, stack, v)

	case *nodes.Node_CreateOpClassStmt:

		WalkList(n.CreateOpClassStmt.Opclassname, stack, v)

		WalkList(n.CreateOpClassStmt.Opfamilyname, stack, v)

		if n.CreateOpClassStmt.Datatype != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.CreateOpClassStmt.Datatype}}, stack, v)
		}

		WalkList(n.CreateOpClassStmt.Items, stack, v)

	case *nodes.Node_CreateOpClassItem:

		if n.CreateOpClassItem.Name != nil {
			Walk(&nodes.Node{Node: &nodes.Node_ObjectWithArgs{ObjectWithArgs: n.CreateOpClassItem.Name}}, stack, v)
		}

		WalkList(n.CreateOpClassItem.OrderFamily, stack, v)

		WalkList(n.CreateOpClassItem.ClassArgs, stack, v)

		if n.CreateOpClassItem.Storedtype != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.CreateOpClassItem.Storedtype}}, stack, v)
		}

	case *nodes.Node_CreateOpFamilyStmt:

		WalkList(n.CreateOpFamilyStmt.Opfamilyname, stack, v)

	case *nodes.Node_AlterOpFamilyStmt:

		WalkList(n.AlterOpFamilyStmt.Opfamilyname, stack, v)

		WalkList(n.AlterOpFamilyStmt.Items, stack, v)

	case *nodes.Node_DropStmt:

		WalkList(n.DropStmt.Objects, stack, v)

	case *nodes.Node_TruncateStmt:

		WalkList(n.TruncateStmt.Relations, stack, v)

	case *nodes.Node_CommentStmt:
		Walk(n.CommentStmt.Object, stack, v)

	case *nodes.Node_SecLabelStmt:
		Walk(n.SecLabelStmt.Object, stack, v)

	case *nodes.Node_DeclareCursorStmt:
		Walk(n.DeclareCursorStmt.Query, stack, v)

	case *nodes.Node_IndexStmt:

		if n.IndexStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.IndexStmt.Relation}}, stack, v)
		}

		WalkList(n.IndexStmt.IndexParams, stack, v)

		WalkList(n.IndexStmt.IndexIncludingParams, stack, v)

		WalkList(n.IndexStmt.Options, stack, v)

		Walk(n.IndexStmt.WhereClause, stack, v)

		WalkList(n.IndexStmt.ExcludeOpNames, stack, v)

	case *nodes.Node_CreateStatsStmt:

		WalkList(n.CreateStatsStmt.Defnames, stack, v)

		WalkList(n.CreateStatsStmt.StatTypes, stack, v)

		WalkList(n.CreateStatsStmt.Exprs, stack, v)

		WalkList(n.CreateStatsStmt.Relations, stack, v)

	case *nodes.Node_StatsElem:
		Walk(n.StatsElem.Expr, stack, v)

	case *nodes.Node_AlterStatsStmt:

		WalkList(n.AlterStatsStmt.Defnames, stack, v)

		Walk(n.AlterStatsStmt.Stxstattarget, stack, v)

	case *nodes.Node_CreateFunctionStmt:

		WalkList(n.CreateFunctionStmt.Funcname, stack, v)

		WalkList(n.CreateFunctionStmt.Parameters, stack, v)

		if n.CreateFunctionStmt.ReturnType != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.CreateFunctionStmt.ReturnType}}, stack, v)
		}

		WalkList(n.CreateFunctionStmt.Options, stack, v)

		Walk(n.CreateFunctionStmt.SqlBody, stack, v)

	case *nodes.Node_FunctionParameter:

		if n.FunctionParameter.ArgType != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.FunctionParameter.ArgType}}, stack, v)
		}

		Walk(n.FunctionParameter.Defexpr, stack, v)

	case *nodes.Node_AlterFunctionStmt:

		if n.AlterFunctionStmt.Func != nil {
			Walk(&nodes.Node{Node: &nodes.Node_ObjectWithArgs{ObjectWithArgs: n.AlterFunctionStmt.Func}}, stack, v)
		}

		WalkList(n.AlterFunctionStmt.Actions, stack, v)

	case *nodes.Node_DoStmt:

		WalkList(n.DoStmt.Args, stack, v)

	case *nodes.Node_CallStmt:

		if n.CallStmt.Funccall != nil {
			Walk(&nodes.Node{Node: &nodes.Node_FuncCall{FuncCall: n.CallStmt.Funccall}}, stack, v)
		}

		if n.CallStmt.Funcexpr != nil {
			Walk(&nodes.Node{Node: &nodes.Node_FuncExpr{FuncExpr: n.CallStmt.Funcexpr}}, stack, v)
		}

		WalkList(n.CallStmt.Outargs, stack, v)

	case *nodes.Node_RenameStmt:

		if n.RenameStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.RenameStmt.Relation}}, stack, v)
		}

		Walk(n.RenameStmt.Object, stack, v)

	case *nodes.Node_AlterObjectDependsStmt:

		if n.AlterObjectDependsStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.AlterObjectDependsStmt.Relation}}, stack, v)
		}

		Walk(n.AlterObjectDependsStmt.Object, stack, v)

		if n.AlterObjectDependsStmt.Extname != nil {
			Walk(&nodes.Node{Node: &nodes.Node_String_{String_: n.AlterObjectDependsStmt.Extname}}, stack, v)
		}

	case *nodes.Node_AlterObjectSchemaStmt:

		if n.AlterObjectSchemaStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.AlterObjectSchemaStmt.Relation}}, stack, v)
		}

		Walk(n.AlterObjectSchemaStmt.Object, stack, v)

	case *nodes.Node_AlterOwnerStmt:

		if n.AlterOwnerStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.AlterOwnerStmt.Relation}}, stack, v)
		}

		Walk(n.AlterOwnerStmt.Object, stack, v)

		if n.AlterOwnerStmt.Newowner != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.AlterOwnerStmt.Newowner}}, stack, v)
		}

	case *nodes.Node_AlterOperatorStmt:

		if n.AlterOperatorStmt.Opername != nil {
			Walk(&nodes.Node{Node: &nodes.Node_ObjectWithArgs{ObjectWithArgs: n.AlterOperatorStmt.Opername}}, stack, v)
		}

		WalkList(n.AlterOperatorStmt.Options, stack, v)

	case *nodes.Node_AlterTypeStmt:

		WalkList(n.AlterTypeStmt.TypeName, stack, v)

		WalkList(n.AlterTypeStmt.Options, stack, v)

	case *nodes.Node_RuleStmt:

		if n.RuleStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.RuleStmt.Relation}}, stack, v)
		}

		Walk(n.RuleStmt.WhereClause, stack, v)

		WalkList(n.RuleStmt.Actions, stack, v)

	case *nodes.Node_TransactionStmt:

		WalkList(n.TransactionStmt.Options, stack, v)

	case *nodes.Node_CompositeTypeStmt:

		if n.CompositeTypeStmt.Typevar != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.CompositeTypeStmt.Typevar}}, stack, v)
		}

		WalkList(n.CompositeTypeStmt.Coldeflist, stack, v)

	case *nodes.Node_CreateEnumStmt:

		WalkList(n.CreateEnumStmt.TypeName, stack, v)

		WalkList(n.CreateEnumStmt.Vals, stack, v)

	case *nodes.Node_CreateRangeStmt:

		WalkList(n.CreateRangeStmt.TypeName, stack, v)

		WalkList(n.CreateRangeStmt.Params, stack, v)

	case *nodes.Node_AlterEnumStmt:

		WalkList(n.AlterEnumStmt.TypeName, stack, v)

	case *nodes.Node_ViewStmt:

		if n.ViewStmt.View != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.ViewStmt.View}}, stack, v)
		}

		WalkList(n.ViewStmt.Aliases, stack, v)

		Walk(n.ViewStmt.Query, stack, v)

		WalkList(n.ViewStmt.Options, stack, v)

	case *nodes.Node_CreatedbStmt:

		WalkList(n.CreatedbStmt.Options, stack, v)

	case *nodes.Node_AlterDatabaseStmt:

		WalkList(n.AlterDatabaseStmt.Options, stack, v)

	case *nodes.Node_AlterDatabaseSetStmt:

		if n.AlterDatabaseSetStmt.Setstmt != nil {
			Walk(&nodes.Node{Node: &nodes.Node_VariableSetStmt{VariableSetStmt: n.AlterDatabaseSetStmt.Setstmt}}, stack, v)
		}

	case *nodes.Node_DropdbStmt:

		WalkList(n.DropdbStmt.Options, stack, v)

	case *nodes.Node_AlterSystemStmt:

		if n.AlterSystemStmt.Setstmt != nil {
			Walk(&nodes.Node{Node: &nodes.Node_VariableSetStmt{VariableSetStmt: n.AlterSystemStmt.Setstmt}}, stack, v)
		}

	case *nodes.Node_ClusterStmt:

		if n.ClusterStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.ClusterStmt.Relation}}, stack, v)
		}

		WalkList(n.ClusterStmt.Params, stack, v)

	case *nodes.Node_VacuumStmt:

		WalkList(n.VacuumStmt.Options, stack, v)

		WalkList(n.VacuumStmt.Rels, stack, v)

	case *nodes.Node_VacuumRelation:

		if n.VacuumRelation.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.VacuumRelation.Relation}}, stack, v)
		}

		WalkList(n.VacuumRelation.VaCols, stack, v)

	case *nodes.Node_ExplainStmt:
		Walk(n.ExplainStmt.Query, stack, v)

		WalkList(n.ExplainStmt.Options, stack, v)

	case *nodes.Node_CreateTableAsStmt:
		Walk(n.CreateTableAsStmt.Query, stack, v)

		if n.CreateTableAsStmt.Into != nil {
			Walk(&nodes.Node{Node: &nodes.Node_IntoClause{IntoClause: n.CreateTableAsStmt.Into}}, stack, v)
		}

	case *nodes.Node_RefreshMatViewStmt:

		if n.RefreshMatViewStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.RefreshMatViewStmt.Relation}}, stack, v)
		}

	case *nodes.Node_LockStmt:

		WalkList(n.LockStmt.Relations, stack, v)

	case *nodes.Node_ConstraintsSetStmt:

		WalkList(n.ConstraintsSetStmt.Constraints, stack, v)

	case *nodes.Node_ReindexStmt:

		if n.ReindexStmt.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.ReindexStmt.Relation}}, stack, v)
		}

		WalkList(n.ReindexStmt.Params, stack, v)

	case *nodes.Node_CreateConversionStmt:

		WalkList(n.CreateConversionStmt.ConversionName, stack, v)

		WalkList(n.CreateConversionStmt.FuncName, stack, v)

	case *nodes.Node_CreateCastStmt:

		if n.CreateCastStmt.Sourcetype != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.CreateCastStmt.Sourcetype}}, stack, v)
		}

		if n.CreateCastStmt.Targettype != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.CreateCastStmt.Targettype}}, stack, v)
		}

		if n.CreateCastStmt.Func != nil {
			Walk(&nodes.Node{Node: &nodes.Node_ObjectWithArgs{ObjectWithArgs: n.CreateCastStmt.Func}}, stack, v)
		}

	case *nodes.Node_CreateTransformStmt:

		if n.CreateTransformStmt.TypeName != nil {
			Walk(&nodes.Node{Node: &nodes.Node_TypeName{TypeName: n.CreateTransformStmt.TypeName}}, stack, v)
		}

		if n.CreateTransformStmt.Fromsql != nil {
			Walk(&nodes.Node{Node: &nodes.Node_ObjectWithArgs{ObjectWithArgs: n.CreateTransformStmt.Fromsql}}, stack, v)
		}

		if n.CreateTransformStmt.Tosql != nil {
			Walk(&nodes.Node{Node: &nodes.Node_ObjectWithArgs{ObjectWithArgs: n.CreateTransformStmt.Tosql}}, stack, v)
		}

	case *nodes.Node_PrepareStmt:

		WalkList(n.PrepareStmt.Argtypes, stack, v)

		Walk(n.PrepareStmt.Query, stack, v)

	case *nodes.Node_ExecuteStmt:

		WalkList(n.ExecuteStmt.Params, stack, v)

	case *nodes.Node_DropOwnedStmt:

		WalkList(n.DropOwnedStmt.Roles, stack, v)

	case *nodes.Node_ReassignOwnedStmt:

		WalkList(n.ReassignOwnedStmt.Roles, stack, v)

		if n.ReassignOwnedStmt.Newrole != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RoleSpec{RoleSpec: n.ReassignOwnedStmt.Newrole}}, stack, v)
		}

	case *nodes.Node_AlterTsdictionaryStmt:

		WalkList(n.AlterTsdictionaryStmt.Dictname, stack, v)

		WalkList(n.AlterTsdictionaryStmt.Options, stack, v)

	case *nodes.Node_AlterTsconfigurationStmt:

		WalkList(n.AlterTsconfigurationStmt.Cfgname, stack, v)

		WalkList(n.AlterTsconfigurationStmt.Tokentype, stack, v)

		WalkList(n.AlterTsconfigurationStmt.Dicts, stack, v)

	case *nodes.Node_PublicationTable:

		if n.PublicationTable.Relation != nil {
			Walk(&nodes.Node{Node: &nodes.Node_RangeVar{RangeVar: n.PublicationTable.Relation}}, stack, v)
		}

		Walk(n.PublicationTable.WhereClause, stack, v)

		WalkList(n.PublicationTable.Columns, stack, v)

	case *nodes.Node_PublicationObjSpec:

		if n.PublicationObjSpec.Pubtable != nil {
			Walk(&nodes.Node{Node: &nodes.Node_PublicationTable{PublicationTable: n.PublicationObjSpec.Pubtable}}, stack, v)
		}

	case *nodes.Node_CreatePublicationStmt:

		WalkList(n.CreatePublicationStmt.Options, stack, v)

		WalkList(n.CreatePublicationStmt.Pubobjects, stack, v)

	case *nodes.Node_AlterPublicationStmt:

		WalkList(n.AlterPublicationStmt.Options, stack, v)

		WalkList(n.AlterPublicationStmt.Pubobjects, stack, v)

	case *nodes.Node_CreateSubscriptionStmt:

		WalkList(n.CreateSubscriptionStmt.Publication, stack, v)

		WalkList(n.CreateSubscriptionStmt.Options, stack, v)

	case *nodes.Node_AlterSubscriptionStmt:

		WalkList(n.AlterSubscriptionStmt.Publication, stack, v)

		WalkList(n.AlterSubscriptionStmt.Options, stack, v)

	}
}

type MutateFunc func(node *nodes.Node, stack []*nodes.Node, visitor MutateFunc) MutateFunc

func mutateList(list []*nodes.Node, stack []*nodes.Node, v MutateFunc) {
	for i := range list {
		mutate(list[i], stack, v)
	}
}

func mutate(node *nodes.Node, stack []*nodes.Node, v MutateFunc) {

	if node == nil || isNilValue(*node) {
		return
	}

	if v = v(node, stack, v); v == nil {
		return
	}

	stack = append(stack, node)

	switch n := (node.Node).(type) {

	case *nodes.Node_Integer:

	case *nodes.Node_Float:

	case *nodes.Node_Boolean:

	case *nodes.Node_String_:

	case *nodes.Node_BitString:

	case *nodes.Node_List:
		mutateList(n.List.Items, stack, v)

	case *nodes.Node_OidList:
		mutateList(n.OidList.Items, stack, v)

	case *nodes.Node_IntList:
		mutateList(n.IntList.Items, stack, v)

	case *nodes.Node_AConst:

	case *nodes.Node_Alias:
		mutateList(n.Alias.Colnames, stack, v)

	case *nodes.Node_RangeVar:

	case *nodes.Node_TableFunc:
		mutateList(n.TableFunc.NsUris, stack, v)
		mutateList(n.TableFunc.NsNames, stack, v)
		mutate(n.TableFunc.Docexpr, stack, v) // Node
		mutate(n.TableFunc.Rowexpr, stack, v) // Node
		mutateList(n.TableFunc.Colnames, stack, v)
		mutateList(n.TableFunc.Coltypes, stack, v)
		mutateList(n.TableFunc.Coltypmods, stack, v)
		mutateList(n.TableFunc.Colcollations, stack, v)
		mutateList(n.TableFunc.Colexprs, stack, v)
		mutateList(n.TableFunc.Coldefexprs, stack, v)
		mutateList(n.TableFunc.Colvalexprs, stack, v)
		mutateList(n.TableFunc.Passingvalexprs, stack, v)
		mutate(n.TableFunc.Plan, stack, v) // Node

	case *nodes.Node_IntoClause:

		mutateList(n.IntoClause.ColNames, stack, v)
		mutateList(n.IntoClause.Options, stack, v)
		mutate(n.IntoClause.ViewQuery, stack, v) // Node

	case *nodes.Node_Var:
		mutate(n.Var.Xpr, stack, v) // Node

	case *nodes.Node_Param:
		mutate(n.Param.Xpr, stack, v) // Node

	case *nodes.Node_Aggref:
		mutate(n.Aggref.Xpr, stack, v) // Node
		mutateList(n.Aggref.Aggargtypes, stack, v)
		mutateList(n.Aggref.Aggdirectargs, stack, v)
		mutateList(n.Aggref.Args, stack, v)
		mutateList(n.Aggref.Aggorder, stack, v)
		mutateList(n.Aggref.Aggdistinct, stack, v)
		mutate(n.Aggref.Aggfilter, stack, v) // Node

	case *nodes.Node_GroupingFunc:
		mutate(n.GroupingFunc.Xpr, stack, v) // Node
		mutateList(n.GroupingFunc.Args, stack, v)
		mutateList(n.GroupingFunc.Refs, stack, v)

	case *nodes.Node_WindowFunc:
		mutate(n.WindowFunc.Xpr, stack, v) // Node
		mutateList(n.WindowFunc.Args, stack, v)
		mutate(n.WindowFunc.Aggfilter, stack, v) // Node
		mutateList(n.WindowFunc.RunCondition, stack, v)

	case *nodes.Node_WindowFuncRunCondition:
		mutate(n.WindowFuncRunCondition.Xpr, stack, v) // Node
		mutate(n.WindowFuncRunCondition.Arg, stack, v) // Node

	case *nodes.Node_MergeSupportFunc:
		mutate(n.MergeSupportFunc.Xpr, stack, v) // Node

	case *nodes.Node_SubscriptingRef:
		mutate(n.SubscriptingRef.Xpr, stack, v) // Node
		mutateList(n.SubscriptingRef.Refupperindexpr, stack, v)
		mutateList(n.SubscriptingRef.Reflowerindexpr, stack, v)
		mutate(n.SubscriptingRef.Refexpr, stack, v)      // Node
		mutate(n.SubscriptingRef.Refassgnexpr, stack, v) // Node

	case *nodes.Node_FuncExpr:
		mutate(n.FuncExpr.Xpr, stack, v) // Node
		mutateList(n.FuncExpr.Args, stack, v)

	case *nodes.Node_NamedArgExpr:
		mutate(n.NamedArgExpr.Xpr, stack, v) // Node
		mutate(n.NamedArgExpr.Arg, stack, v) // Node

	case *nodes.Node_OpExpr:
		mutate(n.OpExpr.Xpr, stack, v) // Node
		mutateList(n.OpExpr.Args, stack, v)

	case *nodes.Node_DistinctExpr:
		mutate(n.DistinctExpr.Xpr, stack, v) // Node
		mutateList(n.DistinctExpr.Args, stack, v)

	case *nodes.Node_NullIfExpr:
		mutate(n.NullIfExpr.Xpr, stack, v) // Node
		mutateList(n.NullIfExpr.Args, stack, v)

	case *nodes.Node_ScalarArrayOpExpr:
		mutate(n.ScalarArrayOpExpr.Xpr, stack, v) // Node
		mutateList(n.ScalarArrayOpExpr.Args, stack, v)

	case *nodes.Node_BoolExpr:
		mutate(n.BoolExpr.Xpr, stack, v) // Node
		mutateList(n.BoolExpr.Args, stack, v)

	case *nodes.Node_SubLink:
		mutate(n.SubLink.Xpr, stack, v)      // Node
		mutate(n.SubLink.Testexpr, stack, v) // Node
		mutateList(n.SubLink.OperName, stack, v)
		mutate(n.SubLink.Subselect, stack, v) // Node

	case *nodes.Node_SubPlan:
		mutate(n.SubPlan.Xpr, stack, v)      // Node
		mutate(n.SubPlan.Testexpr, stack, v) // Node
		mutateList(n.SubPlan.ParamIds, stack, v)
		mutateList(n.SubPlan.SetParam, stack, v)
		mutateList(n.SubPlan.ParParam, stack, v)
		mutateList(n.SubPlan.Args, stack, v)

	case *nodes.Node_AlternativeSubPlan:
		mutate(n.AlternativeSubPlan.Xpr, stack, v) // Node
		mutateList(n.AlternativeSubPlan.Subplans, stack, v)

	case *nodes.Node_FieldSelect:
		mutate(n.FieldSelect.Xpr, stack, v) // Node
		mutate(n.FieldSelect.Arg, stack, v) // Node

	case *nodes.Node_FieldStore:
		mutate(n.FieldStore.Xpr, stack, v) // Node
		mutate(n.FieldStore.Arg, stack, v) // Node
		mutateList(n.FieldStore.Newvals, stack, v)
		mutateList(n.FieldStore.Fieldnums, stack, v)

	case *nodes.Node_RelabelType:
		mutate(n.RelabelType.Xpr, stack, v) // Node
		mutate(n.RelabelType.Arg, stack, v) // Node

	case *nodes.Node_CoerceViaIo:
		mutate(n.CoerceViaIo.Xpr, stack, v) // Node
		mutate(n.CoerceViaIo.Arg, stack, v) // Node

	case *nodes.Node_ArrayCoerceExpr:
		mutate(n.ArrayCoerceExpr.Xpr, stack, v)      // Node
		mutate(n.ArrayCoerceExpr.Arg, stack, v)      // Node
		mutate(n.ArrayCoerceExpr.Elemexpr, stack, v) // Node

	case *nodes.Node_ConvertRowtypeExpr:
		mutate(n.ConvertRowtypeExpr.Xpr, stack, v) // Node
		mutate(n.ConvertRowtypeExpr.Arg, stack, v) // Node

	case *nodes.Node_CollateExpr:
		mutate(n.CollateExpr.Xpr, stack, v) // Node
		mutate(n.CollateExpr.Arg, stack, v) // Node

	case *nodes.Node_CaseExpr:
		mutate(n.CaseExpr.Xpr, stack, v) // Node
		mutate(n.CaseExpr.Arg, stack, v) // Node
		mutateList(n.CaseExpr.Args, stack, v)
		mutate(n.CaseExpr.Defresult, stack, v) // Node

	case *nodes.Node_CaseWhen:
		mutate(n.CaseWhen.Xpr, stack, v)    // Node
		mutate(n.CaseWhen.Expr, stack, v)   // Node
		mutate(n.CaseWhen.Result, stack, v) // Node

	case *nodes.Node_CaseTestExpr:
		mutate(n.CaseTestExpr.Xpr, stack, v) // Node

	case *nodes.Node_ArrayExpr:
		mutate(n.ArrayExpr.Xpr, stack, v) // Node
		mutateList(n.ArrayExpr.Elements, stack, v)

	case *nodes.Node_RowExpr:
		mutate(n.RowExpr.Xpr, stack, v) // Node
		mutateList(n.RowExpr.Args, stack, v)
		mutateList(n.RowExpr.Colnames, stack, v)

	case *nodes.Node_RowCompareExpr:
		mutate(n.RowCompareExpr.Xpr, stack, v) // Node
		mutateList(n.RowCompareExpr.Opnos, stack, v)
		mutateList(n.RowCompareExpr.Opfamilies, stack, v)
		mutateList(n.RowCompareExpr.Inputcollids, stack, v)
		mutateList(n.RowCompareExpr.Largs, stack, v)
		mutateList(n.RowCompareExpr.Rargs, stack, v)

	case *nodes.Node_CoalesceExpr:
		mutate(n.CoalesceExpr.Xpr, stack, v) // Node
		mutateList(n.CoalesceExpr.Args, stack, v)

	case *nodes.Node_MinMaxExpr:
		mutate(n.MinMaxExpr.Xpr, stack, v) // Node
		mutateList(n.MinMaxExpr.Args, stack, v)

	case *nodes.Node_SqlvalueFunction:
		mutate(n.SqlvalueFunction.Xpr, stack, v) // Node

	case *nodes.Node_XmlExpr:
		mutate(n.XmlExpr.Xpr, stack, v) // Node
		mutateList(n.XmlExpr.NamedArgs, stack, v)
		mutateList(n.XmlExpr.ArgNames, stack, v)
		mutateList(n.XmlExpr.Args, stack, v)

	case *nodes.Node_JsonFormat:

	case *nodes.Node_JsonReturning:

	case *nodes.Node_JsonValueExpr:
		mutate(n.JsonValueExpr.RawExpr, stack, v)       // Node
		mutate(n.JsonValueExpr.FormattedExpr, stack, v) // Node

	case *nodes.Node_JsonConstructorExpr:
		mutate(n.JsonConstructorExpr.Xpr, stack, v) // Node
		mutateList(n.JsonConstructorExpr.Args, stack, v)
		mutate(n.JsonConstructorExpr.Func, stack, v)     // Node
		mutate(n.JsonConstructorExpr.Coercion, stack, v) // Node

	case *nodes.Node_JsonIsPredicate:
		mutate(n.JsonIsPredicate.Expr, stack, v) // Node

	case *nodes.Node_JsonBehavior:
		mutate(n.JsonBehavior.Expr, stack, v) // Node

	case *nodes.Node_JsonExpr:
		mutate(n.JsonExpr.Xpr, stack, v)           // Node
		mutate(n.JsonExpr.FormattedExpr, stack, v) // Node

		mutate(n.JsonExpr.PathSpec, stack, v) // Node

		mutateList(n.JsonExpr.PassingNames, stack, v)
		mutateList(n.JsonExpr.PassingValues, stack, v)

	case *nodes.Node_JsonTablePath:

	case *nodes.Node_JsonTablePathScan:
		mutate(n.JsonTablePathScan.Plan, stack, v) // Node

		mutate(n.JsonTablePathScan.Child, stack, v) // Node

	case *nodes.Node_JsonTableSiblingJoin:
		mutate(n.JsonTableSiblingJoin.Plan, stack, v)  // Node
		mutate(n.JsonTableSiblingJoin.Lplan, stack, v) // Node
		mutate(n.JsonTableSiblingJoin.Rplan, stack, v) // Node

	case *nodes.Node_NullTest:
		mutate(n.NullTest.Xpr, stack, v) // Node
		mutate(n.NullTest.Arg, stack, v) // Node

	case *nodes.Node_BooleanTest:
		mutate(n.BooleanTest.Xpr, stack, v) // Node
		mutate(n.BooleanTest.Arg, stack, v) // Node

	case *nodes.Node_MergeAction:
		mutate(n.MergeAction.Qual, stack, v) // Node
		mutateList(n.MergeAction.TargetList, stack, v)
		mutateList(n.MergeAction.UpdateColnos, stack, v)

	case *nodes.Node_CoerceToDomain:
		mutate(n.CoerceToDomain.Xpr, stack, v) // Node
		mutate(n.CoerceToDomain.Arg, stack, v) // Node

	case *nodes.Node_CoerceToDomainValue:
		mutate(n.CoerceToDomainValue.Xpr, stack, v) // Node

	case *nodes.Node_SetToDefault:
		mutate(n.SetToDefault.Xpr, stack, v) // Node

	case *nodes.Node_CurrentOfExpr:
		mutate(n.CurrentOfExpr.Xpr, stack, v) // Node

	case *nodes.Node_NextValueExpr:
		mutate(n.NextValueExpr.Xpr, stack, v) // Node

	case *nodes.Node_InferenceElem:
		mutate(n.InferenceElem.Xpr, stack, v)  // Node
		mutate(n.InferenceElem.Expr, stack, v) // Node

	case *nodes.Node_TargetEntry:
		mutate(n.TargetEntry.Xpr, stack, v)  // Node
		mutate(n.TargetEntry.Expr, stack, v) // Node

	case *nodes.Node_RangeTblRef:

	case *nodes.Node_JoinExpr:
		mutate(n.JoinExpr.Larg, stack, v) // Node
		mutate(n.JoinExpr.Rarg, stack, v) // Node
		mutateList(n.JoinExpr.UsingClause, stack, v)

		mutate(n.JoinExpr.Quals, stack, v) // Node

	case *nodes.Node_FromExpr:
		mutateList(n.FromExpr.Fromlist, stack, v)
		mutate(n.FromExpr.Quals, stack, v) // Node

	case *nodes.Node_OnConflictExpr:
		mutateList(n.OnConflictExpr.ArbiterElems, stack, v)
		mutate(n.OnConflictExpr.ArbiterWhere, stack, v) // Node
		mutateList(n.OnConflictExpr.OnConflictSet, stack, v)
		mutate(n.OnConflictExpr.OnConflictWhere, stack, v) // Node
		mutateList(n.OnConflictExpr.ExclRelTlist, stack, v)

	case *nodes.Node_Query:
		mutate(n.Query.UtilityStmt, stack, v) // Node
		mutateList(n.Query.CteList, stack, v)
		mutateList(n.Query.Rtable, stack, v)
		mutateList(n.Query.Rteperminfos, stack, v)

		mutateList(n.Query.MergeActionList, stack, v)
		mutate(n.Query.MergeJoinCondition, stack, v) // Node
		mutateList(n.Query.TargetList, stack, v)

		mutateList(n.Query.ReturningList, stack, v)
		mutateList(n.Query.GroupClause, stack, v)
		mutateList(n.Query.GroupingSets, stack, v)
		mutate(n.Query.HavingQual, stack, v) // Node
		mutateList(n.Query.WindowClause, stack, v)
		mutateList(n.Query.DistinctClause, stack, v)
		mutateList(n.Query.SortClause, stack, v)
		mutate(n.Query.LimitOffset, stack, v) // Node
		mutate(n.Query.LimitCount, stack, v)  // Node
		mutateList(n.Query.RowMarks, stack, v)
		mutate(n.Query.SetOperations, stack, v) // Node
		mutateList(n.Query.ConstraintDeps, stack, v)
		mutateList(n.Query.WithCheckOptions, stack, v)

	case *nodes.Node_TypeName:
		mutateList(n.TypeName.Names, stack, v)
		mutateList(n.TypeName.Typmods, stack, v)
		mutateList(n.TypeName.ArrayBounds, stack, v)

	case *nodes.Node_ColumnRef:
		mutateList(n.ColumnRef.Fields, stack, v)

	case *nodes.Node_ParamRef:

	case *nodes.Node_AExpr:
		mutateList(n.AExpr.Name, stack, v)
		mutate(n.AExpr.Lexpr, stack, v) // Node
		mutate(n.AExpr.Rexpr, stack, v) // Node

	case *nodes.Node_TypeCast:
		mutate(n.TypeCast.Arg, stack, v) // Node

	case *nodes.Node_CollateClause:
		mutate(n.CollateClause.Arg, stack, v) // Node
		mutateList(n.CollateClause.Collname, stack, v)

	case *nodes.Node_RoleSpec:

	case *nodes.Node_FuncCall:
		mutateList(n.FuncCall.Funcname, stack, v)
		mutateList(n.FuncCall.Args, stack, v)
		mutateList(n.FuncCall.AggOrder, stack, v)
		mutate(n.FuncCall.AggFilter, stack, v) // Node

	case *nodes.Node_AStar:

	case *nodes.Node_AIndices:
		mutate(n.AIndices.Lidx, stack, v) // Node
		mutate(n.AIndices.Uidx, stack, v) // Node

	case *nodes.Node_AIndirection:
		mutate(n.AIndirection.Arg, stack, v) // Node
		mutateList(n.AIndirection.Indirection, stack, v)

	case *nodes.Node_AArrayExpr:
		mutateList(n.AArrayExpr.Elements, stack, v)

	case *nodes.Node_ResTarget:
		mutateList(n.ResTarget.Indirection, stack, v)
		mutate(n.ResTarget.Val, stack, v) // Node

	case *nodes.Node_MultiAssignRef:
		mutate(n.MultiAssignRef.Source, stack, v) // Node

	case *nodes.Node_SortBy:
		mutate(n.SortBy.Node, stack, v) // Node
		mutateList(n.SortBy.UseOp, stack, v)

	case *nodes.Node_WindowDef:
		mutateList(n.WindowDef.PartitionClause, stack, v)
		mutateList(n.WindowDef.OrderClause, stack, v)
		mutate(n.WindowDef.StartOffset, stack, v) // Node
		mutate(n.WindowDef.EndOffset, stack, v)   // Node

	case *nodes.Node_RangeSubselect:
		mutate(n.RangeSubselect.Subquery, stack, v) // Node

	case *nodes.Node_RangeFunction:
		mutateList(n.RangeFunction.Functions, stack, v)

		mutateList(n.RangeFunction.Coldeflist, stack, v)

	case *nodes.Node_RangeTableFunc:
		mutate(n.RangeTableFunc.Docexpr, stack, v) // Node
		mutate(n.RangeTableFunc.Rowexpr, stack, v) // Node
		mutateList(n.RangeTableFunc.Namespaces, stack, v)
		mutateList(n.RangeTableFunc.Columns, stack, v)

	case *nodes.Node_RangeTableFuncCol:

		mutate(n.RangeTableFuncCol.Colexpr, stack, v)    // Node
		mutate(n.RangeTableFuncCol.Coldefexpr, stack, v) // Node

	case *nodes.Node_RangeTableSample:
		mutate(n.RangeTableSample.Relation, stack, v) // Node
		mutateList(n.RangeTableSample.Method, stack, v)
		mutateList(n.RangeTableSample.Args, stack, v)
		mutate(n.RangeTableSample.Repeatable, stack, v) // Node

	case *nodes.Node_ColumnDef:

		mutate(n.ColumnDef.RawDefault, stack, v)    // Node
		mutate(n.ColumnDef.CookedDefault, stack, v) // Node

		mutateList(n.ColumnDef.Constraints, stack, v)
		mutateList(n.ColumnDef.Fdwoptions, stack, v)

	case *nodes.Node_TableLikeClause:

	case *nodes.Node_IndexElem:
		mutate(n.IndexElem.Expr, stack, v) // Node
		mutateList(n.IndexElem.Collation, stack, v)
		mutateList(n.IndexElem.Opclass, stack, v)
		mutateList(n.IndexElem.Opclassopts, stack, v)

	case *nodes.Node_DefElem:
		mutate(n.DefElem.Arg, stack, v) // Node

	case *nodes.Node_LockingClause:
		mutateList(n.LockingClause.LockedRels, stack, v)

	case *nodes.Node_XmlSerialize:
		mutate(n.XmlSerialize.Expr, stack, v) // Node

	case *nodes.Node_PartitionElem:
		mutate(n.PartitionElem.Expr, stack, v) // Node
		mutateList(n.PartitionElem.Collation, stack, v)
		mutateList(n.PartitionElem.Opclass, stack, v)

	case *nodes.Node_PartitionSpec:
		mutateList(n.PartitionSpec.PartParams, stack, v)

	case *nodes.Node_PartitionBoundSpec:
		mutateList(n.PartitionBoundSpec.Listdatums, stack, v)
		mutateList(n.PartitionBoundSpec.Lowerdatums, stack, v)
		mutateList(n.PartitionBoundSpec.Upperdatums, stack, v)

	case *nodes.Node_PartitionRangeDatum:
		mutate(n.PartitionRangeDatum.Value, stack, v) // Node

	case *nodes.Node_SinglePartitionSpec:

	case *nodes.Node_PartitionCmd:

	case *nodes.Node_RangeTblEntry:

		mutateList(n.RangeTblEntry.Joinaliasvars, stack, v)
		mutateList(n.RangeTblEntry.Joinleftcols, stack, v)
		mutateList(n.RangeTblEntry.Joinrightcols, stack, v)

		mutateList(n.RangeTblEntry.Functions, stack, v)

		mutateList(n.RangeTblEntry.ValuesLists, stack, v)
		mutateList(n.RangeTblEntry.Coltypes, stack, v)
		mutateList(n.RangeTblEntry.Coltypmods, stack, v)
		mutateList(n.RangeTblEntry.Colcollations, stack, v)
		mutateList(n.RangeTblEntry.SecurityQuals, stack, v)

	case *nodes.Node_RtepermissionInfo:

	case *nodes.Node_RangeTblFunction:
		mutate(n.RangeTblFunction.Funcexpr, stack, v) // Node
		mutateList(n.RangeTblFunction.Funccolnames, stack, v)
		mutateList(n.RangeTblFunction.Funccoltypes, stack, v)
		mutateList(n.RangeTblFunction.Funccoltypmods, stack, v)
		mutateList(n.RangeTblFunction.Funccolcollations, stack, v)

	case *nodes.Node_TableSampleClause:
		mutateList(n.TableSampleClause.Args, stack, v)
		mutate(n.TableSampleClause.Repeatable, stack, v) // Node

	case *nodes.Node_WithCheckOption:
		mutate(n.WithCheckOption.Qual, stack, v) // Node

	case *nodes.Node_SortGroupClause:

	case *nodes.Node_GroupingSet:
		mutateList(n.GroupingSet.Content, stack, v)

	case *nodes.Node_WindowClause:
		mutateList(n.WindowClause.PartitionClause, stack, v)
		mutateList(n.WindowClause.OrderClause, stack, v)
		mutate(n.WindowClause.StartOffset, stack, v) // Node
		mutate(n.WindowClause.EndOffset, stack, v)   // Node

	case *nodes.Node_RowMarkClause:

	case *nodes.Node_WithClause:
		mutateList(n.WithClause.Ctes, stack, v)

	case *nodes.Node_InferClause:
		mutateList(n.InferClause.IndexElems, stack, v)
		mutate(n.InferClause.WhereClause, stack, v) // Node

	case *nodes.Node_OnConflictClause:

		mutateList(n.OnConflictClause.TargetList, stack, v)
		mutate(n.OnConflictClause.WhereClause, stack, v) // Node

	case *nodes.Node_CtesearchClause:
		mutateList(n.CtesearchClause.SearchColList, stack, v)

	case *nodes.Node_CtecycleClause:
		mutateList(n.CtecycleClause.CycleColList, stack, v)
		mutate(n.CtecycleClause.CycleMarkValue, stack, v)   // Node
		mutate(n.CtecycleClause.CycleMarkDefault, stack, v) // Node

	case *nodes.Node_CommonTableExpr:
		mutateList(n.CommonTableExpr.Aliascolnames, stack, v)
		mutate(n.CommonTableExpr.Ctequery, stack, v) // Node

		mutateList(n.CommonTableExpr.Ctecolnames, stack, v)
		mutateList(n.CommonTableExpr.Ctecoltypes, stack, v)
		mutateList(n.CommonTableExpr.Ctecoltypmods, stack, v)
		mutateList(n.CommonTableExpr.Ctecolcollations, stack, v)

	case *nodes.Node_MergeWhenClause:
		mutate(n.MergeWhenClause.Condition, stack, v) // Node
		mutateList(n.MergeWhenClause.TargetList, stack, v)
		mutateList(n.MergeWhenClause.Values, stack, v)

	case *nodes.Node_TriggerTransition:

	case *nodes.Node_JsonOutput:

	case *nodes.Node_JsonArgument:

	case *nodes.Node_JsonFuncExpr:

		mutate(n.JsonFuncExpr.Pathspec, stack, v) // Node
		mutateList(n.JsonFuncExpr.Passing, stack, v)

	case *nodes.Node_JsonTablePathSpec:
		mutate(n.JsonTablePathSpec.String_, stack, v) // Node

	case *nodes.Node_JsonTable:

		mutateList(n.JsonTable.Passing, stack, v)
		mutateList(n.JsonTable.Columns, stack, v)

	case *nodes.Node_JsonTableColumn:

		mutateList(n.JsonTableColumn.Columns, stack, v)

	case *nodes.Node_JsonKeyValue:
		mutate(n.JsonKeyValue.Key, stack, v) // Node

	case *nodes.Node_JsonParseExpr:

	case *nodes.Node_JsonScalarExpr:
		mutate(n.JsonScalarExpr.Expr, stack, v) // Node

	case *nodes.Node_JsonSerializeExpr:

	case *nodes.Node_JsonObjectConstructor:
		mutateList(n.JsonObjectConstructor.Exprs, stack, v)

	case *nodes.Node_JsonArrayConstructor:
		mutateList(n.JsonArrayConstructor.Exprs, stack, v)

	case *nodes.Node_JsonArrayQueryConstructor:
		mutate(n.JsonArrayQueryConstructor.Query, stack, v) // Node

	case *nodes.Node_JsonAggConstructor:

		mutate(n.JsonAggConstructor.AggFilter, stack, v) // Node
		mutateList(n.JsonAggConstructor.AggOrder, stack, v)

	case *nodes.Node_JsonObjectAgg:

	case *nodes.Node_JsonArrayAgg:

	case *nodes.Node_RawStmt:
		mutate(n.RawStmt.Stmt, stack, v) // Node

	case *nodes.Node_InsertStmt:

		mutateList(n.InsertStmt.Cols, stack, v)
		mutate(n.InsertStmt.SelectStmt, stack, v) // Node

		mutateList(n.InsertStmt.ReturningList, stack, v)

	case *nodes.Node_DeleteStmt:

		mutateList(n.DeleteStmt.UsingClause, stack, v)
		mutate(n.DeleteStmt.WhereClause, stack, v) // Node
		mutateList(n.DeleteStmt.ReturningList, stack, v)

	case *nodes.Node_UpdateStmt:

		mutateList(n.UpdateStmt.TargetList, stack, v)
		mutate(n.UpdateStmt.WhereClause, stack, v) // Node
		mutateList(n.UpdateStmt.FromClause, stack, v)
		mutateList(n.UpdateStmt.ReturningList, stack, v)

	case *nodes.Node_MergeStmt:

		mutate(n.MergeStmt.SourceRelation, stack, v) // Node
		mutate(n.MergeStmt.JoinCondition, stack, v)  // Node
		mutateList(n.MergeStmt.MergeWhenClauses, stack, v)
		mutateList(n.MergeStmt.ReturningList, stack, v)

	case *nodes.Node_SelectStmt:
		mutateList(n.SelectStmt.DistinctClause, stack, v)

		mutateList(n.SelectStmt.TargetList, stack, v)
		mutateList(n.SelectStmt.FromClause, stack, v)
		mutate(n.SelectStmt.WhereClause, stack, v) // Node
		mutateList(n.SelectStmt.GroupClause, stack, v)
		mutate(n.SelectStmt.HavingClause, stack, v) // Node
		mutateList(n.SelectStmt.WindowClause, stack, v)
		mutateList(n.SelectStmt.ValuesLists, stack, v)
		mutateList(n.SelectStmt.SortClause, stack, v)
		mutate(n.SelectStmt.LimitOffset, stack, v) // Node
		mutate(n.SelectStmt.LimitCount, stack, v)  // Node
		mutateList(n.SelectStmt.LockingClause, stack, v)

	case *nodes.Node_SetOperationStmt:
		mutate(n.SetOperationStmt.Larg, stack, v) // Node
		mutate(n.SetOperationStmt.Rarg, stack, v) // Node
		mutateList(n.SetOperationStmt.ColTypes, stack, v)
		mutateList(n.SetOperationStmt.ColTypmods, stack, v)
		mutateList(n.SetOperationStmt.ColCollations, stack, v)
		mutateList(n.SetOperationStmt.GroupClauses, stack, v)

	case *nodes.Node_ReturnStmt:
		mutate(n.ReturnStmt.Returnval, stack, v) // Node

	case *nodes.Node_PlassignStmt:
		mutateList(n.PlassignStmt.Indirection, stack, v)

	case *nodes.Node_CreateSchemaStmt:

		mutateList(n.CreateSchemaStmt.SchemaElts, stack, v)

	case *nodes.Node_AlterTableStmt:

		mutateList(n.AlterTableStmt.Cmds, stack, v)

	case *nodes.Node_ReplicaIdentityStmt:

	case *nodes.Node_AlterTableCmd:

		mutate(n.AlterTableCmd.Def, stack, v) // Node

	case *nodes.Node_AlterCollationStmt:
		mutateList(n.AlterCollationStmt.Collname, stack, v)

	case *nodes.Node_AlterDomainStmt:
		mutateList(n.AlterDomainStmt.TypeName, stack, v)
		mutate(n.AlterDomainStmt.Def, stack, v) // Node

	case *nodes.Node_GrantStmt:
		mutateList(n.GrantStmt.Objects, stack, v)
		mutateList(n.GrantStmt.Privileges, stack, v)
		mutateList(n.GrantStmt.Grantees, stack, v)

	case *nodes.Node_ObjectWithArgs:
		mutateList(n.ObjectWithArgs.Objname, stack, v)
		mutateList(n.ObjectWithArgs.Objargs, stack, v)
		mutateList(n.ObjectWithArgs.Objfuncargs, stack, v)

	case *nodes.Node_AccessPriv:
		mutateList(n.AccessPriv.Cols, stack, v)

	case *nodes.Node_GrantRoleStmt:
		mutateList(n.GrantRoleStmt.GrantedRoles, stack, v)
		mutateList(n.GrantRoleStmt.GranteeRoles, stack, v)
		mutateList(n.GrantRoleStmt.Opt, stack, v)

	case *nodes.Node_AlterDefaultPrivilegesStmt:
		mutateList(n.AlterDefaultPrivilegesStmt.Options, stack, v)

	case *nodes.Node_CopyStmt:

		mutate(n.CopyStmt.Query, stack, v) // Node
		mutateList(n.CopyStmt.Attlist, stack, v)
		mutateList(n.CopyStmt.Options, stack, v)
		mutate(n.CopyStmt.WhereClause, stack, v) // Node

	case *nodes.Node_VariableSetStmt:
		mutateList(n.VariableSetStmt.Args, stack, v)

	case *nodes.Node_VariableShowStmt:

	case *nodes.Node_CreateStmt:

		mutateList(n.CreateStmt.TableElts, stack, v)
		mutateList(n.CreateStmt.InhRelations, stack, v)

		mutateList(n.CreateStmt.Constraints, stack, v)
		mutateList(n.CreateStmt.Options, stack, v)

	case *nodes.Node_Constraint:
		mutate(n.Constraint.RawExpr, stack, v) // Node
		mutateList(n.Constraint.Keys, stack, v)
		mutateList(n.Constraint.Including, stack, v)
		mutateList(n.Constraint.Exclusions, stack, v)
		mutateList(n.Constraint.Options, stack, v)
		mutate(n.Constraint.WhereClause, stack, v) // Node

		mutateList(n.Constraint.FkAttrs, stack, v)
		mutateList(n.Constraint.PkAttrs, stack, v)
		mutateList(n.Constraint.FkDelSetCols, stack, v)
		mutateList(n.Constraint.OldConpfeqop, stack, v)

	case *nodes.Node_CreateTableSpaceStmt:

		mutateList(n.CreateTableSpaceStmt.Options, stack, v)

	case *nodes.Node_DropTableSpaceStmt:

	case *nodes.Node_AlterTableSpaceOptionsStmt:
		mutateList(n.AlterTableSpaceOptionsStmt.Options, stack, v)

	case *nodes.Node_AlterTableMoveAllStmt:
		mutateList(n.AlterTableMoveAllStmt.Roles, stack, v)

	case *nodes.Node_CreateExtensionStmt:
		mutateList(n.CreateExtensionStmt.Options, stack, v)

	case *nodes.Node_AlterExtensionStmt:
		mutateList(n.AlterExtensionStmt.Options, stack, v)

	case *nodes.Node_AlterExtensionContentsStmt:
		mutate(n.AlterExtensionContentsStmt.Object, stack, v) // Node

	case *nodes.Node_CreateFdwStmt:
		mutateList(n.CreateFdwStmt.FuncOptions, stack, v)
		mutateList(n.CreateFdwStmt.Options, stack, v)

	case *nodes.Node_AlterFdwStmt:
		mutateList(n.AlterFdwStmt.FuncOptions, stack, v)
		mutateList(n.AlterFdwStmt.Options, stack, v)

	case *nodes.Node_CreateForeignServerStmt:
		mutateList(n.CreateForeignServerStmt.Options, stack, v)

	case *nodes.Node_AlterForeignServerStmt:
		mutateList(n.AlterForeignServerStmt.Options, stack, v)

	case *nodes.Node_CreateForeignTableStmt:

		mutateList(n.CreateForeignTableStmt.Options, stack, v)

	case *nodes.Node_CreateUserMappingStmt:

		mutateList(n.CreateUserMappingStmt.Options, stack, v)

	case *nodes.Node_AlterUserMappingStmt:

		mutateList(n.AlterUserMappingStmt.Options, stack, v)

	case *nodes.Node_DropUserMappingStmt:

	case *nodes.Node_ImportForeignSchemaStmt:
		mutateList(n.ImportForeignSchemaStmt.TableList, stack, v)
		mutateList(n.ImportForeignSchemaStmt.Options, stack, v)

	case *nodes.Node_CreatePolicyStmt:

		mutateList(n.CreatePolicyStmt.Roles, stack, v)
		mutate(n.CreatePolicyStmt.Qual, stack, v)      // Node
		mutate(n.CreatePolicyStmt.WithCheck, stack, v) // Node

	case *nodes.Node_AlterPolicyStmt:

		mutateList(n.AlterPolicyStmt.Roles, stack, v)
		mutate(n.AlterPolicyStmt.Qual, stack, v)      // Node
		mutate(n.AlterPolicyStmt.WithCheck, stack, v) // Node

	case *nodes.Node_CreateAmStmt:
		mutateList(n.CreateAmStmt.HandlerName, stack, v)

	case *nodes.Node_CreateTrigStmt:

		mutateList(n.CreateTrigStmt.Funcname, stack, v)
		mutateList(n.CreateTrigStmt.Args, stack, v)
		mutateList(n.CreateTrigStmt.Columns, stack, v)
		mutate(n.CreateTrigStmt.WhenClause, stack, v) // Node
		mutateList(n.CreateTrigStmt.TransitionRels, stack, v)

	case *nodes.Node_CreateEventTrigStmt:
		mutateList(n.CreateEventTrigStmt.Whenclause, stack, v)
		mutateList(n.CreateEventTrigStmt.Funcname, stack, v)

	case *nodes.Node_AlterEventTrigStmt:

	case *nodes.Node_CreatePlangStmt:
		mutateList(n.CreatePlangStmt.Plhandler, stack, v)
		mutateList(n.CreatePlangStmt.Plinline, stack, v)
		mutateList(n.CreatePlangStmt.Plvalidator, stack, v)

	case *nodes.Node_CreateRoleStmt:
		mutateList(n.CreateRoleStmt.Options, stack, v)

	case *nodes.Node_AlterRoleStmt:

		mutateList(n.AlterRoleStmt.Options, stack, v)

	case *nodes.Node_AlterRoleSetStmt:

	case *nodes.Node_DropRoleStmt:
		mutateList(n.DropRoleStmt.Roles, stack, v)

	case *nodes.Node_CreateSeqStmt:

		mutateList(n.CreateSeqStmt.Options, stack, v)

	case *nodes.Node_AlterSeqStmt:

		mutateList(n.AlterSeqStmt.Options, stack, v)

	case *nodes.Node_DefineStmt:
		mutateList(n.DefineStmt.Defnames, stack, v)
		mutateList(n.DefineStmt.Args, stack, v)
		mutateList(n.DefineStmt.Definition, stack, v)

	case *nodes.Node_CreateDomainStmt:
		mutateList(n.CreateDomainStmt.Domainname, stack, v)

		mutateList(n.CreateDomainStmt.Constraints, stack, v)

	case *nodes.Node_CreateOpClassStmt:
		mutateList(n.CreateOpClassStmt.Opclassname, stack, v)
		mutateList(n.CreateOpClassStmt.Opfamilyname, stack, v)

		mutateList(n.CreateOpClassStmt.Items, stack, v)

	case *nodes.Node_CreateOpClassItem:

		mutateList(n.CreateOpClassItem.OrderFamily, stack, v)
		mutateList(n.CreateOpClassItem.ClassArgs, stack, v)

	case *nodes.Node_CreateOpFamilyStmt:
		mutateList(n.CreateOpFamilyStmt.Opfamilyname, stack, v)

	case *nodes.Node_AlterOpFamilyStmt:
		mutateList(n.AlterOpFamilyStmt.Opfamilyname, stack, v)
		mutateList(n.AlterOpFamilyStmt.Items, stack, v)

	case *nodes.Node_DropStmt:
		mutateList(n.DropStmt.Objects, stack, v)

	case *nodes.Node_TruncateStmt:
		mutateList(n.TruncateStmt.Relations, stack, v)

	case *nodes.Node_CommentStmt:
		mutate(n.CommentStmt.Object, stack, v) // Node

	case *nodes.Node_SecLabelStmt:
		mutate(n.SecLabelStmt.Object, stack, v) // Node

	case *nodes.Node_DeclareCursorStmt:
		mutate(n.DeclareCursorStmt.Query, stack, v) // Node

	case *nodes.Node_ClosePortalStmt:

	case *nodes.Node_FetchStmt:

	case *nodes.Node_IndexStmt:

		mutateList(n.IndexStmt.IndexParams, stack, v)
		mutateList(n.IndexStmt.IndexIncludingParams, stack, v)
		mutateList(n.IndexStmt.Options, stack, v)
		mutate(n.IndexStmt.WhereClause, stack, v) // Node
		mutateList(n.IndexStmt.ExcludeOpNames, stack, v)

	case *nodes.Node_CreateStatsStmt:
		mutateList(n.CreateStatsStmt.Defnames, stack, v)
		mutateList(n.CreateStatsStmt.StatTypes, stack, v)
		mutateList(n.CreateStatsStmt.Exprs, stack, v)
		mutateList(n.CreateStatsStmt.Relations, stack, v)

	case *nodes.Node_StatsElem:
		mutate(n.StatsElem.Expr, stack, v) // Node

	case *nodes.Node_AlterStatsStmt:
		mutateList(n.AlterStatsStmt.Defnames, stack, v)
		mutate(n.AlterStatsStmt.Stxstattarget, stack, v) // Node

	case *nodes.Node_CreateFunctionStmt:
		mutateList(n.CreateFunctionStmt.Funcname, stack, v)
		mutateList(n.CreateFunctionStmt.Parameters, stack, v)

		mutateList(n.CreateFunctionStmt.Options, stack, v)
		mutate(n.CreateFunctionStmt.SqlBody, stack, v) // Node

	case *nodes.Node_FunctionParameter:

		mutate(n.FunctionParameter.Defexpr, stack, v) // Node

	case *nodes.Node_AlterFunctionStmt:

		mutateList(n.AlterFunctionStmt.Actions, stack, v)

	case *nodes.Node_DoStmt:
		mutateList(n.DoStmt.Args, stack, v)

	case *nodes.Node_InlineCodeBlock:

	case *nodes.Node_CallStmt:

		mutateList(n.CallStmt.Outargs, stack, v)

	case *nodes.Node_CallContext:

	case *nodes.Node_RenameStmt:

		mutate(n.RenameStmt.Object, stack, v) // Node

	case *nodes.Node_AlterObjectDependsStmt:

		mutate(n.AlterObjectDependsStmt.Object, stack, v) // Node

	case *nodes.Node_AlterObjectSchemaStmt:

		mutate(n.AlterObjectSchemaStmt.Object, stack, v) // Node

	case *nodes.Node_AlterOwnerStmt:

		mutate(n.AlterOwnerStmt.Object, stack, v) // Node

	case *nodes.Node_AlterOperatorStmt:

		mutateList(n.AlterOperatorStmt.Options, stack, v)

	case *nodes.Node_AlterTypeStmt:
		mutateList(n.AlterTypeStmt.TypeName, stack, v)
		mutateList(n.AlterTypeStmt.Options, stack, v)

	case *nodes.Node_RuleStmt:

		mutate(n.RuleStmt.WhereClause, stack, v) // Node
		mutateList(n.RuleStmt.Actions, stack, v)

	case *nodes.Node_NotifyStmt:

	case *nodes.Node_ListenStmt:

	case *nodes.Node_UnlistenStmt:

	case *nodes.Node_TransactionStmt:
		mutateList(n.TransactionStmt.Options, stack, v)

	case *nodes.Node_CompositeTypeStmt:

		mutateList(n.CompositeTypeStmt.Coldeflist, stack, v)

	case *nodes.Node_CreateEnumStmt:
		mutateList(n.CreateEnumStmt.TypeName, stack, v)
		mutateList(n.CreateEnumStmt.Vals, stack, v)

	case *nodes.Node_CreateRangeStmt:
		mutateList(n.CreateRangeStmt.TypeName, stack, v)
		mutateList(n.CreateRangeStmt.Params, stack, v)

	case *nodes.Node_AlterEnumStmt:
		mutateList(n.AlterEnumStmt.TypeName, stack, v)

	case *nodes.Node_ViewStmt:

		mutateList(n.ViewStmt.Aliases, stack, v)
		mutate(n.ViewStmt.Query, stack, v) // Node
		mutateList(n.ViewStmt.Options, stack, v)

	case *nodes.Node_LoadStmt:

	case *nodes.Node_CreatedbStmt:
		mutateList(n.CreatedbStmt.Options, stack, v)

	case *nodes.Node_AlterDatabaseStmt:
		mutateList(n.AlterDatabaseStmt.Options, stack, v)

	case *nodes.Node_AlterDatabaseRefreshCollStmt:

	case *nodes.Node_AlterDatabaseSetStmt:

	case *nodes.Node_DropdbStmt:
		mutateList(n.DropdbStmt.Options, stack, v)

	case *nodes.Node_AlterSystemStmt:

	case *nodes.Node_ClusterStmt:

		mutateList(n.ClusterStmt.Params, stack, v)

	case *nodes.Node_VacuumStmt:
		mutateList(n.VacuumStmt.Options, stack, v)
		mutateList(n.VacuumStmt.Rels, stack, v)

	case *nodes.Node_VacuumRelation:

		mutateList(n.VacuumRelation.VaCols, stack, v)

	case *nodes.Node_ExplainStmt:
		mutate(n.ExplainStmt.Query, stack, v) // Node
		mutateList(n.ExplainStmt.Options, stack, v)

	case *nodes.Node_CreateTableAsStmt:
		mutate(n.CreateTableAsStmt.Query, stack, v) // Node

	case *nodes.Node_RefreshMatViewStmt:

	case *nodes.Node_CheckPointStmt:

	case *nodes.Node_DiscardStmt:

	case *nodes.Node_LockStmt:
		mutateList(n.LockStmt.Relations, stack, v)

	case *nodes.Node_ConstraintsSetStmt:
		mutateList(n.ConstraintsSetStmt.Constraints, stack, v)

	case *nodes.Node_ReindexStmt:

		mutateList(n.ReindexStmt.Params, stack, v)

	case *nodes.Node_CreateConversionStmt:
		mutateList(n.CreateConversionStmt.ConversionName, stack, v)
		mutateList(n.CreateConversionStmt.FuncName, stack, v)

	case *nodes.Node_CreateCastStmt:

	case *nodes.Node_CreateTransformStmt:

	case *nodes.Node_PrepareStmt:
		mutateList(n.PrepareStmt.Argtypes, stack, v)
		mutate(n.PrepareStmt.Query, stack, v) // Node

	case *nodes.Node_ExecuteStmt:
		mutateList(n.ExecuteStmt.Params, stack, v)

	case *nodes.Node_DeallocateStmt:

	case *nodes.Node_DropOwnedStmt:
		mutateList(n.DropOwnedStmt.Roles, stack, v)

	case *nodes.Node_ReassignOwnedStmt:
		mutateList(n.ReassignOwnedStmt.Roles, stack, v)

	case *nodes.Node_AlterTsdictionaryStmt:
		mutateList(n.AlterTsdictionaryStmt.Dictname, stack, v)
		mutateList(n.AlterTsdictionaryStmt.Options, stack, v)

	case *nodes.Node_AlterTsconfigurationStmt:
		mutateList(n.AlterTsconfigurationStmt.Cfgname, stack, v)
		mutateList(n.AlterTsconfigurationStmt.Tokentype, stack, v)
		mutateList(n.AlterTsconfigurationStmt.Dicts, stack, v)

	case *nodes.Node_PublicationTable:

		mutate(n.PublicationTable.WhereClause, stack, v) // Node
		mutateList(n.PublicationTable.Columns, stack, v)

	case *nodes.Node_PublicationObjSpec:

	case *nodes.Node_CreatePublicationStmt:
		mutateList(n.CreatePublicationStmt.Options, stack, v)
		mutateList(n.CreatePublicationStmt.Pubobjects, stack, v)

	case *nodes.Node_AlterPublicationStmt:
		mutateList(n.AlterPublicationStmt.Options, stack, v)
		mutateList(n.AlterPublicationStmt.Pubobjects, stack, v)

	case *nodes.Node_CreateSubscriptionStmt:
		mutateList(n.CreateSubscriptionStmt.Publication, stack, v)
		mutateList(n.CreateSubscriptionStmt.Options, stack, v)

	case *nodes.Node_AlterSubscriptionStmt:
		mutateList(n.AlterSubscriptionStmt.Publication, stack, v)
		mutateList(n.AlterSubscriptionStmt.Options, stack, v)

	case *nodes.Node_DropSubscriptionStmt:

	}
}
