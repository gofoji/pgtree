// Code generated by foji {{ version }}, template: {{ templateFile }}; DO NOT EDIT.

package pgtree

import (
"fmt"
"reflect"
"strings"
)

type Visitor func(node Node, stack []Node, v Visitor) Visitor

func WalkList(list Nodes, stack []Node, v Visitor) {
for _, n := range list {
Walk(n, stack, v)
}
}

func Walk(node Node, stack []Node, v Visitor) {
if node == nil {
return
}
if v = v(node, stack, v); v == nil {
return
}
stack = append(stack, node)
switch n := node.(type) {
case nil:
return
{{- range .Messages }}
	{{- if not (eq .MessageName "Node") }}
		case *{{ pascal .MessageName }}:
		if n == nil {
		return
		}
		{{- range .Fields }}
			{{- if $.IsMessage .Type }}
				{{- if .IsRepeated }}
					WalkList(n.{{ pascal .FieldName }}, stack, v)
				{{- else }}
					Walk(n.{{ pascal .FieldName }}, stack, v)
				{{- end }}
			{{- end }}
		{{- end }}
	{{- end }}
{{- end }}
case *Root:
Walk(n.Node, stack, v)
case Nodes:
for _, n2 := range n {
Walk(n2, stack, v)
}
default:
fmt.Printf("!%s%s\n", strings.Repeat("  ", len(stack)), reflect.TypeOf(node).Name())
}
}

type MutateFunc func(node *Node, stack []*Node, visitor MutateFunc) MutateFunc

func mutateList(list Nodes, stack []*Node, v MutateFunc) {
for i := range list {
mutate(&list[i], stack, v)
}
}

func mutate(node *Node, stack []*Node, v MutateFunc) {
var nodeWrapper Node
if node == nil {
return
}
if v = v(node, stack, v); v == nil {
return
}
stack = append(stack, node)
switch n := (*node).(type) {
case nil:
return
{{- range .Messages }}
	{{- if not (eq .MessageName "Node") }}
		case *{{ pascal .MessageName }}:
		if n == nil {
		return
		}
		{{- range .Fields }}
			{{- if $.IsMessage .Type }}
				{{- if .IsRepeated }}
					mutateList(n.{{ pascal .FieldName }}, stack, v)
				{{- else }}
					{{- if eq .Type "Node" }}
						mutate(&n.{{ pascal .FieldName }}, stack, v)
					{{- else }}
						nodeWrapper =  n.{{ pascal .FieldName }}
						mutate(&nodeWrapper, stack, v)
					{{- end }}
				{{- end }}
			{{- end }}
		{{- end }}
	{{- end }}
{{- end }}
case *Root:
mutate(&n.Node, stack, v)
case Nodes:
mutateList(n, stack, v)
default:
fmt.Printf("!!mutate missing type:%s\n", reflect.TypeOf(node).Name())
}
}
