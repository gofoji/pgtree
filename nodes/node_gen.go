// Code generated by foji 0.3, template: foji/node.go.tpl; DO NOT EDIT.

package nodes

type OverridingKind int32

const (
	OVERRIDING_NOT_SET      OverridingKind = 0
	OVERRIDING_USER_VALUE   OverridingKind = 1
	OVERRIDING_SYSTEM_VALUE OverridingKind = 2
)

func NewOverridingKind(name string) OverridingKind {
	switch name {
	case "OVERRIDING_USER_VALUE":
		return OVERRIDING_USER_VALUE
	case "OVERRIDING_SYSTEM_VALUE":
		return OVERRIDING_SYSTEM_VALUE
	}

	return OverridingKind(0)
}

var OverridingKindString = map[OverridingKind]string{
	OVERRIDING_NOT_SET:      "OVERRIDING_NOT_SET",
	OVERRIDING_USER_VALUE:   "OVERRIDING_USER_VALUE",
	OVERRIDING_SYSTEM_VALUE: "OVERRIDING_SYSTEM_VALUE",
}

func (e OverridingKind) String() string {
	return OverridingKindString[e]
}

type QuerySource int32

const (
	QSRC_ORIGINAL          QuerySource = 0
	QSRC_PARSER            QuerySource = 1
	QSRC_INSTEAD_RULE      QuerySource = 2
	QSRC_QUAL_INSTEAD_RULE QuerySource = 3
	QSRC_NON_INSTEAD_RULE  QuerySource = 4
)

func NewQuerySource(name string) QuerySource {
	switch name {
	case "QSRC_PARSER":
		return QSRC_PARSER
	case "QSRC_INSTEAD_RULE":
		return QSRC_INSTEAD_RULE
	case "QSRC_QUAL_INSTEAD_RULE":
		return QSRC_QUAL_INSTEAD_RULE
	case "QSRC_NON_INSTEAD_RULE":
		return QSRC_NON_INSTEAD_RULE
	}

	return QuerySource(0)
}

var QuerySourceString = map[QuerySource]string{
	QSRC_ORIGINAL:          "QSRC_ORIGINAL",
	QSRC_PARSER:            "QSRC_PARSER",
	QSRC_INSTEAD_RULE:      "QSRC_INSTEAD_RULE",
	QSRC_QUAL_INSTEAD_RULE: "QSRC_QUAL_INSTEAD_RULE",
	QSRC_NON_INSTEAD_RULE:  "QSRC_NON_INSTEAD_RULE",
}

func (e QuerySource) String() string {
	return QuerySourceString[e]
}

type SortByDir int32

const (
	SORTBY_DEFAULT SortByDir = 0
	SORTBY_ASC     SortByDir = 1
	SORTBY_DESC    SortByDir = 2
	SORTBY_USING   SortByDir = 3
)

func NewSortByDir(name string) SortByDir {
	switch name {
	case "SORTBY_ASC":
		return SORTBY_ASC
	case "SORTBY_DESC":
		return SORTBY_DESC
	case "SORTBY_USING":
		return SORTBY_USING
	}

	return SortByDir(0)
}

var SortByDirString = map[SortByDir]string{
	SORTBY_DEFAULT: "SORTBY_DEFAULT",
	SORTBY_ASC:     "SORTBY_ASC",
	SORTBY_DESC:    "SORTBY_DESC",
	SORTBY_USING:   "SORTBY_USING",
}

func (e SortByDir) String() string {
	return SortByDirString[e]
}

type SortByNulls int32

const (
	SORTBY_NULLS_DEFAULT SortByNulls = 0
	SORTBY_NULLS_FIRST   SortByNulls = 1
	SORTBY_NULLS_LAST    SortByNulls = 2
)

func NewSortByNulls(name string) SortByNulls {
	switch name {
	case "SORTBY_NULLS_FIRST":
		return SORTBY_NULLS_FIRST
	case "SORTBY_NULLS_LAST":
		return SORTBY_NULLS_LAST
	}

	return SortByNulls(0)
}

var SortByNullsString = map[SortByNulls]string{
	SORTBY_NULLS_DEFAULT: "SORTBY_NULLS_DEFAULT",
	SORTBY_NULLS_FIRST:   "SORTBY_NULLS_FIRST",
	SORTBY_NULLS_LAST:    "SORTBY_NULLS_LAST",
}

func (e SortByNulls) String() string {
	return SortByNullsString[e]
}

type A_Expr_Kind int32

const (
	AEXPR_OP              A_Expr_Kind = 0
	AEXPR_OP_ANY          A_Expr_Kind = 1
	AEXPR_OP_ALL          A_Expr_Kind = 2
	AEXPR_DISTINCT        A_Expr_Kind = 3
	AEXPR_NOT_DISTINCT    A_Expr_Kind = 4
	AEXPR_NULLIF          A_Expr_Kind = 5
	AEXPR_OF              A_Expr_Kind = 6
	AEXPR_IN              A_Expr_Kind = 7
	AEXPR_LIKE            A_Expr_Kind = 8
	AEXPR_ILIKE           A_Expr_Kind = 9
	AEXPR_SIMILAR         A_Expr_Kind = 10
	AEXPR_BETWEEN         A_Expr_Kind = 11
	AEXPR_NOT_BETWEEN     A_Expr_Kind = 12
	AEXPR_BETWEEN_SYM     A_Expr_Kind = 13
	AEXPR_NOT_BETWEEN_SYM A_Expr_Kind = 14
	AEXPR_PAREN           A_Expr_Kind = 15
)

func NewA_Expr_Kind(name string) A_Expr_Kind {
	switch name {
	case "AEXPR_OP_ANY":
		return AEXPR_OP_ANY
	case "AEXPR_OP_ALL":
		return AEXPR_OP_ALL
	case "AEXPR_DISTINCT":
		return AEXPR_DISTINCT
	case "AEXPR_NOT_DISTINCT":
		return AEXPR_NOT_DISTINCT
	case "AEXPR_NULLIF":
		return AEXPR_NULLIF
	case "AEXPR_OF":
		return AEXPR_OF
	case "AEXPR_IN":
		return AEXPR_IN
	case "AEXPR_LIKE":
		return AEXPR_LIKE
	case "AEXPR_ILIKE":
		return AEXPR_ILIKE
	case "AEXPR_SIMILAR":
		return AEXPR_SIMILAR
	case "AEXPR_BETWEEN":
		return AEXPR_BETWEEN
	case "AEXPR_NOT_BETWEEN":
		return AEXPR_NOT_BETWEEN
	case "AEXPR_BETWEEN_SYM":
		return AEXPR_BETWEEN_SYM
	case "AEXPR_NOT_BETWEEN_SYM":
		return AEXPR_NOT_BETWEEN_SYM
	case "AEXPR_PAREN":
		return AEXPR_PAREN
	}

	return A_Expr_Kind(0)
}

var A_Expr_KindString = map[A_Expr_Kind]string{
	AEXPR_OP:              "AEXPR_OP",
	AEXPR_OP_ANY:          "AEXPR_OP_ANY",
	AEXPR_OP_ALL:          "AEXPR_OP_ALL",
	AEXPR_DISTINCT:        "AEXPR_DISTINCT",
	AEXPR_NOT_DISTINCT:    "AEXPR_NOT_DISTINCT",
	AEXPR_NULLIF:          "AEXPR_NULLIF",
	AEXPR_OF:              "AEXPR_OF",
	AEXPR_IN:              "AEXPR_IN",
	AEXPR_LIKE:            "AEXPR_LIKE",
	AEXPR_ILIKE:           "AEXPR_ILIKE",
	AEXPR_SIMILAR:         "AEXPR_SIMILAR",
	AEXPR_BETWEEN:         "AEXPR_BETWEEN",
	AEXPR_NOT_BETWEEN:     "AEXPR_NOT_BETWEEN",
	AEXPR_BETWEEN_SYM:     "AEXPR_BETWEEN_SYM",
	AEXPR_NOT_BETWEEN_SYM: "AEXPR_NOT_BETWEEN_SYM",
	AEXPR_PAREN:           "AEXPR_PAREN",
}

func (e A_Expr_Kind) String() string {
	return A_Expr_KindString[e]
}

type RoleSpecType int32

const (
	ROLESPEC_CSTRING      RoleSpecType = 0
	ROLESPEC_CURRENT_USER RoleSpecType = 1
	ROLESPEC_SESSION_USER RoleSpecType = 2
	ROLESPEC_PUBLIC       RoleSpecType = 3
)

func NewRoleSpecType(name string) RoleSpecType {
	switch name {
	case "ROLESPEC_CURRENT_USER":
		return ROLESPEC_CURRENT_USER
	case "ROLESPEC_SESSION_USER":
		return ROLESPEC_SESSION_USER
	case "ROLESPEC_PUBLIC":
		return ROLESPEC_PUBLIC
	}

	return RoleSpecType(0)
}

var RoleSpecTypeString = map[RoleSpecType]string{
	ROLESPEC_CSTRING:      "ROLESPEC_CSTRING",
	ROLESPEC_CURRENT_USER: "ROLESPEC_CURRENT_USER",
	ROLESPEC_SESSION_USER: "ROLESPEC_SESSION_USER",
	ROLESPEC_PUBLIC:       "ROLESPEC_PUBLIC",
}

func (e RoleSpecType) String() string {
	return RoleSpecTypeString[e]
}

type TableLikeOption int32

const (
	CREATE_TABLE_LIKE_COMMENTS    TableLikeOption = 0
	CREATE_TABLE_LIKE_CONSTRAINTS TableLikeOption = 1
	CREATE_TABLE_LIKE_DEFAULTS    TableLikeOption = 2
	CREATE_TABLE_LIKE_GENERATED   TableLikeOption = 3
	CREATE_TABLE_LIKE_IDENTITY    TableLikeOption = 4
	CREATE_TABLE_LIKE_INDEXES     TableLikeOption = 5
	CREATE_TABLE_LIKE_STATISTICS  TableLikeOption = 6
	CREATE_TABLE_LIKE_STORAGE     TableLikeOption = 7
	CREATE_TABLE_LIKE_ALL         TableLikeOption = 8
)

func NewTableLikeOption(name string) TableLikeOption {
	switch name {
	case "CREATE_TABLE_LIKE_CONSTRAINTS":
		return CREATE_TABLE_LIKE_CONSTRAINTS
	case "CREATE_TABLE_LIKE_DEFAULTS":
		return CREATE_TABLE_LIKE_DEFAULTS
	case "CREATE_TABLE_LIKE_GENERATED":
		return CREATE_TABLE_LIKE_GENERATED
	case "CREATE_TABLE_LIKE_IDENTITY":
		return CREATE_TABLE_LIKE_IDENTITY
	case "CREATE_TABLE_LIKE_INDEXES":
		return CREATE_TABLE_LIKE_INDEXES
	case "CREATE_TABLE_LIKE_STATISTICS":
		return CREATE_TABLE_LIKE_STATISTICS
	case "CREATE_TABLE_LIKE_STORAGE":
		return CREATE_TABLE_LIKE_STORAGE
	case "CREATE_TABLE_LIKE_ALL":
		return CREATE_TABLE_LIKE_ALL
	}

	return TableLikeOption(0)
}

var TableLikeOptionString = map[TableLikeOption]string{
	CREATE_TABLE_LIKE_COMMENTS:    "CREATE_TABLE_LIKE_COMMENTS",
	CREATE_TABLE_LIKE_CONSTRAINTS: "CREATE_TABLE_LIKE_CONSTRAINTS",
	CREATE_TABLE_LIKE_DEFAULTS:    "CREATE_TABLE_LIKE_DEFAULTS",
	CREATE_TABLE_LIKE_GENERATED:   "CREATE_TABLE_LIKE_GENERATED",
	CREATE_TABLE_LIKE_IDENTITY:    "CREATE_TABLE_LIKE_IDENTITY",
	CREATE_TABLE_LIKE_INDEXES:     "CREATE_TABLE_LIKE_INDEXES",
	CREATE_TABLE_LIKE_STATISTICS:  "CREATE_TABLE_LIKE_STATISTICS",
	CREATE_TABLE_LIKE_STORAGE:     "CREATE_TABLE_LIKE_STORAGE",
	CREATE_TABLE_LIKE_ALL:         "CREATE_TABLE_LIKE_ALL",
}

func (e TableLikeOption) String() string {
	return TableLikeOptionString[e]
}

type DefElemAction int32

const (
	DEFELEM_UNSPEC DefElemAction = 0
	DEFELEM_SET    DefElemAction = 1
	DEFELEM_ADD    DefElemAction = 2
	DEFELEM_DROP   DefElemAction = 3
)

func NewDefElemAction(name string) DefElemAction {
	switch name {
	case "DEFELEM_SET":
		return DEFELEM_SET
	case "DEFELEM_ADD":
		return DEFELEM_ADD
	case "DEFELEM_DROP":
		return DEFELEM_DROP
	}

	return DefElemAction(0)
}

var DefElemActionString = map[DefElemAction]string{
	DEFELEM_UNSPEC: "DEFELEM_UNSPEC",
	DEFELEM_SET:    "DEFELEM_SET",
	DEFELEM_ADD:    "DEFELEM_ADD",
	DEFELEM_DROP:   "DEFELEM_DROP",
}

func (e DefElemAction) String() string {
	return DefElemActionString[e]
}

type PartitionRangeDatumKind int32

const (
	PARTITION_RANGE_DATUM_MINVALUE PartitionRangeDatumKind = 0
	PARTITION_RANGE_DATUM_VALUE    PartitionRangeDatumKind = 1
	PARTITION_RANGE_DATUM_MAXVALUE PartitionRangeDatumKind = 2
)

func NewPartitionRangeDatumKind(name string) PartitionRangeDatumKind {
	switch name {
	case "PARTITION_RANGE_DATUM_VALUE":
		return PARTITION_RANGE_DATUM_VALUE
	case "PARTITION_RANGE_DATUM_MAXVALUE":
		return PARTITION_RANGE_DATUM_MAXVALUE
	}

	return PartitionRangeDatumKind(0)
}

var PartitionRangeDatumKindString = map[PartitionRangeDatumKind]string{
	PARTITION_RANGE_DATUM_MINVALUE: "PARTITION_RANGE_DATUM_MINVALUE",
	PARTITION_RANGE_DATUM_VALUE:    "PARTITION_RANGE_DATUM_VALUE",
	PARTITION_RANGE_DATUM_MAXVALUE: "PARTITION_RANGE_DATUM_MAXVALUE",
}

func (e PartitionRangeDatumKind) String() string {
	return PartitionRangeDatumKindString[e]
}

type RTEKind int32

const (
	RTE_RELATION        RTEKind = 0
	RTE_SUBQUERY        RTEKind = 1
	RTE_JOIN            RTEKind = 2
	RTE_FUNCTION        RTEKind = 3
	RTE_TABLEFUNC       RTEKind = 4
	RTE_VALUES          RTEKind = 5
	RTE_CTE             RTEKind = 6
	RTE_NAMEDTUPLESTORE RTEKind = 7
	RTE_RESULT          RTEKind = 8
)

func NewRTEKind(name string) RTEKind {
	switch name {
	case "RTE_SUBQUERY":
		return RTE_SUBQUERY
	case "RTE_JOIN":
		return RTE_JOIN
	case "RTE_FUNCTION":
		return RTE_FUNCTION
	case "RTE_TABLEFUNC":
		return RTE_TABLEFUNC
	case "RTE_VALUES":
		return RTE_VALUES
	case "RTE_CTE":
		return RTE_CTE
	case "RTE_NAMEDTUPLESTORE":
		return RTE_NAMEDTUPLESTORE
	case "RTE_RESULT":
		return RTE_RESULT
	}

	return RTEKind(0)
}

var RTEKindString = map[RTEKind]string{
	RTE_RELATION:        "RTE_RELATION",
	RTE_SUBQUERY:        "RTE_SUBQUERY",
	RTE_JOIN:            "RTE_JOIN",
	RTE_FUNCTION:        "RTE_FUNCTION",
	RTE_TABLEFUNC:       "RTE_TABLEFUNC",
	RTE_VALUES:          "RTE_VALUES",
	RTE_CTE:             "RTE_CTE",
	RTE_NAMEDTUPLESTORE: "RTE_NAMEDTUPLESTORE",
	RTE_RESULT:          "RTE_RESULT",
}

func (e RTEKind) String() string {
	return RTEKindString[e]
}

type WCOKind int32

const (
	WCO_VIEW_CHECK         WCOKind = 0
	WCO_RLS_INSERT_CHECK   WCOKind = 1
	WCO_RLS_UPDATE_CHECK   WCOKind = 2
	WCO_RLS_CONFLICT_CHECK WCOKind = 3
)

func NewWCOKind(name string) WCOKind {
	switch name {
	case "WCO_RLS_INSERT_CHECK":
		return WCO_RLS_INSERT_CHECK
	case "WCO_RLS_UPDATE_CHECK":
		return WCO_RLS_UPDATE_CHECK
	case "WCO_RLS_CONFLICT_CHECK":
		return WCO_RLS_CONFLICT_CHECK
	}

	return WCOKind(0)
}

var WCOKindString = map[WCOKind]string{
	WCO_VIEW_CHECK:         "WCO_VIEW_CHECK",
	WCO_RLS_INSERT_CHECK:   "WCO_RLS_INSERT_CHECK",
	WCO_RLS_UPDATE_CHECK:   "WCO_RLS_UPDATE_CHECK",
	WCO_RLS_CONFLICT_CHECK: "WCO_RLS_CONFLICT_CHECK",
}

func (e WCOKind) String() string {
	return WCOKindString[e]
}

type GroupingSetKind int32

const (
	GROUPING_SET_EMPTY  GroupingSetKind = 0
	GROUPING_SET_SIMPLE GroupingSetKind = 1
	GROUPING_SET_ROLLUP GroupingSetKind = 2
	GROUPING_SET_CUBE   GroupingSetKind = 3
	GROUPING_SET_SETS   GroupingSetKind = 4
)

func NewGroupingSetKind(name string) GroupingSetKind {
	switch name {
	case "GROUPING_SET_SIMPLE":
		return GROUPING_SET_SIMPLE
	case "GROUPING_SET_ROLLUP":
		return GROUPING_SET_ROLLUP
	case "GROUPING_SET_CUBE":
		return GROUPING_SET_CUBE
	case "GROUPING_SET_SETS":
		return GROUPING_SET_SETS
	}

	return GroupingSetKind(0)
}

var GroupingSetKindString = map[GroupingSetKind]string{
	GROUPING_SET_EMPTY:  "GROUPING_SET_EMPTY",
	GROUPING_SET_SIMPLE: "GROUPING_SET_SIMPLE",
	GROUPING_SET_ROLLUP: "GROUPING_SET_ROLLUP",
	GROUPING_SET_CUBE:   "GROUPING_SET_CUBE",
	GROUPING_SET_SETS:   "GROUPING_SET_SETS",
}

func (e GroupingSetKind) String() string {
	return GroupingSetKindString[e]
}

type CTEMaterialize int32

const (
	CTEMaterializeDefault CTEMaterialize = 0
	CTEMaterializeAlways  CTEMaterialize = 1
	CTEMaterializeNever   CTEMaterialize = 2
)

func NewCTEMaterialize(name string) CTEMaterialize {
	switch name {
	case "CTEMaterializeAlways":
		return CTEMaterializeAlways
	case "CTEMaterializeNever":
		return CTEMaterializeNever
	}

	return CTEMaterialize(0)
}

var CTEMaterializeString = map[CTEMaterialize]string{
	CTEMaterializeDefault: "CTEMaterializeDefault",
	CTEMaterializeAlways:  "CTEMaterializeAlways",
	CTEMaterializeNever:   "CTEMaterializeNever",
}

func (e CTEMaterialize) String() string {
	return CTEMaterializeString[e]
}

type SetOperation int32

const (
	SETOP_NONE      SetOperation = 0
	SETOP_UNION     SetOperation = 1
	SETOP_INTERSECT SetOperation = 2
	SETOP_EXCEPT    SetOperation = 3
)

func NewSetOperation(name string) SetOperation {
	switch name {
	case "SETOP_UNION":
		return SETOP_UNION
	case "SETOP_INTERSECT":
		return SETOP_INTERSECT
	case "SETOP_EXCEPT":
		return SETOP_EXCEPT
	}

	return SetOperation(0)
}

var SetOperationString = map[SetOperation]string{
	SETOP_NONE:      "SETOP_NONE",
	SETOP_UNION:     "SETOP_UNION",
	SETOP_INTERSECT: "SETOP_INTERSECT",
	SETOP_EXCEPT:    "SETOP_EXCEPT",
}

func (e SetOperation) String() string {
	return SetOperationString[e]
}

type ObjectType int32

const (
	OBJECT_ACCESS_METHOD   ObjectType = 0
	OBJECT_AGGREGATE       ObjectType = 1
	OBJECT_AMOP            ObjectType = 2
	OBJECT_AMPROC          ObjectType = 3
	OBJECT_ATTRIBUTE       ObjectType = 4
	OBJECT_CAST            ObjectType = 5
	OBJECT_COLUMN          ObjectType = 6
	OBJECT_COLLATION       ObjectType = 7
	OBJECT_CONVERSION      ObjectType = 8
	OBJECT_DATABASE        ObjectType = 9
	OBJECT_DEFAULT         ObjectType = 10
	OBJECT_DEFACL          ObjectType = 11
	OBJECT_DOMAIN          ObjectType = 12
	OBJECT_DOMCONSTRAINT   ObjectType = 13
	OBJECT_EVENT_TRIGGER   ObjectType = 14
	OBJECT_EXTENSION       ObjectType = 15
	OBJECT_FDW             ObjectType = 16
	OBJECT_FOREIGN_SERVER  ObjectType = 17
	OBJECT_FOREIGN_TABLE   ObjectType = 18
	OBJECT_FUNCTION        ObjectType = 19
	OBJECT_INDEX           ObjectType = 20
	OBJECT_LANGUAGE        ObjectType = 21
	OBJECT_LARGEOBJECT     ObjectType = 22
	OBJECT_MATVIEW         ObjectType = 23
	OBJECT_OPCLASS         ObjectType = 24
	OBJECT_OPERATOR        ObjectType = 25
	OBJECT_OPFAMILY        ObjectType = 26
	OBJECT_POLICY          ObjectType = 27
	OBJECT_PROCEDURE       ObjectType = 28
	OBJECT_PUBLICATION     ObjectType = 29
	OBJECT_PUBLICATION_REL ObjectType = 30
	OBJECT_ROLE            ObjectType = 31
	OBJECT_ROUTINE         ObjectType = 32
	OBJECT_RULE            ObjectType = 33
	OBJECT_SCHEMA          ObjectType = 34
	OBJECT_SEQUENCE        ObjectType = 35
	OBJECT_SUBSCRIPTION    ObjectType = 36
	OBJECT_STATISTIC_EXT   ObjectType = 37
	OBJECT_TABCONSTRAINT   ObjectType = 38
	OBJECT_TABLE           ObjectType = 39
	OBJECT_TABLESPACE      ObjectType = 40
	OBJECT_TRANSFORM       ObjectType = 41
	OBJECT_TRIGGER         ObjectType = 42
	OBJECT_TSCONFIGURATION ObjectType = 43
	OBJECT_TSDICTIONARY    ObjectType = 44
	OBJECT_TSPARSER        ObjectType = 45
	OBJECT_TSTEMPLATE      ObjectType = 46
	OBJECT_TYPE            ObjectType = 47
	OBJECT_USER_MAPPING    ObjectType = 48
	OBJECT_VIEW            ObjectType = 49
)

func NewObjectType(name string) ObjectType {
	switch name {
	case "OBJECT_AGGREGATE":
		return OBJECT_AGGREGATE
	case "OBJECT_AMOP":
		return OBJECT_AMOP
	case "OBJECT_AMPROC":
		return OBJECT_AMPROC
	case "OBJECT_ATTRIBUTE":
		return OBJECT_ATTRIBUTE
	case "OBJECT_CAST":
		return OBJECT_CAST
	case "OBJECT_COLUMN":
		return OBJECT_COLUMN
	case "OBJECT_COLLATION":
		return OBJECT_COLLATION
	case "OBJECT_CONVERSION":
		return OBJECT_CONVERSION
	case "OBJECT_DATABASE":
		return OBJECT_DATABASE
	case "OBJECT_DEFAULT":
		return OBJECT_DEFAULT
	case "OBJECT_DEFACL":
		return OBJECT_DEFACL
	case "OBJECT_DOMAIN":
		return OBJECT_DOMAIN
	case "OBJECT_DOMCONSTRAINT":
		return OBJECT_DOMCONSTRAINT
	case "OBJECT_EVENT_TRIGGER":
		return OBJECT_EVENT_TRIGGER
	case "OBJECT_EXTENSION":
		return OBJECT_EXTENSION
	case "OBJECT_FDW":
		return OBJECT_FDW
	case "OBJECT_FOREIGN_SERVER":
		return OBJECT_FOREIGN_SERVER
	case "OBJECT_FOREIGN_TABLE":
		return OBJECT_FOREIGN_TABLE
	case "OBJECT_FUNCTION":
		return OBJECT_FUNCTION
	case "OBJECT_INDEX":
		return OBJECT_INDEX
	case "OBJECT_LANGUAGE":
		return OBJECT_LANGUAGE
	case "OBJECT_LARGEOBJECT":
		return OBJECT_LARGEOBJECT
	case "OBJECT_MATVIEW":
		return OBJECT_MATVIEW
	case "OBJECT_OPCLASS":
		return OBJECT_OPCLASS
	case "OBJECT_OPERATOR":
		return OBJECT_OPERATOR
	case "OBJECT_OPFAMILY":
		return OBJECT_OPFAMILY
	case "OBJECT_POLICY":
		return OBJECT_POLICY
	case "OBJECT_PROCEDURE":
		return OBJECT_PROCEDURE
	case "OBJECT_PUBLICATION":
		return OBJECT_PUBLICATION
	case "OBJECT_PUBLICATION_REL":
		return OBJECT_PUBLICATION_REL
	case "OBJECT_ROLE":
		return OBJECT_ROLE
	case "OBJECT_ROUTINE":
		return OBJECT_ROUTINE
	case "OBJECT_RULE":
		return OBJECT_RULE
	case "OBJECT_SCHEMA":
		return OBJECT_SCHEMA
	case "OBJECT_SEQUENCE":
		return OBJECT_SEQUENCE
	case "OBJECT_SUBSCRIPTION":
		return OBJECT_SUBSCRIPTION
	case "OBJECT_STATISTIC_EXT":
		return OBJECT_STATISTIC_EXT
	case "OBJECT_TABCONSTRAINT":
		return OBJECT_TABCONSTRAINT
	case "OBJECT_TABLE":
		return OBJECT_TABLE
	case "OBJECT_TABLESPACE":
		return OBJECT_TABLESPACE
	case "OBJECT_TRANSFORM":
		return OBJECT_TRANSFORM
	case "OBJECT_TRIGGER":
		return OBJECT_TRIGGER
	case "OBJECT_TSCONFIGURATION":
		return OBJECT_TSCONFIGURATION
	case "OBJECT_TSDICTIONARY":
		return OBJECT_TSDICTIONARY
	case "OBJECT_TSPARSER":
		return OBJECT_TSPARSER
	case "OBJECT_TSTEMPLATE":
		return OBJECT_TSTEMPLATE
	case "OBJECT_TYPE":
		return OBJECT_TYPE
	case "OBJECT_USER_MAPPING":
		return OBJECT_USER_MAPPING
	case "OBJECT_VIEW":
		return OBJECT_VIEW
	}

	return ObjectType(0)
}

var ObjectTypeString = map[ObjectType]string{
	OBJECT_ACCESS_METHOD:   "OBJECT_ACCESS_METHOD",
	OBJECT_AGGREGATE:       "OBJECT_AGGREGATE",
	OBJECT_AMOP:            "OBJECT_AMOP",
	OBJECT_AMPROC:          "OBJECT_AMPROC",
	OBJECT_ATTRIBUTE:       "OBJECT_ATTRIBUTE",
	OBJECT_CAST:            "OBJECT_CAST",
	OBJECT_COLUMN:          "OBJECT_COLUMN",
	OBJECT_COLLATION:       "OBJECT_COLLATION",
	OBJECT_CONVERSION:      "OBJECT_CONVERSION",
	OBJECT_DATABASE:        "OBJECT_DATABASE",
	OBJECT_DEFAULT:         "OBJECT_DEFAULT",
	OBJECT_DEFACL:          "OBJECT_DEFACL",
	OBJECT_DOMAIN:          "OBJECT_DOMAIN",
	OBJECT_DOMCONSTRAINT:   "OBJECT_DOMCONSTRAINT",
	OBJECT_EVENT_TRIGGER:   "OBJECT_EVENT_TRIGGER",
	OBJECT_EXTENSION:       "OBJECT_EXTENSION",
	OBJECT_FDW:             "OBJECT_FDW",
	OBJECT_FOREIGN_SERVER:  "OBJECT_FOREIGN_SERVER",
	OBJECT_FOREIGN_TABLE:   "OBJECT_FOREIGN_TABLE",
	OBJECT_FUNCTION:        "OBJECT_FUNCTION",
	OBJECT_INDEX:           "OBJECT_INDEX",
	OBJECT_LANGUAGE:        "OBJECT_LANGUAGE",
	OBJECT_LARGEOBJECT:     "OBJECT_LARGEOBJECT",
	OBJECT_MATVIEW:         "OBJECT_MATVIEW",
	OBJECT_OPCLASS:         "OBJECT_OPCLASS",
	OBJECT_OPERATOR:        "OBJECT_OPERATOR",
	OBJECT_OPFAMILY:        "OBJECT_OPFAMILY",
	OBJECT_POLICY:          "OBJECT_POLICY",
	OBJECT_PROCEDURE:       "OBJECT_PROCEDURE",
	OBJECT_PUBLICATION:     "OBJECT_PUBLICATION",
	OBJECT_PUBLICATION_REL: "OBJECT_PUBLICATION_REL",
	OBJECT_ROLE:            "OBJECT_ROLE",
	OBJECT_ROUTINE:         "OBJECT_ROUTINE",
	OBJECT_RULE:            "OBJECT_RULE",
	OBJECT_SCHEMA:          "OBJECT_SCHEMA",
	OBJECT_SEQUENCE:        "OBJECT_SEQUENCE",
	OBJECT_SUBSCRIPTION:    "OBJECT_SUBSCRIPTION",
	OBJECT_STATISTIC_EXT:   "OBJECT_STATISTIC_EXT",
	OBJECT_TABCONSTRAINT:   "OBJECT_TABCONSTRAINT",
	OBJECT_TABLE:           "OBJECT_TABLE",
	OBJECT_TABLESPACE:      "OBJECT_TABLESPACE",
	OBJECT_TRANSFORM:       "OBJECT_TRANSFORM",
	OBJECT_TRIGGER:         "OBJECT_TRIGGER",
	OBJECT_TSCONFIGURATION: "OBJECT_TSCONFIGURATION",
	OBJECT_TSDICTIONARY:    "OBJECT_TSDICTIONARY",
	OBJECT_TSPARSER:        "OBJECT_TSPARSER",
	OBJECT_TSTEMPLATE:      "OBJECT_TSTEMPLATE",
	OBJECT_TYPE:            "OBJECT_TYPE",
	OBJECT_USER_MAPPING:    "OBJECT_USER_MAPPING",
	OBJECT_VIEW:            "OBJECT_VIEW",
}

func (e ObjectType) String() string {
	return ObjectTypeString[e]
}

type DropBehavior int32

const (
	DROP_RESTRICT DropBehavior = 0
	DROP_CASCADE  DropBehavior = 1
)

func NewDropBehavior(name string) DropBehavior {
	switch name {
	case "DROP_CASCADE":
		return DROP_CASCADE
	}

	return DropBehavior(0)
}

var DropBehaviorString = map[DropBehavior]string{
	DROP_RESTRICT: "DROP_RESTRICT",
	DROP_CASCADE:  "DROP_CASCADE",
}

func (e DropBehavior) String() string {
	return DropBehaviorString[e]
}

type AlterTableType int32

const (
	AT_AddColumn                 AlterTableType = 0
	AT_AddColumnRecurse          AlterTableType = 1
	AT_AddColumnToView           AlterTableType = 2
	AT_ColumnDefault             AlterTableType = 3
	AT_DropNotNull               AlterTableType = 4
	AT_SetNotNull                AlterTableType = 5
	AT_CheckNotNull              AlterTableType = 6
	AT_SetStatistics             AlterTableType = 7
	AT_SetOptions                AlterTableType = 8
	AT_ResetOptions              AlterTableType = 9
	AT_SetStorage                AlterTableType = 10
	AT_DropColumn                AlterTableType = 11
	AT_DropColumnRecurse         AlterTableType = 12
	AT_AddIndex                  AlterTableType = 13
	AT_ReAddIndex                AlterTableType = 14
	AT_AddConstraint             AlterTableType = 15
	AT_AddConstraintRecurse      AlterTableType = 16
	AT_ReAddConstraint           AlterTableType = 17
	AT_ReAddDomainConstraint     AlterTableType = 18
	AT_AlterConstraint           AlterTableType = 19
	AT_ValidateConstraint        AlterTableType = 20
	AT_ValidateConstraintRecurse AlterTableType = 21
	AT_ProcessedConstraint       AlterTableType = 22
	AT_AddIndexConstraint        AlterTableType = 23
	AT_DropConstraint            AlterTableType = 24
	AT_DropConstraintRecurse     AlterTableType = 25
	AT_ReAddComment              AlterTableType = 26
	AT_AlterColumnType           AlterTableType = 27
	AT_AlterColumnGenericOptions AlterTableType = 28
	AT_ChangeOwner               AlterTableType = 29
	AT_ClusterOn                 AlterTableType = 30
	AT_DropCluster               AlterTableType = 31
	AT_SetLogged                 AlterTableType = 32
	AT_SetUnLogged               AlterTableType = 33
	AT_DropOids                  AlterTableType = 34
	AT_SetTableSpace             AlterTableType = 35
	AT_SetRelOptions             AlterTableType = 36
	AT_ResetRelOptions           AlterTableType = 37
	AT_ReplaceRelOptions         AlterTableType = 38
	AT_EnableTrig                AlterTableType = 39
	AT_EnableAlwaysTrig          AlterTableType = 40
	AT_EnableReplicaTrig         AlterTableType = 41
	AT_DisableTrig               AlterTableType = 42
	AT_EnableTrigAll             AlterTableType = 43
	AT_DisableTrigAll            AlterTableType = 44
	AT_EnableTrigUser            AlterTableType = 45
	AT_DisableTrigUser           AlterTableType = 46
	AT_EnableRule                AlterTableType = 47
	AT_EnableAlwaysRule          AlterTableType = 48
	AT_EnableReplicaRule         AlterTableType = 49
	AT_DisableRule               AlterTableType = 50
	AT_AddInherit                AlterTableType = 51
	AT_DropInherit               AlterTableType = 52
	AT_AddOf                     AlterTableType = 53
	AT_DropOf                    AlterTableType = 54
	AT_ReplicaIdentity           AlterTableType = 55
	AT_EnableRowSecurity         AlterTableType = 56
	AT_DisableRowSecurity        AlterTableType = 57
	AT_ForceRowSecurity          AlterTableType = 58
	AT_NoForceRowSecurity        AlterTableType = 59
	AT_GenericOptions            AlterTableType = 60
	AT_AttachPartition           AlterTableType = 61
	AT_DetachPartition           AlterTableType = 62
	AT_AddIdentity               AlterTableType = 63
	AT_SetIdentity               AlterTableType = 64
	AT_DropIdentity              AlterTableType = 65
)

func NewAlterTableType(name string) AlterTableType {
	switch name {
	case "AT_AddColumnRecurse":
		return AT_AddColumnRecurse
	case "AT_AddColumnToView":
		return AT_AddColumnToView
	case "AT_ColumnDefault":
		return AT_ColumnDefault
	case "AT_DropNotNull":
		return AT_DropNotNull
	case "AT_SetNotNull":
		return AT_SetNotNull
	case "AT_CheckNotNull":
		return AT_CheckNotNull
	case "AT_SetStatistics":
		return AT_SetStatistics
	case "AT_SetOptions":
		return AT_SetOptions
	case "AT_ResetOptions":
		return AT_ResetOptions
	case "AT_SetStorage":
		return AT_SetStorage
	case "AT_DropColumn":
		return AT_DropColumn
	case "AT_DropColumnRecurse":
		return AT_DropColumnRecurse
	case "AT_AddIndex":
		return AT_AddIndex
	case "AT_ReAddIndex":
		return AT_ReAddIndex
	case "AT_AddConstraint":
		return AT_AddConstraint
	case "AT_AddConstraintRecurse":
		return AT_AddConstraintRecurse
	case "AT_ReAddConstraint":
		return AT_ReAddConstraint
	case "AT_ReAddDomainConstraint":
		return AT_ReAddDomainConstraint
	case "AT_AlterConstraint":
		return AT_AlterConstraint
	case "AT_ValidateConstraint":
		return AT_ValidateConstraint
	case "AT_ValidateConstraintRecurse":
		return AT_ValidateConstraintRecurse
	case "AT_ProcessedConstraint":
		return AT_ProcessedConstraint
	case "AT_AddIndexConstraint":
		return AT_AddIndexConstraint
	case "AT_DropConstraint":
		return AT_DropConstraint
	case "AT_DropConstraintRecurse":
		return AT_DropConstraintRecurse
	case "AT_ReAddComment":
		return AT_ReAddComment
	case "AT_AlterColumnType":
		return AT_AlterColumnType
	case "AT_AlterColumnGenericOptions":
		return AT_AlterColumnGenericOptions
	case "AT_ChangeOwner":
		return AT_ChangeOwner
	case "AT_ClusterOn":
		return AT_ClusterOn
	case "AT_DropCluster":
		return AT_DropCluster
	case "AT_SetLogged":
		return AT_SetLogged
	case "AT_SetUnLogged":
		return AT_SetUnLogged
	case "AT_DropOids":
		return AT_DropOids
	case "AT_SetTableSpace":
		return AT_SetTableSpace
	case "AT_SetRelOptions":
		return AT_SetRelOptions
	case "AT_ResetRelOptions":
		return AT_ResetRelOptions
	case "AT_ReplaceRelOptions":
		return AT_ReplaceRelOptions
	case "AT_EnableTrig":
		return AT_EnableTrig
	case "AT_EnableAlwaysTrig":
		return AT_EnableAlwaysTrig
	case "AT_EnableReplicaTrig":
		return AT_EnableReplicaTrig
	case "AT_DisableTrig":
		return AT_DisableTrig
	case "AT_EnableTrigAll":
		return AT_EnableTrigAll
	case "AT_DisableTrigAll":
		return AT_DisableTrigAll
	case "AT_EnableTrigUser":
		return AT_EnableTrigUser
	case "AT_DisableTrigUser":
		return AT_DisableTrigUser
	case "AT_EnableRule":
		return AT_EnableRule
	case "AT_EnableAlwaysRule":
		return AT_EnableAlwaysRule
	case "AT_EnableReplicaRule":
		return AT_EnableReplicaRule
	case "AT_DisableRule":
		return AT_DisableRule
	case "AT_AddInherit":
		return AT_AddInherit
	case "AT_DropInherit":
		return AT_DropInherit
	case "AT_AddOf":
		return AT_AddOf
	case "AT_DropOf":
		return AT_DropOf
	case "AT_ReplicaIdentity":
		return AT_ReplicaIdentity
	case "AT_EnableRowSecurity":
		return AT_EnableRowSecurity
	case "AT_DisableRowSecurity":
		return AT_DisableRowSecurity
	case "AT_ForceRowSecurity":
		return AT_ForceRowSecurity
	case "AT_NoForceRowSecurity":
		return AT_NoForceRowSecurity
	case "AT_GenericOptions":
		return AT_GenericOptions
	case "AT_AttachPartition":
		return AT_AttachPartition
	case "AT_DetachPartition":
		return AT_DetachPartition
	case "AT_AddIdentity":
		return AT_AddIdentity
	case "AT_SetIdentity":
		return AT_SetIdentity
	case "AT_DropIdentity":
		return AT_DropIdentity
	}

	return AlterTableType(0)
}

var AlterTableTypeString = map[AlterTableType]string{
	AT_AddColumn:                 "AT_AddColumn",
	AT_AddColumnRecurse:          "AT_AddColumnRecurse",
	AT_AddColumnToView:           "AT_AddColumnToView",
	AT_ColumnDefault:             "AT_ColumnDefault",
	AT_DropNotNull:               "AT_DropNotNull",
	AT_SetNotNull:                "AT_SetNotNull",
	AT_CheckNotNull:              "AT_CheckNotNull",
	AT_SetStatistics:             "AT_SetStatistics",
	AT_SetOptions:                "AT_SetOptions",
	AT_ResetOptions:              "AT_ResetOptions",
	AT_SetStorage:                "AT_SetStorage",
	AT_DropColumn:                "AT_DropColumn",
	AT_DropColumnRecurse:         "AT_DropColumnRecurse",
	AT_AddIndex:                  "AT_AddIndex",
	AT_ReAddIndex:                "AT_ReAddIndex",
	AT_AddConstraint:             "AT_AddConstraint",
	AT_AddConstraintRecurse:      "AT_AddConstraintRecurse",
	AT_ReAddConstraint:           "AT_ReAddConstraint",
	AT_ReAddDomainConstraint:     "AT_ReAddDomainConstraint",
	AT_AlterConstraint:           "AT_AlterConstraint",
	AT_ValidateConstraint:        "AT_ValidateConstraint",
	AT_ValidateConstraintRecurse: "AT_ValidateConstraintRecurse",
	AT_ProcessedConstraint:       "AT_ProcessedConstraint",
	AT_AddIndexConstraint:        "AT_AddIndexConstraint",
	AT_DropConstraint:            "AT_DropConstraint",
	AT_DropConstraintRecurse:     "AT_DropConstraintRecurse",
	AT_ReAddComment:              "AT_ReAddComment",
	AT_AlterColumnType:           "AT_AlterColumnType",
	AT_AlterColumnGenericOptions: "AT_AlterColumnGenericOptions",
	AT_ChangeOwner:               "AT_ChangeOwner",
	AT_ClusterOn:                 "AT_ClusterOn",
	AT_DropCluster:               "AT_DropCluster",
	AT_SetLogged:                 "AT_SetLogged",
	AT_SetUnLogged:               "AT_SetUnLogged",
	AT_DropOids:                  "AT_DropOids",
	AT_SetTableSpace:             "AT_SetTableSpace",
	AT_SetRelOptions:             "AT_SetRelOptions",
	AT_ResetRelOptions:           "AT_ResetRelOptions",
	AT_ReplaceRelOptions:         "AT_ReplaceRelOptions",
	AT_EnableTrig:                "AT_EnableTrig",
	AT_EnableAlwaysTrig:          "AT_EnableAlwaysTrig",
	AT_EnableReplicaTrig:         "AT_EnableReplicaTrig",
	AT_DisableTrig:               "AT_DisableTrig",
	AT_EnableTrigAll:             "AT_EnableTrigAll",
	AT_DisableTrigAll:            "AT_DisableTrigAll",
	AT_EnableTrigUser:            "AT_EnableTrigUser",
	AT_DisableTrigUser:           "AT_DisableTrigUser",
	AT_EnableRule:                "AT_EnableRule",
	AT_EnableAlwaysRule:          "AT_EnableAlwaysRule",
	AT_EnableReplicaRule:         "AT_EnableReplicaRule",
	AT_DisableRule:               "AT_DisableRule",
	AT_AddInherit:                "AT_AddInherit",
	AT_DropInherit:               "AT_DropInherit",
	AT_AddOf:                     "AT_AddOf",
	AT_DropOf:                    "AT_DropOf",
	AT_ReplicaIdentity:           "AT_ReplicaIdentity",
	AT_EnableRowSecurity:         "AT_EnableRowSecurity",
	AT_DisableRowSecurity:        "AT_DisableRowSecurity",
	AT_ForceRowSecurity:          "AT_ForceRowSecurity",
	AT_NoForceRowSecurity:        "AT_NoForceRowSecurity",
	AT_GenericOptions:            "AT_GenericOptions",
	AT_AttachPartition:           "AT_AttachPartition",
	AT_DetachPartition:           "AT_DetachPartition",
	AT_AddIdentity:               "AT_AddIdentity",
	AT_SetIdentity:               "AT_SetIdentity",
	AT_DropIdentity:              "AT_DropIdentity",
}

func (e AlterTableType) String() string {
	return AlterTableTypeString[e]
}

type GrantTargetType int32

const (
	ACL_TARGET_OBJECT        GrantTargetType = 0
	ACL_TARGET_ALL_IN_SCHEMA GrantTargetType = 1
	ACL_TARGET_DEFAULTS      GrantTargetType = 2
)

func NewGrantTargetType(name string) GrantTargetType {
	switch name {
	case "ACL_TARGET_ALL_IN_SCHEMA":
		return ACL_TARGET_ALL_IN_SCHEMA
	case "ACL_TARGET_DEFAULTS":
		return ACL_TARGET_DEFAULTS
	}

	return GrantTargetType(0)
}

var GrantTargetTypeString = map[GrantTargetType]string{
	ACL_TARGET_OBJECT:        "ACL_TARGET_OBJECT",
	ACL_TARGET_ALL_IN_SCHEMA: "ACL_TARGET_ALL_IN_SCHEMA",
	ACL_TARGET_DEFAULTS:      "ACL_TARGET_DEFAULTS",
}

func (e GrantTargetType) String() string {
	return GrantTargetTypeString[e]
}

type VariableSetKind int32

const (
	VAR_SET_VALUE   VariableSetKind = 0
	VAR_SET_DEFAULT VariableSetKind = 1
	VAR_SET_CURRENT VariableSetKind = 2
	VAR_SET_MULTI   VariableSetKind = 3
	VAR_RESET       VariableSetKind = 4
	VAR_RESET_ALL   VariableSetKind = 5
)

func NewVariableSetKind(name string) VariableSetKind {
	switch name {
	case "VAR_SET_DEFAULT":
		return VAR_SET_DEFAULT
	case "VAR_SET_CURRENT":
		return VAR_SET_CURRENT
	case "VAR_SET_MULTI":
		return VAR_SET_MULTI
	case "VAR_RESET":
		return VAR_RESET
	case "VAR_RESET_ALL":
		return VAR_RESET_ALL
	}

	return VariableSetKind(0)
}

var VariableSetKindString = map[VariableSetKind]string{
	VAR_SET_VALUE:   "VAR_SET_VALUE",
	VAR_SET_DEFAULT: "VAR_SET_DEFAULT",
	VAR_SET_CURRENT: "VAR_SET_CURRENT",
	VAR_SET_MULTI:   "VAR_SET_MULTI",
	VAR_RESET:       "VAR_RESET",
	VAR_RESET_ALL:   "VAR_RESET_ALL",
}

func (e VariableSetKind) String() string {
	return VariableSetKindString[e]
}

type ConstrType int32

const (
	CONSTR_NULL                ConstrType = 0
	CONSTR_NOTNULL             ConstrType = 1
	CONSTR_DEFAULT             ConstrType = 2
	CONSTR_IDENTITY            ConstrType = 3
	CONSTR_GENERATED           ConstrType = 4
	CONSTR_CHECK               ConstrType = 5
	CONSTR_PRIMARY             ConstrType = 6
	CONSTR_UNIQUE              ConstrType = 7
	CONSTR_EXCLUSION           ConstrType = 8
	CONSTR_FOREIGN             ConstrType = 9
	CONSTR_ATTR_DEFERRABLE     ConstrType = 10
	CONSTR_ATTR_NOT_DEFERRABLE ConstrType = 11
	CONSTR_ATTR_DEFERRED       ConstrType = 12
	CONSTR_ATTR_IMMEDIATE      ConstrType = 13
)

func NewConstrType(name string) ConstrType {
	switch name {
	case "CONSTR_NOTNULL":
		return CONSTR_NOTNULL
	case "CONSTR_DEFAULT":
		return CONSTR_DEFAULT
	case "CONSTR_IDENTITY":
		return CONSTR_IDENTITY
	case "CONSTR_GENERATED":
		return CONSTR_GENERATED
	case "CONSTR_CHECK":
		return CONSTR_CHECK
	case "CONSTR_PRIMARY":
		return CONSTR_PRIMARY
	case "CONSTR_UNIQUE":
		return CONSTR_UNIQUE
	case "CONSTR_EXCLUSION":
		return CONSTR_EXCLUSION
	case "CONSTR_FOREIGN":
		return CONSTR_FOREIGN
	case "CONSTR_ATTR_DEFERRABLE":
		return CONSTR_ATTR_DEFERRABLE
	case "CONSTR_ATTR_NOT_DEFERRABLE":
		return CONSTR_ATTR_NOT_DEFERRABLE
	case "CONSTR_ATTR_DEFERRED":
		return CONSTR_ATTR_DEFERRED
	case "CONSTR_ATTR_IMMEDIATE":
		return CONSTR_ATTR_IMMEDIATE
	}

	return ConstrType(0)
}

var ConstrTypeString = map[ConstrType]string{
	CONSTR_NULL:                "CONSTR_NULL",
	CONSTR_NOTNULL:             "CONSTR_NOTNULL",
	CONSTR_DEFAULT:             "CONSTR_DEFAULT",
	CONSTR_IDENTITY:            "CONSTR_IDENTITY",
	CONSTR_GENERATED:           "CONSTR_GENERATED",
	CONSTR_CHECK:               "CONSTR_CHECK",
	CONSTR_PRIMARY:             "CONSTR_PRIMARY",
	CONSTR_UNIQUE:              "CONSTR_UNIQUE",
	CONSTR_EXCLUSION:           "CONSTR_EXCLUSION",
	CONSTR_FOREIGN:             "CONSTR_FOREIGN",
	CONSTR_ATTR_DEFERRABLE:     "CONSTR_ATTR_DEFERRABLE",
	CONSTR_ATTR_NOT_DEFERRABLE: "CONSTR_ATTR_NOT_DEFERRABLE",
	CONSTR_ATTR_DEFERRED:       "CONSTR_ATTR_DEFERRED",
	CONSTR_ATTR_IMMEDIATE:      "CONSTR_ATTR_IMMEDIATE",
}

func (e ConstrType) String() string {
	return ConstrTypeString[e]
}

type ImportForeignSchemaType int32

const (
	FDW_IMPORT_SCHEMA_ALL      ImportForeignSchemaType = 0
	FDW_IMPORT_SCHEMA_LIMIT_TO ImportForeignSchemaType = 1
	FDW_IMPORT_SCHEMA_EXCEPT   ImportForeignSchemaType = 2
)

func NewImportForeignSchemaType(name string) ImportForeignSchemaType {
	switch name {
	case "FDW_IMPORT_SCHEMA_LIMIT_TO":
		return FDW_IMPORT_SCHEMA_LIMIT_TO
	case "FDW_IMPORT_SCHEMA_EXCEPT":
		return FDW_IMPORT_SCHEMA_EXCEPT
	}

	return ImportForeignSchemaType(0)
}

var ImportForeignSchemaTypeString = map[ImportForeignSchemaType]string{
	FDW_IMPORT_SCHEMA_ALL:      "FDW_IMPORT_SCHEMA_ALL",
	FDW_IMPORT_SCHEMA_LIMIT_TO: "FDW_IMPORT_SCHEMA_LIMIT_TO",
	FDW_IMPORT_SCHEMA_EXCEPT:   "FDW_IMPORT_SCHEMA_EXCEPT",
}

func (e ImportForeignSchemaType) String() string {
	return ImportForeignSchemaTypeString[e]
}

type RoleStmtType int32

const (
	ROLESTMT_ROLE  RoleStmtType = 0
	ROLESTMT_USER  RoleStmtType = 1
	ROLESTMT_GROUP RoleStmtType = 2
)

func NewRoleStmtType(name string) RoleStmtType {
	switch name {
	case "ROLESTMT_USER":
		return ROLESTMT_USER
	case "ROLESTMT_GROUP":
		return ROLESTMT_GROUP
	}

	return RoleStmtType(0)
}

var RoleStmtTypeString = map[RoleStmtType]string{
	ROLESTMT_ROLE:  "ROLESTMT_ROLE",
	ROLESTMT_USER:  "ROLESTMT_USER",
	ROLESTMT_GROUP: "ROLESTMT_GROUP",
}

func (e RoleStmtType) String() string {
	return RoleStmtTypeString[e]
}

type FetchDirection int32

const (
	FETCH_FORWARD  FetchDirection = 0
	FETCH_BACKWARD FetchDirection = 1
	FETCH_ABSOLUTE FetchDirection = 2
	FETCH_RELATIVE FetchDirection = 3
)

func NewFetchDirection(name string) FetchDirection {
	switch name {
	case "FETCH_BACKWARD":
		return FETCH_BACKWARD
	case "FETCH_ABSOLUTE":
		return FETCH_ABSOLUTE
	case "FETCH_RELATIVE":
		return FETCH_RELATIVE
	}

	return FetchDirection(0)
}

var FetchDirectionString = map[FetchDirection]string{
	FETCH_FORWARD:  "FETCH_FORWARD",
	FETCH_BACKWARD: "FETCH_BACKWARD",
	FETCH_ABSOLUTE: "FETCH_ABSOLUTE",
	FETCH_RELATIVE: "FETCH_RELATIVE",
}

func (e FetchDirection) String() string {
	return FetchDirectionString[e]
}

type FunctionParameterMode int32

const (
	FUNC_PARAM_IN       FunctionParameterMode = 0
	FUNC_PARAM_OUT      FunctionParameterMode = 1
	FUNC_PARAM_INOUT    FunctionParameterMode = 2
	FUNC_PARAM_VARIADIC FunctionParameterMode = 3
	FUNC_PARAM_TABLE    FunctionParameterMode = 4
)

func NewFunctionParameterMode(name string) FunctionParameterMode {
	switch name {
	case "FUNC_PARAM_OUT":
		return FUNC_PARAM_OUT
	case "FUNC_PARAM_INOUT":
		return FUNC_PARAM_INOUT
	case "FUNC_PARAM_VARIADIC":
		return FUNC_PARAM_VARIADIC
	case "FUNC_PARAM_TABLE":
		return FUNC_PARAM_TABLE
	}

	return FunctionParameterMode(0)
}

var FunctionParameterModeString = map[FunctionParameterMode]string{
	FUNC_PARAM_IN:       "FUNC_PARAM_IN",
	FUNC_PARAM_OUT:      "FUNC_PARAM_OUT",
	FUNC_PARAM_INOUT:    "FUNC_PARAM_INOUT",
	FUNC_PARAM_VARIADIC: "FUNC_PARAM_VARIADIC",
	FUNC_PARAM_TABLE:    "FUNC_PARAM_TABLE",
}

func (e FunctionParameterMode) String() string {
	return FunctionParameterModeString[e]
}

type TransactionStmtKind int32

const (
	TRANS_STMT_BEGIN             TransactionStmtKind = 0
	TRANS_STMT_START             TransactionStmtKind = 1
	TRANS_STMT_COMMIT            TransactionStmtKind = 2
	TRANS_STMT_ROLLBACK          TransactionStmtKind = 3
	TRANS_STMT_SAVEPOINT         TransactionStmtKind = 4
	TRANS_STMT_RELEASE           TransactionStmtKind = 5
	TRANS_STMT_ROLLBACK_TO       TransactionStmtKind = 6
	TRANS_STMT_PREPARE           TransactionStmtKind = 7
	TRANS_STMT_COMMIT_PREPARED   TransactionStmtKind = 8
	TRANS_STMT_ROLLBACK_PREPARED TransactionStmtKind = 9
)

func NewTransactionStmtKind(name string) TransactionStmtKind {
	switch name {
	case "TRANS_STMT_START":
		return TRANS_STMT_START
	case "TRANS_STMT_COMMIT":
		return TRANS_STMT_COMMIT
	case "TRANS_STMT_ROLLBACK":
		return TRANS_STMT_ROLLBACK
	case "TRANS_STMT_SAVEPOINT":
		return TRANS_STMT_SAVEPOINT
	case "TRANS_STMT_RELEASE":
		return TRANS_STMT_RELEASE
	case "TRANS_STMT_ROLLBACK_TO":
		return TRANS_STMT_ROLLBACK_TO
	case "TRANS_STMT_PREPARE":
		return TRANS_STMT_PREPARE
	case "TRANS_STMT_COMMIT_PREPARED":
		return TRANS_STMT_COMMIT_PREPARED
	case "TRANS_STMT_ROLLBACK_PREPARED":
		return TRANS_STMT_ROLLBACK_PREPARED
	}

	return TransactionStmtKind(0)
}

var TransactionStmtKindString = map[TransactionStmtKind]string{
	TRANS_STMT_BEGIN:             "TRANS_STMT_BEGIN",
	TRANS_STMT_START:             "TRANS_STMT_START",
	TRANS_STMT_COMMIT:            "TRANS_STMT_COMMIT",
	TRANS_STMT_ROLLBACK:          "TRANS_STMT_ROLLBACK",
	TRANS_STMT_SAVEPOINT:         "TRANS_STMT_SAVEPOINT",
	TRANS_STMT_RELEASE:           "TRANS_STMT_RELEASE",
	TRANS_STMT_ROLLBACK_TO:       "TRANS_STMT_ROLLBACK_TO",
	TRANS_STMT_PREPARE:           "TRANS_STMT_PREPARE",
	TRANS_STMT_COMMIT_PREPARED:   "TRANS_STMT_COMMIT_PREPARED",
	TRANS_STMT_ROLLBACK_PREPARED: "TRANS_STMT_ROLLBACK_PREPARED",
}

func (e TransactionStmtKind) String() string {
	return TransactionStmtKindString[e]
}

type ViewCheckOption int32

const (
	NO_CHECK_OPTION       ViewCheckOption = 0
	LOCAL_CHECK_OPTION    ViewCheckOption = 1
	CASCADED_CHECK_OPTION ViewCheckOption = 2
)

func NewViewCheckOption(name string) ViewCheckOption {
	switch name {
	case "LOCAL_CHECK_OPTION":
		return LOCAL_CHECK_OPTION
	case "CASCADED_CHECK_OPTION":
		return CASCADED_CHECK_OPTION
	}

	return ViewCheckOption(0)
}

var ViewCheckOptionString = map[ViewCheckOption]string{
	NO_CHECK_OPTION:       "NO_CHECK_OPTION",
	LOCAL_CHECK_OPTION:    "LOCAL_CHECK_OPTION",
	CASCADED_CHECK_OPTION: "CASCADED_CHECK_OPTION",
}

func (e ViewCheckOption) String() string {
	return ViewCheckOptionString[e]
}

type ClusterOption int32

const (
	CLUOPT_RECHECK ClusterOption = 0
	CLUOPT_VERBOSE ClusterOption = 1
)

func NewClusterOption(name string) ClusterOption {
	switch name {
	case "CLUOPT_VERBOSE":
		return CLUOPT_VERBOSE
	}

	return ClusterOption(0)
}

var ClusterOptionString = map[ClusterOption]string{
	CLUOPT_RECHECK: "CLUOPT_RECHECK",
	CLUOPT_VERBOSE: "CLUOPT_VERBOSE",
}

func (e ClusterOption) String() string {
	return ClusterOptionString[e]
}

type DiscardMode int32

const (
	DISCARD_ALL       DiscardMode = 0
	DISCARD_PLANS     DiscardMode = 1
	DISCARD_SEQUENCES DiscardMode = 2
	DISCARD_TEMP      DiscardMode = 3
)

func NewDiscardMode(name string) DiscardMode {
	switch name {
	case "DISCARD_PLANS":
		return DISCARD_PLANS
	case "DISCARD_SEQUENCES":
		return DISCARD_SEQUENCES
	case "DISCARD_TEMP":
		return DISCARD_TEMP
	}

	return DiscardMode(0)
}

var DiscardModeString = map[DiscardMode]string{
	DISCARD_ALL:       "DISCARD_ALL",
	DISCARD_PLANS:     "DISCARD_PLANS",
	DISCARD_SEQUENCES: "DISCARD_SEQUENCES",
	DISCARD_TEMP:      "DISCARD_TEMP",
}

func (e DiscardMode) String() string {
	return DiscardModeString[e]
}

type ReindexObjectType int32

const (
	REINDEX_OBJECT_INDEX    ReindexObjectType = 0
	REINDEX_OBJECT_TABLE    ReindexObjectType = 1
	REINDEX_OBJECT_SCHEMA   ReindexObjectType = 2
	REINDEX_OBJECT_SYSTEM   ReindexObjectType = 3
	REINDEX_OBJECT_DATABASE ReindexObjectType = 4
)

func NewReindexObjectType(name string) ReindexObjectType {
	switch name {
	case "REINDEX_OBJECT_TABLE":
		return REINDEX_OBJECT_TABLE
	case "REINDEX_OBJECT_SCHEMA":
		return REINDEX_OBJECT_SCHEMA
	case "REINDEX_OBJECT_SYSTEM":
		return REINDEX_OBJECT_SYSTEM
	case "REINDEX_OBJECT_DATABASE":
		return REINDEX_OBJECT_DATABASE
	}

	return ReindexObjectType(0)
}

var ReindexObjectTypeString = map[ReindexObjectType]string{
	REINDEX_OBJECT_INDEX:    "REINDEX_OBJECT_INDEX",
	REINDEX_OBJECT_TABLE:    "REINDEX_OBJECT_TABLE",
	REINDEX_OBJECT_SCHEMA:   "REINDEX_OBJECT_SCHEMA",
	REINDEX_OBJECT_SYSTEM:   "REINDEX_OBJECT_SYSTEM",
	REINDEX_OBJECT_DATABASE: "REINDEX_OBJECT_DATABASE",
}

func (e ReindexObjectType) String() string {
	return ReindexObjectTypeString[e]
}

type AlterTSConfigType int32

const (
	ALTER_TSCONFIG_ADD_MAPPING             AlterTSConfigType = 0
	ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN AlterTSConfigType = 1
	ALTER_TSCONFIG_REPLACE_DICT            AlterTSConfigType = 2
	ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN  AlterTSConfigType = 3
	ALTER_TSCONFIG_DROP_MAPPING            AlterTSConfigType = 4
)

func NewAlterTSConfigType(name string) AlterTSConfigType {
	switch name {
	case "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN":
		return ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN
	case "ALTER_TSCONFIG_REPLACE_DICT":
		return ALTER_TSCONFIG_REPLACE_DICT
	case "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN":
		return ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN
	case "ALTER_TSCONFIG_DROP_MAPPING":
		return ALTER_TSCONFIG_DROP_MAPPING
	}

	return AlterTSConfigType(0)
}

var AlterTSConfigTypeString = map[AlterTSConfigType]string{
	ALTER_TSCONFIG_ADD_MAPPING:             "ALTER_TSCONFIG_ADD_MAPPING",
	ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN: "ALTER_TSCONFIG_ALTER_MAPPING_FOR_TOKEN",
	ALTER_TSCONFIG_REPLACE_DICT:            "ALTER_TSCONFIG_REPLACE_DICT",
	ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN:  "ALTER_TSCONFIG_REPLACE_DICT_FOR_TOKEN",
	ALTER_TSCONFIG_DROP_MAPPING:            "ALTER_TSCONFIG_DROP_MAPPING",
}

func (e AlterTSConfigType) String() string {
	return AlterTSConfigTypeString[e]
}

type AlterSubscriptionType int32

const (
	ALTER_SUBSCRIPTION_OPTIONS     AlterSubscriptionType = 0
	ALTER_SUBSCRIPTION_CONNECTION  AlterSubscriptionType = 1
	ALTER_SUBSCRIPTION_PUBLICATION AlterSubscriptionType = 2
	ALTER_SUBSCRIPTION_REFRESH     AlterSubscriptionType = 3
	ALTER_SUBSCRIPTION_ENABLED     AlterSubscriptionType = 4
)

func NewAlterSubscriptionType(name string) AlterSubscriptionType {
	switch name {
	case "ALTER_SUBSCRIPTION_CONNECTION":
		return ALTER_SUBSCRIPTION_CONNECTION
	case "ALTER_SUBSCRIPTION_PUBLICATION":
		return ALTER_SUBSCRIPTION_PUBLICATION
	case "ALTER_SUBSCRIPTION_REFRESH":
		return ALTER_SUBSCRIPTION_REFRESH
	case "ALTER_SUBSCRIPTION_ENABLED":
		return ALTER_SUBSCRIPTION_ENABLED
	}

	return AlterSubscriptionType(0)
}

var AlterSubscriptionTypeString = map[AlterSubscriptionType]string{
	ALTER_SUBSCRIPTION_OPTIONS:     "ALTER_SUBSCRIPTION_OPTIONS",
	ALTER_SUBSCRIPTION_CONNECTION:  "ALTER_SUBSCRIPTION_CONNECTION",
	ALTER_SUBSCRIPTION_PUBLICATION: "ALTER_SUBSCRIPTION_PUBLICATION",
	ALTER_SUBSCRIPTION_REFRESH:     "ALTER_SUBSCRIPTION_REFRESH",
	ALTER_SUBSCRIPTION_ENABLED:     "ALTER_SUBSCRIPTION_ENABLED",
}

func (e AlterSubscriptionType) String() string {
	return AlterSubscriptionTypeString[e]
}

type OnCommitAction int32

const (
	ONCOMMIT_NOOP          OnCommitAction = 0
	ONCOMMIT_PRESERVE_ROWS OnCommitAction = 1
	ONCOMMIT_DELETE_ROWS   OnCommitAction = 2
	ONCOMMIT_DROP          OnCommitAction = 3
)

func NewOnCommitAction(name string) OnCommitAction {
	switch name {
	case "ONCOMMIT_PRESERVE_ROWS":
		return ONCOMMIT_PRESERVE_ROWS
	case "ONCOMMIT_DELETE_ROWS":
		return ONCOMMIT_DELETE_ROWS
	case "ONCOMMIT_DROP":
		return ONCOMMIT_DROP
	}

	return OnCommitAction(0)
}

var OnCommitActionString = map[OnCommitAction]string{
	ONCOMMIT_NOOP:          "ONCOMMIT_NOOP",
	ONCOMMIT_PRESERVE_ROWS: "ONCOMMIT_PRESERVE_ROWS",
	ONCOMMIT_DELETE_ROWS:   "ONCOMMIT_DELETE_ROWS",
	ONCOMMIT_DROP:          "ONCOMMIT_DROP",
}

func (e OnCommitAction) String() string {
	return OnCommitActionString[e]
}

type ParamKind int32

const (
	PARAM_EXTERN    ParamKind = 0
	PARAM_EXEC      ParamKind = 1
	PARAM_SUBLINK   ParamKind = 2
	PARAM_MULTIEXPR ParamKind = 3
)

func NewParamKind(name string) ParamKind {
	switch name {
	case "PARAM_EXEC":
		return PARAM_EXEC
	case "PARAM_SUBLINK":
		return PARAM_SUBLINK
	case "PARAM_MULTIEXPR":
		return PARAM_MULTIEXPR
	}

	return ParamKind(0)
}

var ParamKindString = map[ParamKind]string{
	PARAM_EXTERN:    "PARAM_EXTERN",
	PARAM_EXEC:      "PARAM_EXEC",
	PARAM_SUBLINK:   "PARAM_SUBLINK",
	PARAM_MULTIEXPR: "PARAM_MULTIEXPR",
}

func (e ParamKind) String() string {
	return ParamKindString[e]
}

type CoercionContext int32

const (
	COERCION_IMPLICIT   CoercionContext = 0
	COERCION_ASSIGNMENT CoercionContext = 1
	COERCION_EXPLICIT   CoercionContext = 2
)

func NewCoercionContext(name string) CoercionContext {
	switch name {
	case "COERCION_ASSIGNMENT":
		return COERCION_ASSIGNMENT
	case "COERCION_EXPLICIT":
		return COERCION_EXPLICIT
	}

	return CoercionContext(0)
}

var CoercionContextString = map[CoercionContext]string{
	COERCION_IMPLICIT:   "COERCION_IMPLICIT",
	COERCION_ASSIGNMENT: "COERCION_ASSIGNMENT",
	COERCION_EXPLICIT:   "COERCION_EXPLICIT",
}

func (e CoercionContext) String() string {
	return CoercionContextString[e]
}

type CoercionForm int32

const (
	COERCE_EXPLICIT_CALL CoercionForm = 0
	COERCE_EXPLICIT_CAST CoercionForm = 1
	COERCE_IMPLICIT_CAST CoercionForm = 2
)

func NewCoercionForm(name string) CoercionForm {
	switch name {
	case "COERCE_EXPLICIT_CAST":
		return COERCE_EXPLICIT_CAST
	case "COERCE_IMPLICIT_CAST":
		return COERCE_IMPLICIT_CAST
	}

	return CoercionForm(0)
}

var CoercionFormString = map[CoercionForm]string{
	COERCE_EXPLICIT_CALL: "COERCE_EXPLICIT_CALL",
	COERCE_EXPLICIT_CAST: "COERCE_EXPLICIT_CAST",
	COERCE_IMPLICIT_CAST: "COERCE_IMPLICIT_CAST",
}

func (e CoercionForm) String() string {
	return CoercionFormString[e]
}

type BoolExprType int32

const (
	AND_EXPR BoolExprType = 0
	OR_EXPR  BoolExprType = 1
)

func NewBoolExprType(name string) BoolExprType {
	switch name {
	case "OR_EXPR":
		return OR_EXPR
	}

	return BoolExprType(0)
}

var BoolExprTypeString = map[BoolExprType]string{
	AND_EXPR: "AND_EXPR",
	OR_EXPR:  "OR_EXPR",
}

func (e BoolExprType) String() string {
	return BoolExprTypeString[e]
}

type SubLinkType int32

const (
	EXISTS_SUBLINK     SubLinkType = 0
	ALL_SUBLINK        SubLinkType = 1
	ANY_SUBLINK        SubLinkType = 2
	ROWCOMPARE_SUBLINK SubLinkType = 3
	EXPR_SUBLINK       SubLinkType = 4
	MULTIEXPR_SUBLINK  SubLinkType = 5
	ARRAY_SUBLINK      SubLinkType = 6
	CTE_SUBLINK        SubLinkType = 7
)

func NewSubLinkType(name string) SubLinkType {
	switch name {
	case "ALL_SUBLINK":
		return ALL_SUBLINK
	case "ANY_SUBLINK":
		return ANY_SUBLINK
	case "ROWCOMPARE_SUBLINK":
		return ROWCOMPARE_SUBLINK
	case "EXPR_SUBLINK":
		return EXPR_SUBLINK
	case "MULTIEXPR_SUBLINK":
		return MULTIEXPR_SUBLINK
	case "ARRAY_SUBLINK":
		return ARRAY_SUBLINK
	case "CTE_SUBLINK":
		return CTE_SUBLINK
	}

	return SubLinkType(0)
}

var SubLinkTypeString = map[SubLinkType]string{
	EXISTS_SUBLINK:     "EXISTS_SUBLINK",
	ALL_SUBLINK:        "ALL_SUBLINK",
	ANY_SUBLINK:        "ANY_SUBLINK",
	ROWCOMPARE_SUBLINK: "ROWCOMPARE_SUBLINK",
	EXPR_SUBLINK:       "EXPR_SUBLINK",
	MULTIEXPR_SUBLINK:  "MULTIEXPR_SUBLINK",
	ARRAY_SUBLINK:      "ARRAY_SUBLINK",
	CTE_SUBLINK:        "CTE_SUBLINK",
}

func (e SubLinkType) String() string {
	return SubLinkTypeString[e]
}

type RowCompareType int32

const (
	ROWCOMPARE_LT RowCompareType = 0
	ROWCOMPARE_LE RowCompareType = 1
	ROWCOMPARE_EQ RowCompareType = 2
	ROWCOMPARE_GE RowCompareType = 3
	ROWCOMPARE_GT RowCompareType = 4
	ROWCOMPARE_NE RowCompareType = 5
)

func NewRowCompareType(name string) RowCompareType {
	switch name {
	case "ROWCOMPARE_LE":
		return ROWCOMPARE_LE
	case "ROWCOMPARE_EQ":
		return ROWCOMPARE_EQ
	case "ROWCOMPARE_GE":
		return ROWCOMPARE_GE
	case "ROWCOMPARE_GT":
		return ROWCOMPARE_GT
	case "ROWCOMPARE_NE":
		return ROWCOMPARE_NE
	}

	return RowCompareType(0)
}

var RowCompareTypeString = map[RowCompareType]string{
	ROWCOMPARE_LT: "ROWCOMPARE_LT",
	ROWCOMPARE_LE: "ROWCOMPARE_LE",
	ROWCOMPARE_EQ: "ROWCOMPARE_EQ",
	ROWCOMPARE_GE: "ROWCOMPARE_GE",
	ROWCOMPARE_GT: "ROWCOMPARE_GT",
	ROWCOMPARE_NE: "ROWCOMPARE_NE",
}

func (e RowCompareType) String() string {
	return RowCompareTypeString[e]
}

type MinMaxOp int32

const (
	IS_GREATEST MinMaxOp = 0
	IS_LEAST    MinMaxOp = 1
)

func NewMinMaxOp(name string) MinMaxOp {
	switch name {
	case "IS_LEAST":
		return IS_LEAST
	}

	return MinMaxOp(0)
}

var MinMaxOpString = map[MinMaxOp]string{
	IS_GREATEST: "IS_GREATEST",
	IS_LEAST:    "IS_LEAST",
}

func (e MinMaxOp) String() string {
	return MinMaxOpString[e]
}

type SQLValueFunctionOp int32

const (
	SVFOP_CURRENT_DATE        SQLValueFunctionOp = 0
	SVFOP_CURRENT_TIME        SQLValueFunctionOp = 1
	SVFOP_CURRENT_TIME_N      SQLValueFunctionOp = 2
	SVFOP_CURRENT_TIMESTAMP   SQLValueFunctionOp = 3
	SVFOP_CURRENT_TIMESTAMP_N SQLValueFunctionOp = 4
	SVFOP_LOCALTIME           SQLValueFunctionOp = 5
	SVFOP_LOCALTIME_N         SQLValueFunctionOp = 6
	SVFOP_LOCALTIMESTAMP      SQLValueFunctionOp = 7
	SVFOP_LOCALTIMESTAMP_N    SQLValueFunctionOp = 8
	SVFOP_CURRENT_ROLE        SQLValueFunctionOp = 9
	SVFOP_CURRENT_USER        SQLValueFunctionOp = 10
	SVFOP_USER                SQLValueFunctionOp = 11
	SVFOP_SESSION_USER        SQLValueFunctionOp = 12
	SVFOP_CURRENT_CATALOG     SQLValueFunctionOp = 13
	SVFOP_CURRENT_SCHEMA      SQLValueFunctionOp = 14
)

func NewSQLValueFunctionOp(name string) SQLValueFunctionOp {
	switch name {
	case "SVFOP_CURRENT_TIME":
		return SVFOP_CURRENT_TIME
	case "SVFOP_CURRENT_TIME_N":
		return SVFOP_CURRENT_TIME_N
	case "SVFOP_CURRENT_TIMESTAMP":
		return SVFOP_CURRENT_TIMESTAMP
	case "SVFOP_CURRENT_TIMESTAMP_N":
		return SVFOP_CURRENT_TIMESTAMP_N
	case "SVFOP_LOCALTIME":
		return SVFOP_LOCALTIME
	case "SVFOP_LOCALTIME_N":
		return SVFOP_LOCALTIME_N
	case "SVFOP_LOCALTIMESTAMP":
		return SVFOP_LOCALTIMESTAMP
	case "SVFOP_LOCALTIMESTAMP_N":
		return SVFOP_LOCALTIMESTAMP_N
	case "SVFOP_CURRENT_ROLE":
		return SVFOP_CURRENT_ROLE
	case "SVFOP_CURRENT_USER":
		return SVFOP_CURRENT_USER
	case "SVFOP_USER":
		return SVFOP_USER
	case "SVFOP_SESSION_USER":
		return SVFOP_SESSION_USER
	case "SVFOP_CURRENT_CATALOG":
		return SVFOP_CURRENT_CATALOG
	case "SVFOP_CURRENT_SCHEMA":
		return SVFOP_CURRENT_SCHEMA
	}

	return SQLValueFunctionOp(0)
}

var SQLValueFunctionOpString = map[SQLValueFunctionOp]string{
	SVFOP_CURRENT_DATE:        "SVFOP_CURRENT_DATE",
	SVFOP_CURRENT_TIME:        "SVFOP_CURRENT_TIME",
	SVFOP_CURRENT_TIME_N:      "SVFOP_CURRENT_TIME_N",
	SVFOP_CURRENT_TIMESTAMP:   "SVFOP_CURRENT_TIMESTAMP",
	SVFOP_CURRENT_TIMESTAMP_N: "SVFOP_CURRENT_TIMESTAMP_N",
	SVFOP_LOCALTIME:           "SVFOP_LOCALTIME",
	SVFOP_LOCALTIME_N:         "SVFOP_LOCALTIME_N",
	SVFOP_LOCALTIMESTAMP:      "SVFOP_LOCALTIMESTAMP",
	SVFOP_LOCALTIMESTAMP_N:    "SVFOP_LOCALTIMESTAMP_N",
	SVFOP_CURRENT_ROLE:        "SVFOP_CURRENT_ROLE",
	SVFOP_CURRENT_USER:        "SVFOP_CURRENT_USER",
	SVFOP_USER:                "SVFOP_USER",
	SVFOP_SESSION_USER:        "SVFOP_SESSION_USER",
	SVFOP_CURRENT_CATALOG:     "SVFOP_CURRENT_CATALOG",
	SVFOP_CURRENT_SCHEMA:      "SVFOP_CURRENT_SCHEMA",
}

func (e SQLValueFunctionOp) String() string {
	return SQLValueFunctionOpString[e]
}

type XmlExprOp int32

const (
	IS_XMLCONCAT    XmlExprOp = 0
	IS_XMLELEMENT   XmlExprOp = 1
	IS_XMLFOREST    XmlExprOp = 2
	IS_XMLPARSE     XmlExprOp = 3
	IS_XMLPI        XmlExprOp = 4
	IS_XMLROOT      XmlExprOp = 5
	IS_XMLSERIALIZE XmlExprOp = 6
	IS_DOCUMENT     XmlExprOp = 7
)

func NewXmlExprOp(name string) XmlExprOp {
	switch name {
	case "IS_XMLELEMENT":
		return IS_XMLELEMENT
	case "IS_XMLFOREST":
		return IS_XMLFOREST
	case "IS_XMLPARSE":
		return IS_XMLPARSE
	case "IS_XMLPI":
		return IS_XMLPI
	case "IS_XMLROOT":
		return IS_XMLROOT
	case "IS_XMLSERIALIZE":
		return IS_XMLSERIALIZE
	case "IS_DOCUMENT":
		return IS_DOCUMENT
	}

	return XmlExprOp(0)
}

var XmlExprOpString = map[XmlExprOp]string{
	IS_XMLCONCAT:    "IS_XMLCONCAT",
	IS_XMLELEMENT:   "IS_XMLELEMENT",
	IS_XMLFOREST:    "IS_XMLFOREST",
	IS_XMLPARSE:     "IS_XMLPARSE",
	IS_XMLPI:        "IS_XMLPI",
	IS_XMLROOT:      "IS_XMLROOT",
	IS_XMLSERIALIZE: "IS_XMLSERIALIZE",
	IS_DOCUMENT:     "IS_DOCUMENT",
}

func (e XmlExprOp) String() string {
	return XmlExprOpString[e]
}

type XmlOptionType int32

const (
	XMLOPTION_DOCUMENT XmlOptionType = 0
	XMLOPTION_CONTENT  XmlOptionType = 1
)

func NewXmlOptionType(name string) XmlOptionType {
	switch name {
	case "XMLOPTION_CONTENT":
		return XMLOPTION_CONTENT
	}

	return XmlOptionType(0)
}

var XmlOptionTypeString = map[XmlOptionType]string{
	XMLOPTION_DOCUMENT: "XMLOPTION_DOCUMENT",
	XMLOPTION_CONTENT:  "XMLOPTION_CONTENT",
}

func (e XmlOptionType) String() string {
	return XmlOptionTypeString[e]
}

type NullTestType int32

const (
	IS_NULL     NullTestType = 0
	IS_NOT_NULL NullTestType = 1
)

func NewNullTestType(name string) NullTestType {
	switch name {
	case "IS_NOT_NULL":
		return IS_NOT_NULL
	}

	return NullTestType(0)
}

var NullTestTypeString = map[NullTestType]string{
	IS_NULL:     "IS_NULL",
	IS_NOT_NULL: "IS_NOT_NULL",
}

func (e NullTestType) String() string {
	return NullTestTypeString[e]
}

type BoolTestType int32

const (
	IS_TRUE     BoolTestType = 0
	IS_NOT_TRUE BoolTestType = 1
)

func NewBoolTestType(name string) BoolTestType {
	switch name {
	case "IS_NOT_TRUE":
		return IS_NOT_TRUE
	}

	return BoolTestType(0)
}

var BoolTestTypeString = map[BoolTestType]string{
	IS_TRUE:     "IS_TRUE",
	IS_NOT_TRUE: "IS_NOT_TRUE",
}

func (e BoolTestType) String() string {
	return BoolTestTypeString[e]
}

type CmdType int32

const (
	CMD_UNKNOWN CmdType = 0
	CMD_SELECT  CmdType = 1
	CMD_UPDATE  CmdType = 2
	CMD_INSERT  CmdType = 3
	CMD_DELETE  CmdType = 4
	CMD_UTILITY CmdType = 5
	CMD_NOTHING CmdType = 6
)

func NewCmdType(name string) CmdType {
	switch name {
	case "CMD_SELECT":
		return CMD_SELECT
	case "CMD_UPDATE":
		return CMD_UPDATE
	case "CMD_INSERT":
		return CMD_INSERT
	case "CMD_DELETE":
		return CMD_DELETE
	case "CMD_UTILITY":
		return CMD_UTILITY
	case "CMD_NOTHING":
		return CMD_NOTHING
	}

	return CmdType(0)
}

var CmdTypeString = map[CmdType]string{
	CMD_UNKNOWN: "CMD_UNKNOWN",
	CMD_SELECT:  "CMD_SELECT",
	CMD_UPDATE:  "CMD_UPDATE",
	CMD_INSERT:  "CMD_INSERT",
	CMD_DELETE:  "CMD_DELETE",
	CMD_UTILITY: "CMD_UTILITY",
	CMD_NOTHING: "CMD_NOTHING",
}

func (e CmdType) String() string {
	return CmdTypeString[e]
}

type JoinType int32

const (
	JOIN_INNER        JoinType = 0
	JOIN_LEFT         JoinType = 1
	JOIN_FULL         JoinType = 2
	JOIN_RIGHT        JoinType = 3
	JOIN_SEMI         JoinType = 4
	JOIN_ANTI         JoinType = 5
	JOIN_UNIQUE_OUTER JoinType = 6
	JOIN_UNIQUE_INNER JoinType = 7
)

func NewJoinType(name string) JoinType {
	switch name {
	case "JOIN_LEFT":
		return JOIN_LEFT
	case "JOIN_FULL":
		return JOIN_FULL
	case "JOIN_RIGHT":
		return JOIN_RIGHT
	case "JOIN_SEMI":
		return JOIN_SEMI
	case "JOIN_ANTI":
		return JOIN_ANTI
	case "JOIN_UNIQUE_OUTER":
		return JOIN_UNIQUE_OUTER
	case "JOIN_UNIQUE_INNER":
		return JOIN_UNIQUE_INNER
	}

	return JoinType(0)
}

var JoinTypeString = map[JoinType]string{
	JOIN_INNER:        "JOIN_INNER",
	JOIN_LEFT:         "JOIN_LEFT",
	JOIN_FULL:         "JOIN_FULL",
	JOIN_RIGHT:        "JOIN_RIGHT",
	JOIN_SEMI:         "JOIN_SEMI",
	JOIN_ANTI:         "JOIN_ANTI",
	JOIN_UNIQUE_OUTER: "JOIN_UNIQUE_OUTER",
	JOIN_UNIQUE_INNER: "JOIN_UNIQUE_INNER",
}

func (e JoinType) String() string {
	return JoinTypeString[e]
}

type AggStrategy int32

const (
	AGG_PLAIN  AggStrategy = 0
	AGG_SORTED AggStrategy = 1
	AGG_HASHED AggStrategy = 2
	AGG_MIXED  AggStrategy = 3
)

func NewAggStrategy(name string) AggStrategy {
	switch name {
	case "AGG_SORTED":
		return AGG_SORTED
	case "AGG_HASHED":
		return AGG_HASHED
	case "AGG_MIXED":
		return AGG_MIXED
	}

	return AggStrategy(0)
}

var AggStrategyString = map[AggStrategy]string{
	AGG_PLAIN:  "AGG_PLAIN",
	AGG_SORTED: "AGG_SORTED",
	AGG_HASHED: "AGG_HASHED",
	AGG_MIXED:  "AGG_MIXED",
}

func (e AggStrategy) String() string {
	return AggStrategyString[e]
}

type AggSplit int32

const (
	AGGSPLIT_SIMPLE         AggSplit = 0
	AGGSPLIT_INITIAL_SERIAL AggSplit = 1
	AGGSPLIT_FINAL_DESERIAL AggSplit = 2
)

func NewAggSplit(name string) AggSplit {
	switch name {
	case "AGGSPLIT_INITIAL_SERIAL":
		return AGGSPLIT_INITIAL_SERIAL
	case "AGGSPLIT_FINAL_DESERIAL":
		return AGGSPLIT_FINAL_DESERIAL
	}

	return AggSplit(0)
}

var AggSplitString = map[AggSplit]string{
	AGGSPLIT_SIMPLE:         "AGGSPLIT_SIMPLE",
	AGGSPLIT_INITIAL_SERIAL: "AGGSPLIT_INITIAL_SERIAL",
	AGGSPLIT_FINAL_DESERIAL: "AGGSPLIT_FINAL_DESERIAL",
}

func (e AggSplit) String() string {
	return AggSplitString[e]
}

type SetOpCmd int32

const (
	SETOPCMD_INTERSECT     SetOpCmd = 0
	SETOPCMD_INTERSECT_ALL SetOpCmd = 1
	SETOPCMD_EXCEPT        SetOpCmd = 2
	SETOPCMD_EXCEPT_ALL    SetOpCmd = 3
)

func NewSetOpCmd(name string) SetOpCmd {
	switch name {
	case "SETOPCMD_INTERSECT_ALL":
		return SETOPCMD_INTERSECT_ALL
	case "SETOPCMD_EXCEPT":
		return SETOPCMD_EXCEPT
	case "SETOPCMD_EXCEPT_ALL":
		return SETOPCMD_EXCEPT_ALL
	}

	return SetOpCmd(0)
}

var SetOpCmdString = map[SetOpCmd]string{
	SETOPCMD_INTERSECT:     "SETOPCMD_INTERSECT",
	SETOPCMD_INTERSECT_ALL: "SETOPCMD_INTERSECT_ALL",
	SETOPCMD_EXCEPT:        "SETOPCMD_EXCEPT",
	SETOPCMD_EXCEPT_ALL:    "SETOPCMD_EXCEPT_ALL",
}

func (e SetOpCmd) String() string {
	return SetOpCmdString[e]
}

type SetOpStrategy int32

const (
	SETOP_SORTED SetOpStrategy = 0
	SETOP_HASHED SetOpStrategy = 1
)

func NewSetOpStrategy(name string) SetOpStrategy {
	switch name {
	case "SETOP_HASHED":
		return SETOP_HASHED
	}

	return SetOpStrategy(0)
}

var SetOpStrategyString = map[SetOpStrategy]string{
	SETOP_SORTED: "SETOP_SORTED",
	SETOP_HASHED: "SETOP_HASHED",
}

func (e SetOpStrategy) String() string {
	return SetOpStrategyString[e]
}

type OnConflictAction int32

const (
	ONCONFLICT_NONE    OnConflictAction = 0
	ONCONFLICT_NOTHING OnConflictAction = 1
	ONCONFLICT_UPDATE  OnConflictAction = 2
)

func NewOnConflictAction(name string) OnConflictAction {
	switch name {
	case "ONCONFLICT_NOTHING":
		return ONCONFLICT_NOTHING
	case "ONCONFLICT_UPDATE":
		return ONCONFLICT_UPDATE
	}

	return OnConflictAction(0)
}

var OnConflictActionString = map[OnConflictAction]string{
	ONCONFLICT_NONE:    "ONCONFLICT_NONE",
	ONCONFLICT_NOTHING: "ONCONFLICT_NOTHING",
	ONCONFLICT_UPDATE:  "ONCONFLICT_UPDATE",
}

func (e OnConflictAction) String() string {
	return OnConflictActionString[e]
}

type LockClauseStrength int32

const (
	LCS_NONE           LockClauseStrength = 0
	LCS_FORKEYSHARE    LockClauseStrength = 1
	LCS_FORSHARE       LockClauseStrength = 2
	LCS_FORNOKEYUPDATE LockClauseStrength = 3
	LCS_FORUPDATE      LockClauseStrength = 4
)

func NewLockClauseStrength(name string) LockClauseStrength {
	switch name {
	case "LCS_FORKEYSHARE":
		return LCS_FORKEYSHARE
	case "LCS_FORSHARE":
		return LCS_FORSHARE
	case "LCS_FORNOKEYUPDATE":
		return LCS_FORNOKEYUPDATE
	case "LCS_FORUPDATE":
		return LCS_FORUPDATE
	}

	return LockClauseStrength(0)
}

var LockClauseStrengthString = map[LockClauseStrength]string{
	LCS_NONE:           "LCS_NONE",
	LCS_FORKEYSHARE:    "LCS_FORKEYSHARE",
	LCS_FORSHARE:       "LCS_FORSHARE",
	LCS_FORNOKEYUPDATE: "LCS_FORNOKEYUPDATE",
	LCS_FORUPDATE:      "LCS_FORUPDATE",
}

func (e LockClauseStrength) String() string {
	return LockClauseStrengthString[e]
}

type LockWaitPolicy int32

const (
	LockWaitBlock LockWaitPolicy = 0
	LockWaitSkip  LockWaitPolicy = 1
	LockWaitError LockWaitPolicy = 2
)

func NewLockWaitPolicy(name string) LockWaitPolicy {
	switch name {
	case "LockWaitSkip":
		return LockWaitSkip
	case "LockWaitError":
		return LockWaitError
	}

	return LockWaitPolicy(0)
}

var LockWaitPolicyString = map[LockWaitPolicy]string{
	LockWaitBlock: "LockWaitBlock",
	LockWaitSkip:  "LockWaitSkip",
	LockWaitError: "LockWaitError",
}

func (e LockWaitPolicy) String() string {
	return LockWaitPolicyString[e]
}

type LockTupleMode int32

const (
	LockTupleKeyShare       LockTupleMode = 0
	LockTupleShare          LockTupleMode = 1
	LockTupleNoKeyExclusive LockTupleMode = 2
	LockTupleExclusive      LockTupleMode = 3
)

func NewLockTupleMode(name string) LockTupleMode {
	switch name {
	case "LockTupleShare":
		return LockTupleShare
	case "LockTupleNoKeyExclusive":
		return LockTupleNoKeyExclusive
	case "LockTupleExclusive":
		return LockTupleExclusive
	}

	return LockTupleMode(0)
}

var LockTupleModeString = map[LockTupleMode]string{
	LockTupleKeyShare:       "LockTupleKeyShare",
	LockTupleShare:          "LockTupleShare",
	LockTupleNoKeyExclusive: "LockTupleNoKeyExclusive",
	LockTupleExclusive:      "LockTupleExclusive",
}

func (e LockTupleMode) String() string {
	return LockTupleModeString[e]
}

type Node interface {
	node()
}

type Root struct {
	Node Node
}

func (*Root) node() {}

type Nodes []Node

func (Nodes) node() {}

type Integer struct {
	Ival int32 `json:"ival",omitempty`
}

func (*Integer) node() {}

type Float struct {
	Str string `json:"str",omitempty`
}

func (*Float) node() {}

type String struct {
	Str string `json:"str",omitempty`
}

func (*String) node() {}

type BitString struct {
	Str string `json:"str",omitempty`
}

func (*BitString) node() {}

type Null struct {
}

func (*Null) node() {}

type List struct {
	Items []Node `json:"items",omitempty`
}

func (*List) node() {}

type OidList struct {
	Items []Node `json:"items",omitempty`
}

func (*OidList) node() {}

type IntList struct {
	Items []Node `json:"items",omitempty`
}

func (*IntList) node() {}

type Alias struct {
	Aliasname string `json:"aliasname",omitempty`
	Colnames  []Node `json:"colnames",omitempty`
}

func (*Alias) node() {}

type RangeVar struct {
	Catalogname    string `json:"catalogname",omitempty`
	Schemaname     string `json:"schemaname",omitempty`
	Relname        string `json:"relname",omitempty`
	Inh            bool   `json:"inh",omitempty`
	Relpersistence string `json:"relpersistence",omitempty`
	Alias          *Alias `json:"alias",omitempty`
	Location       int32  `json:"location",omitempty`
}

func (*RangeVar) node() {}

type TableFunc struct {
	NsUris        []Node `json:"ns_uris",omitempty`
	NsNames       []Node `json:"ns_names",omitempty`
	Docexpr       Node   `json:"docexpr",omitempty`
	Rowexpr       Node   `json:"rowexpr",omitempty`
	Colnames      []Node `json:"colnames",omitempty`
	Coltypes      []Node `json:"coltypes",omitempty`
	Coltypmods    []Node `json:"coltypmods",omitempty`
	Colcollations []Node `json:"colcollations",omitempty`
	Colexprs      []Node `json:"colexprs",omitempty`
	Coldefexprs   []Node `json:"coldefexprs",omitempty`
	Ordinalitycol int32  `json:"ordinalitycol",omitempty`
	Location      int32  `json:"location",omitempty`
}

func (*TableFunc) node() {}

type Expr struct {
}

func (*Expr) node() {}

type Var struct {
	Xpr         Node    `json:"xpr",omitempty`
	Varno       *uint32 `json:"varno",omitempty`
	Varattno    int32   `json:"varattno",omitempty`
	Vartype     *uint32 `json:"vartype",omitempty`
	Vartypmod   int32   `json:"vartypmod",omitempty`
	Varcollid   *uint32 `json:"varcollid",omitempty`
	Varlevelsup *uint32 `json:"varlevelsup",omitempty`
	Varnoold    *uint32 `json:"varnoold",omitempty`
	Varoattno   int32   `json:"varoattno",omitempty`
	Location    int32   `json:"location",omitempty`
}

func (*Var) node() {}

type Param struct {
	Xpr         Node      `json:"xpr",omitempty`
	Paramkind   ParamKind `json:"paramkind",omitempty`
	Paramid     int32     `json:"paramid",omitempty`
	Paramtype   *uint32   `json:"paramtype",omitempty`
	Paramtypmod int32     `json:"paramtypmod",omitempty`
	Paramcollid *uint32   `json:"paramcollid",omitempty`
	Location    int32     `json:"location",omitempty`
}

func (*Param) node() {}

type Aggref struct {
	Xpr           Node     `json:"xpr",omitempty`
	Aggfnoid      *uint32  `json:"aggfnoid",omitempty`
	Aggtype       *uint32  `json:"aggtype",omitempty`
	Aggcollid     *uint32  `json:"aggcollid",omitempty`
	Inputcollid   *uint32  `json:"inputcollid",omitempty`
	Aggtranstype  *uint32  `json:"aggtranstype",omitempty`
	Aggargtypes   []Node   `json:"aggargtypes",omitempty`
	Aggdirectargs []Node   `json:"aggdirectargs",omitempty`
	Args          []Node   `json:"args",omitempty`
	Aggorder      []Node   `json:"aggorder",omitempty`
	Aggdistinct   []Node   `json:"aggdistinct",omitempty`
	Aggfilter     Node     `json:"aggfilter",omitempty`
	Aggstar       bool     `json:"aggstar",omitempty`
	Aggvariadic   bool     `json:"aggvariadic",omitempty`
	Aggkind       string   `json:"aggkind",omitempty`
	Agglevelsup   *uint32  `json:"agglevelsup",omitempty`
	Aggsplit      AggSplit `json:"aggsplit",omitempty`
	Location      int32    `json:"location",omitempty`
}

func (*Aggref) node() {}

type GroupingFunc struct {
	Xpr         Node    `json:"xpr",omitempty`
	Args        []Node  `json:"args",omitempty`
	Refs        []Node  `json:"refs",omitempty`
	Cols        []Node  `json:"cols",omitempty`
	Agglevelsup *uint32 `json:"agglevelsup",omitempty`
	Location    int32   `json:"location",omitempty`
}

func (*GroupingFunc) node() {}

type WindowFunc struct {
	Xpr         Node    `json:"xpr",omitempty`
	Winfnoid    *uint32 `json:"winfnoid",omitempty`
	Wintype     *uint32 `json:"wintype",omitempty`
	Wincollid   *uint32 `json:"wincollid",omitempty`
	Inputcollid *uint32 `json:"inputcollid",omitempty`
	Args        []Node  `json:"args",omitempty`
	Aggfilter   Node    `json:"aggfilter",omitempty`
	Winref      *uint32 `json:"winref",omitempty`
	Winstar     bool    `json:"winstar",omitempty`
	Winagg      bool    `json:"winagg",omitempty`
	Location    int32   `json:"location",omitempty`
}

func (*WindowFunc) node() {}

type SubscriptingRef struct {
	Xpr              Node    `json:"xpr",omitempty`
	Refcontainertype *uint32 `json:"refcontainertype",omitempty`
	Refelemtype      *uint32 `json:"refelemtype",omitempty`
	Reftypmod        int32   `json:"reftypmod",omitempty`
	Refcollid        *uint32 `json:"refcollid",omitempty`
	Refupperindexpr  []Node  `json:"refupperindexpr",omitempty`
	Reflowerindexpr  []Node  `json:"reflowerindexpr",omitempty`
	Refexpr          Node    `json:"refexpr",omitempty`
	Refassgnexpr     Node    `json:"refassgnexpr",omitempty`
}

func (*SubscriptingRef) node() {}

type FuncExpr struct {
	Xpr            Node         `json:"xpr",omitempty`
	Funcid         *uint32      `json:"funcid",omitempty`
	Funcresulttype *uint32      `json:"funcresulttype",omitempty`
	Funcretset     bool         `json:"funcretset",omitempty`
	Funcvariadic   bool         `json:"funcvariadic",omitempty`
	Funcformat     CoercionForm `json:"funcformat",omitempty`
	Funccollid     *uint32      `json:"funccollid",omitempty`
	Inputcollid    *uint32      `json:"inputcollid",omitempty`
	Args           []Node       `json:"args",omitempty`
	Location       int32        `json:"location",omitempty`
}

func (*FuncExpr) node() {}

type NamedArgExpr struct {
	Xpr       Node   `json:"xpr",omitempty`
	Arg       Node   `json:"arg",omitempty`
	Name      string `json:"name",omitempty`
	Argnumber int32  `json:"argnumber",omitempty`
	Location  int32  `json:"location",omitempty`
}

func (*NamedArgExpr) node() {}

type OpExpr struct {
	Xpr          Node    `json:"xpr",omitempty`
	Opno         *uint32 `json:"opno",omitempty`
	Opfuncid     *uint32 `json:"opfuncid",omitempty`
	Opresulttype *uint32 `json:"opresulttype",omitempty`
	Opretset     bool    `json:"opretset",omitempty`
	Opcollid     *uint32 `json:"opcollid",omitempty`
	Inputcollid  *uint32 `json:"inputcollid",omitempty`
	Args         []Node  `json:"args",omitempty`
	Location     int32   `json:"location",omitempty`
}

func (*OpExpr) node() {}

type DistinctExpr struct {
	Xpr          Node    `json:"xpr",omitempty`
	Opno         *uint32 `json:"opno",omitempty`
	Opfuncid     *uint32 `json:"opfuncid",omitempty`
	Opresulttype *uint32 `json:"opresulttype",omitempty`
	Opretset     bool    `json:"opretset",omitempty`
	Opcollid     *uint32 `json:"opcollid",omitempty`
	Inputcollid  *uint32 `json:"inputcollid",omitempty`
	Args         []Node  `json:"args",omitempty`
	Location     int32   `json:"location",omitempty`
}

func (*DistinctExpr) node() {}

type NullIfExpr struct {
	Xpr          Node    `json:"xpr",omitempty`
	Opno         *uint32 `json:"opno",omitempty`
	Opfuncid     *uint32 `json:"opfuncid",omitempty`
	Opresulttype *uint32 `json:"opresulttype",omitempty`
	Opretset     bool    `json:"opretset",omitempty`
	Opcollid     *uint32 `json:"opcollid",omitempty`
	Inputcollid  *uint32 `json:"inputcollid",omitempty`
	Args         []Node  `json:"args",omitempty`
	Location     int32   `json:"location",omitempty`
}

func (*NullIfExpr) node() {}

type ScalarArrayOpExpr struct {
	Xpr         Node    `json:"xpr",omitempty`
	Opno        *uint32 `json:"opno",omitempty`
	Opfuncid    *uint32 `json:"opfuncid",omitempty`
	UseOr       bool    `json:"useOr",omitempty`
	Inputcollid *uint32 `json:"inputcollid",omitempty`
	Args        []Node  `json:"args",omitempty`
	Location    int32   `json:"location",omitempty`
}

func (*ScalarArrayOpExpr) node() {}

type BoolExpr struct {
	Xpr      Node         `json:"xpr",omitempty`
	Boolop   BoolExprType `json:"boolop",omitempty`
	Args     []Node       `json:"args",omitempty`
	Location int32        `json:"location",omitempty`
}

func (*BoolExpr) node() {}

type SubLink struct {
	Xpr         Node        `json:"xpr",omitempty`
	SubLinkType SubLinkType `json:"subLinkType",omitempty`
	SubLinkID   int32       `json:"subLinkId",omitempty`
	Testexpr    Node        `json:"testexpr",omitempty`
	OperName    []Node      `json:"operName",omitempty`
	Subselect   Node        `json:"subselect",omitempty`
	Location    int32       `json:"location",omitempty`
}

func (*SubLink) node() {}

type SubPlan struct {
	Xpr               Node        `json:"xpr",omitempty`
	SubLinkType       SubLinkType `json:"subLinkType",omitempty`
	Testexpr          Node        `json:"testexpr",omitempty`
	ParamIds          []Node      `json:"paramIds",omitempty`
	PlanID            int32       `json:"plan_id",omitempty`
	PlanName          string      `json:"plan_name",omitempty`
	FirstColType      *uint32     `json:"firstColType",omitempty`
	FirstColTypmod    int32       `json:"firstColTypmod",omitempty`
	FirstColCollation *uint32     `json:"firstColCollation",omitempty`
	UseHashTable      bool        `json:"useHashTable",omitempty`
	UnknownEqFalse    bool        `json:"unknownEqFalse",omitempty`
	ParallelSafe      bool        `json:"parallel_safe",omitempty`
	SetParam          []Node      `json:"setParam",omitempty`
	ParParam          []Node      `json:"parParam",omitempty`
	Args              []Node      `json:"args",omitempty`
	StartupCost       float64     `json:"startup_cost",omitempty`
	PerCallCost       float64     `json:"per_call_cost",omitempty`
}

func (*SubPlan) node() {}

type AlternativeSubPlan struct {
	Xpr      Node   `json:"xpr",omitempty`
	Subplans []Node `json:"subplans",omitempty`
}

func (*AlternativeSubPlan) node() {}

type FieldSelect struct {
	Xpr          Node    `json:"xpr",omitempty`
	Arg          Node    `json:"arg",omitempty`
	Fieldnum     int32   `json:"fieldnum",omitempty`
	Resulttype   *uint32 `json:"resulttype",omitempty`
	Resulttypmod int32   `json:"resulttypmod",omitempty`
	Resultcollid *uint32 `json:"resultcollid",omitempty`
}

func (*FieldSelect) node() {}

type FieldStore struct {
	Xpr        Node    `json:"xpr",omitempty`
	Arg        Node    `json:"arg",omitempty`
	Newvals    []Node  `json:"newvals",omitempty`
	Fieldnums  []Node  `json:"fieldnums",omitempty`
	Resulttype *uint32 `json:"resulttype",omitempty`
}

func (*FieldStore) node() {}

type RelabelType struct {
	Xpr           Node         `json:"xpr",omitempty`
	Arg           Node         `json:"arg",omitempty`
	Resulttype    *uint32      `json:"resulttype",omitempty`
	Resulttypmod  int32        `json:"resulttypmod",omitempty`
	Resultcollid  *uint32      `json:"resultcollid",omitempty`
	Relabelformat CoercionForm `json:"relabelformat",omitempty`
	Location      int32        `json:"location",omitempty`
}

func (*RelabelType) node() {}

type CoerceViaIo struct {
	Xpr          Node         `json:"xpr",omitempty`
	Arg          Node         `json:"arg",omitempty`
	Resulttype   *uint32      `json:"resulttype",omitempty`
	Resultcollid *uint32      `json:"resultcollid",omitempty`
	Coerceformat CoercionForm `json:"coerceformat",omitempty`
	Location     int32        `json:"location",omitempty`
}

func (*CoerceViaIo) node() {}

type ArrayCoerceExpr struct {
	Xpr          Node         `json:"xpr",omitempty`
	Arg          Node         `json:"arg",omitempty`
	Elemexpr     Node         `json:"elemexpr",omitempty`
	Resulttype   *uint32      `json:"resulttype",omitempty`
	Resulttypmod int32        `json:"resulttypmod",omitempty`
	Resultcollid *uint32      `json:"resultcollid",omitempty`
	Coerceformat CoercionForm `json:"coerceformat",omitempty`
	Location     int32        `json:"location",omitempty`
}

func (*ArrayCoerceExpr) node() {}

type ConvertRowtypeExpr struct {
	Xpr           Node         `json:"xpr",omitempty`
	Arg           Node         `json:"arg",omitempty`
	Resulttype    *uint32      `json:"resulttype",omitempty`
	Convertformat CoercionForm `json:"convertformat",omitempty`
	Location      int32        `json:"location",omitempty`
}

func (*ConvertRowtypeExpr) node() {}

type CollateExpr struct {
	Xpr      Node    `json:"xpr",omitempty`
	Arg      Node    `json:"arg",omitempty`
	CollOid  *uint32 `json:"collOid",omitempty`
	Location int32   `json:"location",omitempty`
}

func (*CollateExpr) node() {}

type CaseExpr struct {
	Xpr        Node    `json:"xpr",omitempty`
	Casetype   *uint32 `json:"casetype",omitempty`
	Casecollid *uint32 `json:"casecollid",omitempty`
	Arg        Node    `json:"arg",omitempty`
	Args       []Node  `json:"args",omitempty`
	Defresult  Node    `json:"defresult",omitempty`
	Location   int32   `json:"location",omitempty`
}

func (*CaseExpr) node() {}

type CaseWhen struct {
	Xpr      Node  `json:"xpr",omitempty`
	Expr     Node  `json:"expr",omitempty`
	Result   Node  `json:"result",omitempty`
	Location int32 `json:"location",omitempty`
}

func (*CaseWhen) node() {}

type CaseTestExpr struct {
	Xpr       Node    `json:"xpr",omitempty`
	TypeID    *uint32 `json:"typeId",omitempty`
	TypeMod   int32   `json:"typeMod",omitempty`
	Collation *uint32 `json:"collation",omitempty`
}

func (*CaseTestExpr) node() {}

type ArrayExpr struct {
	Xpr           Node    `json:"xpr",omitempty`
	ArrayTypeid   *uint32 `json:"array_typeid",omitempty`
	ArrayCollid   *uint32 `json:"array_collid",omitempty`
	ElementTypeid *uint32 `json:"element_typeid",omitempty`
	Elements      []Node  `json:"elements",omitempty`
	Multidims     bool    `json:"multidims",omitempty`
	Location      int32   `json:"location",omitempty`
}

func (*ArrayExpr) node() {}

type RowExpr struct {
	Xpr       Node         `json:"xpr",omitempty`
	Args      []Node       `json:"args",omitempty`
	RowTypeid *uint32      `json:"row_typeid",omitempty`
	RowFormat CoercionForm `json:"row_format",omitempty`
	Colnames  []Node       `json:"colnames",omitempty`
	Location  int32        `json:"location",omitempty`
}

func (*RowExpr) node() {}

type RowCompareExpr struct {
	Xpr          Node           `json:"xpr",omitempty`
	Rctype       RowCompareType `json:"rctype",omitempty`
	Opnos        []Node         `json:"opnos",omitempty`
	Opfamilies   []Node         `json:"opfamilies",omitempty`
	Inputcollids []Node         `json:"inputcollids",omitempty`
	Largs        []Node         `json:"largs",omitempty`
	Rargs        []Node         `json:"rargs",omitempty`
}

func (*RowCompareExpr) node() {}

type CoalesceExpr struct {
	Xpr            Node    `json:"xpr",omitempty`
	Coalescetype   *uint32 `json:"coalescetype",omitempty`
	Coalescecollid *uint32 `json:"coalescecollid",omitempty`
	Args           []Node  `json:"args",omitempty`
	Location       int32   `json:"location",omitempty`
}

func (*CoalesceExpr) node() {}

type MinMaxExpr struct {
	Xpr          Node     `json:"xpr",omitempty`
	Minmaxtype   *uint32  `json:"minmaxtype",omitempty`
	Minmaxcollid *uint32  `json:"minmaxcollid",omitempty`
	Inputcollid  *uint32  `json:"inputcollid",omitempty`
	Op           MinMaxOp `json:"op",omitempty`
	Args         []Node   `json:"args",omitempty`
	Location     int32    `json:"location",omitempty`
}

func (*MinMaxExpr) node() {}

type SqlvalueFunction struct {
	Xpr      Node               `json:"xpr",omitempty`
	Op       SQLValueFunctionOp `json:"op",omitempty`
	Type     *uint32            `json:"type",omitempty`
	Typmod   int32              `json:"typmod",omitempty`
	Location int32              `json:"location",omitempty`
}

func (*SqlvalueFunction) node() {}

type XmlExpr struct {
	Xpr       Node          `json:"xpr",omitempty`
	Op        XmlExprOp     `json:"op",omitempty`
	Name      string        `json:"name",omitempty`
	NamedArgs []Node        `json:"named_args",omitempty`
	ArgNames  []Node        `json:"arg_names",omitempty`
	Args      []Node        `json:"args",omitempty`
	Xmloption XmlOptionType `json:"xmloption",omitempty`
	Type      *uint32       `json:"type",omitempty`
	Typmod    int32         `json:"typmod",omitempty`
	Location  int32         `json:"location",omitempty`
}

func (*XmlExpr) node() {}

type NullTest struct {
	Xpr          Node         `json:"xpr",omitempty`
	Arg          Node         `json:"arg",omitempty`
	Nulltesttype NullTestType `json:"nulltesttype",omitempty`
	Argisrow     bool         `json:"argisrow",omitempty`
	Location     int32        `json:"location",omitempty`
}

func (*NullTest) node() {}

type BooleanTest struct {
	Xpr          Node         `json:"xpr",omitempty`
	Arg          Node         `json:"arg",omitempty`
	Booltesttype BoolTestType `json:"booltesttype",omitempty`
	Location     int32        `json:"location",omitempty`
}

func (*BooleanTest) node() {}

type CoerceToDomain struct {
	Xpr            Node         `json:"xpr",omitempty`
	Arg            Node         `json:"arg",omitempty`
	Resulttype     *uint32      `json:"resulttype",omitempty`
	Resulttypmod   int32        `json:"resulttypmod",omitempty`
	Resultcollid   *uint32      `json:"resultcollid",omitempty`
	Coercionformat CoercionForm `json:"coercionformat",omitempty`
	Location       int32        `json:"location",omitempty`
}

func (*CoerceToDomain) node() {}

type CoerceToDomainValue struct {
	Xpr       Node    `json:"xpr",omitempty`
	TypeID    *uint32 `json:"typeId",omitempty`
	TypeMod   int32   `json:"typeMod",omitempty`
	Collation *uint32 `json:"collation",omitempty`
	Location  int32   `json:"location",omitempty`
}

func (*CoerceToDomainValue) node() {}

type SetToDefault struct {
	Xpr       Node    `json:"xpr",omitempty`
	TypeID    *uint32 `json:"typeId",omitempty`
	TypeMod   int32   `json:"typeMod",omitempty`
	Collation *uint32 `json:"collation",omitempty`
	Location  int32   `json:"location",omitempty`
}

func (*SetToDefault) node() {}

type CurrentOfExpr struct {
	Xpr         Node    `json:"xpr",omitempty`
	Cvarno      *uint32 `json:"cvarno",omitempty`
	CursorName  string  `json:"cursor_name",omitempty`
	CursorParam int32   `json:"cursor_param",omitempty`
}

func (*CurrentOfExpr) node() {}

type NextValueExpr struct {
	Xpr    Node    `json:"xpr",omitempty`
	Seqid  *uint32 `json:"seqid",omitempty`
	TypeID *uint32 `json:"typeId",omitempty`
}

func (*NextValueExpr) node() {}

type InferenceElem struct {
	Xpr          Node    `json:"xpr",omitempty`
	Expr         Node    `json:"expr",omitempty`
	Infercollid  *uint32 `json:"infercollid",omitempty`
	Inferopclass *uint32 `json:"inferopclass",omitempty`
}

func (*InferenceElem) node() {}

type TargetEntry struct {
	Xpr             Node    `json:"xpr",omitempty`
	Expr            Node    `json:"expr",omitempty`
	Resno           int32   `json:"resno",omitempty`
	Resname         string  `json:"resname",omitempty`
	Ressortgroupref *uint32 `json:"ressortgroupref",omitempty`
	Resorigtbl      *uint32 `json:"resorigtbl",omitempty`
	Resorigcol      int32   `json:"resorigcol",omitempty`
	Resjunk         bool    `json:"resjunk",omitempty`
}

func (*TargetEntry) node() {}

type RangeTblRef struct {
	Rtindex int32 `json:"rtindex",omitempty`
}

func (*RangeTblRef) node() {}

type JoinExpr struct {
	Jointype    JoinType `json:"jointype",omitempty`
	IsNatural   bool     `json:"isNatural",omitempty`
	Larg        Node     `json:"larg",omitempty`
	Rarg        Node     `json:"rarg",omitempty`
	UsingClause []Node   `json:"usingClause",omitempty`
	Quals       Node     `json:"quals",omitempty`
	Alias       *Alias   `json:"alias",omitempty`
	Rtindex     int32    `json:"rtindex",omitempty`
}

func (*JoinExpr) node() {}

type FromExpr struct {
	Fromlist []Node `json:"fromlist",omitempty`
	Quals    Node   `json:"quals",omitempty`
}

func (*FromExpr) node() {}

type OnConflictExpr struct {
	Action          OnConflictAction `json:"action",omitempty`
	ArbiterElems    []Node           `json:"arbiterElems",omitempty`
	ArbiterWhere    Node             `json:"arbiterWhere",omitempty`
	Constraint      *uint32          `json:"constraint",omitempty`
	OnConflictSet   []Node           `json:"onConflictSet",omitempty`
	OnConflictWhere Node             `json:"onConflictWhere",omitempty`
	ExclRelIndex    int32            `json:"exclRelIndex",omitempty`
	ExclRelTlist    []Node           `json:"exclRelTlist",omitempty`
}

func (*OnConflictExpr) node() {}

type IntoClause struct {
	Rel            *RangeVar      `json:"rel",omitempty`
	ColNames       []Node         `json:"colNames",omitempty`
	AccessMethod   string         `json:"accessMethod",omitempty`
	Options        []Node         `json:"options",omitempty`
	OnCommit       OnCommitAction `json:"onCommit",omitempty`
	TableSpaceName string         `json:"tableSpaceName",omitempty`
	ViewQuery      Node           `json:"viewQuery",omitempty`
	SkipData       bool           `json:"skipData",omitempty`
}

func (*IntoClause) node() {}

type RawStmt struct {
	Stmt         Node  `json:"stmt",omitempty`
	StmtLocation int32 `json:"stmt_location",omitempty`
	StmtLen      int32 `json:"stmt_len",omitempty`
}

func (*RawStmt) node() {}

type Query struct {
	CommandType      CmdType         `json:"commandType",omitempty`
	QuerySource      QuerySource     `json:"querySource",omitempty`
	CanSetTag        bool            `json:"canSetTag",omitempty`
	UtilityStmt      Node            `json:"utilityStmt",omitempty`
	ResultRelation   int32           `json:"resultRelation",omitempty`
	HasAggs          bool            `json:"hasAggs",omitempty`
	HasWindowFuncs   bool            `json:"hasWindowFuncs",omitempty`
	HasTargetSrFs    bool            `json:"hasTargetSRFs",omitempty`
	HasSubLinks      bool            `json:"hasSubLinks",omitempty`
	HasDistinctOn    bool            `json:"hasDistinctOn",omitempty`
	HasRecursive     bool            `json:"hasRecursive",omitempty`
	HasModifyingCte  bool            `json:"hasModifyingCTE",omitempty`
	HasForUpdate     bool            `json:"hasForUpdate",omitempty`
	HasRowSecurity   bool            `json:"hasRowSecurity",omitempty`
	CteList          []Node          `json:"cteList",omitempty`
	Rtable           []Node          `json:"rtable",omitempty`
	Jointree         *FromExpr       `json:"jointree",omitempty`
	TargetList       []Node          `json:"targetList",omitempty`
	Override         OverridingKind  `json:"override",omitempty`
	OnConflict       *OnConflictExpr `json:"onConflict",omitempty`
	ReturningList    []Node          `json:"returningList",omitempty`
	GroupClause      []Node          `json:"groupClause",omitempty`
	GroupingSets     []Node          `json:"groupingSets",omitempty`
	HavingQual       Node            `json:"havingQual",omitempty`
	WindowClause     []Node          `json:"windowClause",omitempty`
	DistinctClause   []Node          `json:"distinctClause",omitempty`
	SortClause       []Node          `json:"sortClause",omitempty`
	LimitOffset      Node            `json:"limitOffset",omitempty`
	LimitCount       Node            `json:"limitCount",omitempty`
	RowMarks         []Node          `json:"rowMarks",omitempty`
	SetOperations    Node            `json:"setOperations",omitempty`
	ConstraintDeps   []Node          `json:"constraintDeps",omitempty`
	WithCheckOptions []Node          `json:"withCheckOptions",omitempty`
	StmtLocation     int32           `json:"stmt_location",omitempty`
	StmtLen          int32           `json:"stmt_len",omitempty`
}

func (*Query) node() {}

type InsertStmt struct {
	Relation         *RangeVar         `json:"relation",omitempty`
	Cols             []Node            `json:"cols",omitempty`
	SelectStmt       Node              `json:"selectStmt",omitempty`
	OnConflictClause *OnConflictClause `json:"onConflictClause",omitempty`
	ReturningList    []Node            `json:"returningList",omitempty`
	WithClause       *WithClause       `json:"withClause",omitempty`
	Override         OverridingKind    `json:"override",omitempty`
}

func (*InsertStmt) node() {}

type DeleteStmt struct {
	Relation      *RangeVar   `json:"relation",omitempty`
	UsingClause   []Node      `json:"usingClause",omitempty`
	WhereClause   Node        `json:"whereClause",omitempty`
	ReturningList []Node      `json:"returningList",omitempty`
	WithClause    *WithClause `json:"withClause",omitempty`
}

func (*DeleteStmt) node() {}

type UpdateStmt struct {
	Relation      *RangeVar   `json:"relation",omitempty`
	TargetList    []Node      `json:"targetList",omitempty`
	WhereClause   Node        `json:"whereClause",omitempty`
	FromClause    []Node      `json:"fromClause",omitempty`
	ReturningList []Node      `json:"returningList",omitempty`
	WithClause    *WithClause `json:"withClause",omitempty`
}

func (*UpdateStmt) node() {}

type SelectStmt struct {
	DistinctClause []Node       `json:"distinctClause",omitempty`
	IntoClause     *IntoClause  `json:"intoClause",omitempty`
	TargetList     []Node       `json:"targetList",omitempty`
	FromClause     []Node       `json:"fromClause",omitempty`
	WhereClause    Node         `json:"whereClause",omitempty`
	GroupClause    []Node       `json:"groupClause",omitempty`
	HavingClause   Node         `json:"havingClause",omitempty`
	WindowClause   []Node       `json:"windowClause",omitempty`
	ValuesLists    []Node       `json:"valuesLists",omitempty`
	SortClause     []Node       `json:"sortClause",omitempty`
	LimitOffset    Node         `json:"limitOffset",omitempty`
	LimitCount     Node         `json:"limitCount",omitempty`
	LockingClause  []Node       `json:"lockingClause",omitempty`
	WithClause     *WithClause  `json:"withClause",omitempty`
	Op             SetOperation `json:"op",omitempty`
	All            bool         `json:"all",omitempty`
	Larg           *SelectStmt  `json:"larg",omitempty`
	Rarg           *SelectStmt  `json:"rarg",omitempty`
}

func (*SelectStmt) node() {}

type AlterTableStmt struct {
	Relation  *RangeVar  `json:"relation",omitempty`
	Cmds      []Node     `json:"cmds",omitempty`
	Relkind   ObjectType `json:"relkind",omitempty`
	MissingOk bool       `json:"missing_ok",omitempty`
}

func (*AlterTableStmt) node() {}

type AlterTableCmd struct {
	Subtype   AlterTableType `json:"subtype",omitempty`
	Name      string         `json:"name",omitempty`
	Num       int32          `json:"num",omitempty`
	Newowner  *RoleSpec      `json:"newowner",omitempty`
	Def       Node           `json:"def",omitempty`
	Behavior  DropBehavior   `json:"behavior",omitempty`
	MissingOk bool           `json:"missing_ok",omitempty`
}

func (*AlterTableCmd) node() {}

type AlterDomainStmt struct {
	Subtype   string       `json:"subtype",omitempty`
	TypeName  []Node       `json:"typeName",omitempty`
	Name      string       `json:"name",omitempty`
	Def       Node         `json:"def",omitempty`
	Behavior  DropBehavior `json:"behavior",omitempty`
	MissingOk bool         `json:"missing_ok",omitempty`
}

func (*AlterDomainStmt) node() {}

type SetOperationStmt struct {
	Op            SetOperation `json:"op",omitempty`
	All           bool         `json:"all",omitempty`
	Larg          Node         `json:"larg",omitempty`
	Rarg          Node         `json:"rarg",omitempty`
	ColTypes      []Node       `json:"colTypes",omitempty`
	ColTypmods    []Node       `json:"colTypmods",omitempty`
	ColCollations []Node       `json:"colCollations",omitempty`
	GroupClauses  []Node       `json:"groupClauses",omitempty`
}

func (*SetOperationStmt) node() {}

type GrantStmt struct {
	IsGrant     bool            `json:"is_grant",omitempty`
	Targtype    GrantTargetType `json:"targtype",omitempty`
	Objtype     ObjectType      `json:"objtype",omitempty`
	Objects     []Node          `json:"objects",omitempty`
	Privileges  []Node          `json:"privileges",omitempty`
	Grantees    []Node          `json:"grantees",omitempty`
	GrantOption bool            `json:"grant_option",omitempty`
	Behavior    DropBehavior    `json:"behavior",omitempty`
}

func (*GrantStmt) node() {}

type GrantRoleStmt struct {
	GrantedRoles []Node       `json:"granted_roles",omitempty`
	GranteeRoles []Node       `json:"grantee_roles",omitempty`
	IsGrant      bool         `json:"is_grant",omitempty`
	AdminOpt     bool         `json:"admin_opt",omitempty`
	Grantor      *RoleSpec    `json:"grantor",omitempty`
	Behavior     DropBehavior `json:"behavior",omitempty`
}

func (*GrantRoleStmt) node() {}

type AlterDefaultPrivilegesStmt struct {
	Options []Node     `json:"options",omitempty`
	Action  *GrantStmt `json:"action",omitempty`
}

func (*AlterDefaultPrivilegesStmt) node() {}

type ClosePortalStmt struct {
	Portalname string `json:"portalname",omitempty`
}

func (*ClosePortalStmt) node() {}

type ClusterStmt struct {
	Relation  *RangeVar `json:"relation",omitempty`
	Indexname string    `json:"indexname",omitempty`
	Options   int32     `json:"options",omitempty`
}

func (*ClusterStmt) node() {}

type CopyStmt struct {
	Relation    *RangeVar `json:"relation",omitempty`
	Query       Node      `json:"query",omitempty`
	Attlist     []Node    `json:"attlist",omitempty`
	IsFrom      bool      `json:"is_from",omitempty`
	IsProgram   bool      `json:"is_program",omitempty`
	Filename    string    `json:"filename",omitempty`
	Options     []Node    `json:"options",omitempty`
	WhereClause Node      `json:"whereClause",omitempty`
}

func (*CopyStmt) node() {}

type CreateStmt struct {
	Relation       *RangeVar           `json:"relation",omitempty`
	TableElts      []Node              `json:"tableElts",omitempty`
	InhRelations   []Node              `json:"inhRelations",omitempty`
	Partbound      *PartitionBoundSpec `json:"partbound",omitempty`
	Partspec       *PartitionSpec      `json:"partspec",omitempty`
	OfTypename     *TypeName           `json:"ofTypename",omitempty`
	Constraints    []Node              `json:"constraints",omitempty`
	Options        []Node              `json:"options",omitempty`
	Oncommit       OnCommitAction      `json:"oncommit",omitempty`
	Tablespacename string              `json:"tablespacename",omitempty`
	AccessMethod   string              `json:"accessMethod",omitempty`
	IfNotExists    bool                `json:"if_not_exists",omitempty`
}

func (*CreateStmt) node() {}

type DefineStmt struct {
	Kind        ObjectType `json:"kind",omitempty`
	Oldstyle    bool       `json:"oldstyle",omitempty`
	Defnames    []Node     `json:"defnames",omitempty`
	Args        []Node     `json:"args",omitempty`
	Definition  []Node     `json:"definition",omitempty`
	IfNotExists bool       `json:"if_not_exists",omitempty`
	Replace     bool       `json:"replace",omitempty`
}

func (*DefineStmt) node() {}

type DropStmt struct {
	Objects    []Node       `json:"objects",omitempty`
	RemoveType ObjectType   `json:"removeType",omitempty`
	Behavior   DropBehavior `json:"behavior",omitempty`
	MissingOk  bool         `json:"missing_ok",omitempty`
	Concurrent bool         `json:"concurrent",omitempty`
}

func (*DropStmt) node() {}

type TruncateStmt struct {
	Relations   []Node       `json:"relations",omitempty`
	RestartSeqs bool         `json:"restart_seqs",omitempty`
	Behavior    DropBehavior `json:"behavior",omitempty`
}

func (*TruncateStmt) node() {}

type CommentStmt struct {
	Objtype ObjectType `json:"objtype",omitempty`
	Object  Node       `json:"object",omitempty`
	Comment string     `json:"comment",omitempty`
}

func (*CommentStmt) node() {}

type FetchStmt struct {
	Direction  FetchDirection `json:"direction",omitempty`
	HowMany    *int64         `json:"howMany",omitempty`
	Portalname string         `json:"portalname",omitempty`
	Ismove     bool           `json:"ismove",omitempty`
}

func (*FetchStmt) node() {}

type IndexStmt struct {
	Idxname              string    `json:"idxname",omitempty`
	Relation             *RangeVar `json:"relation",omitempty`
	AccessMethod         string    `json:"accessMethod",omitempty`
	TableSpace           string    `json:"tableSpace",omitempty`
	IndexParams          []Node    `json:"indexParams",omitempty`
	IndexIncludingParams []Node    `json:"indexIncludingParams",omitempty`
	Options              []Node    `json:"options",omitempty`
	WhereClause          Node      `json:"whereClause",omitempty`
	ExcludeOpNames       []Node    `json:"excludeOpNames",omitempty`
	Idxcomment           string    `json:"idxcomment",omitempty`
	IndexOid             *uint32   `json:"indexOid",omitempty`
	OldNode              *uint32   `json:"oldNode",omitempty`
	Unique               bool      `json:"unique",omitempty`
	Primary              bool      `json:"primary",omitempty`
	Isconstraint         bool      `json:"isconstraint",omitempty`
	Deferrable           bool      `json:"deferrable",omitempty`
	Initdeferred         bool      `json:"initdeferred",omitempty`
	Transformed          bool      `json:"transformed",omitempty`
	Concurrent           bool      `json:"concurrent",omitempty`
	IfNotExists          bool      `json:"if_not_exists",omitempty`
	ResetDefaultTblspc   bool      `json:"reset_default_tblspc",omitempty`
}

func (*IndexStmt) node() {}

type CreateFunctionStmt struct {
	IsProcedure bool      `json:"is_procedure",omitempty`
	Replace     bool      `json:"replace",omitempty`
	Funcname    []Node    `json:"funcname",omitempty`
	Parameters  []Node    `json:"parameters",omitempty`
	ReturnType  *TypeName `json:"returnType",omitempty`
	Options     []Node    `json:"options",omitempty`
}

func (*CreateFunctionStmt) node() {}

type AlterFunctionStmt struct {
	Objtype ObjectType      `json:"objtype",omitempty`
	Func    *ObjectWithArgs `json:"func",omitempty`
	Actions []Node          `json:"actions",omitempty`
}

func (*AlterFunctionStmt) node() {}

type DoStmt struct {
	Args []Node `json:"args",omitempty`
}

func (*DoStmt) node() {}

type RenameStmt struct {
	RenameType   ObjectType   `json:"renameType",omitempty`
	RelationType ObjectType   `json:"relationType",omitempty`
	Relation     *RangeVar    `json:"relation",omitempty`
	Object       Node         `json:"object",omitempty`
	Subname      string       `json:"subname",omitempty`
	Newname      string       `json:"newname",omitempty`
	Behavior     DropBehavior `json:"behavior",omitempty`
	MissingOk    bool         `json:"missing_ok",omitempty`
}

func (*RenameStmt) node() {}

type RuleStmt struct {
	Relation    *RangeVar `json:"relation",omitempty`
	Rulename    string    `json:"rulename",omitempty`
	WhereClause Node      `json:"whereClause",omitempty`
	Event       CmdType   `json:"event",omitempty`
	Instead     bool      `json:"instead",omitempty`
	Actions     []Node    `json:"actions",omitempty`
	Replace     bool      `json:"replace",omitempty`
}

func (*RuleStmt) node() {}

type NotifyStmt struct {
	Conditionname string `json:"conditionname",omitempty`
	Payload       string `json:"payload",omitempty`
}

func (*NotifyStmt) node() {}

type ListenStmt struct {
	Conditionname string `json:"conditionname",omitempty`
}

func (*ListenStmt) node() {}

type UnlistenStmt struct {
	Conditionname string `json:"conditionname",omitempty`
}

func (*UnlistenStmt) node() {}

type TransactionStmt struct {
	Kind          TransactionStmtKind `json:"kind",omitempty`
	Options       []Node              `json:"options",omitempty`
	SavepointName string              `json:"savepoint_name",omitempty`
	Gid           string              `json:"gid",omitempty`
	Chain         bool                `json:"chain",omitempty`
}

func (*TransactionStmt) node() {}

type ViewStmt struct {
	View            *RangeVar       `json:"view",omitempty`
	Aliases         []Node          `json:"aliases",omitempty`
	Query           Node            `json:"query",omitempty`
	Replace         bool            `json:"replace",omitempty`
	Options         []Node          `json:"options",omitempty`
	WithCheckOption ViewCheckOption `json:"withCheckOption",omitempty`
}

func (*ViewStmt) node() {}

type LoadStmt struct {
	Filename string `json:"filename",omitempty`
}

func (*LoadStmt) node() {}

type CreateDomainStmt struct {
	Domainname  []Node         `json:"domainname",omitempty`
	TypeName    *TypeName      `json:"typeName",omitempty`
	CollClause  *CollateClause `json:"collClause",omitempty`
	Constraints []Node         `json:"constraints",omitempty`
}

func (*CreateDomainStmt) node() {}

type CreatedbStmt struct {
	Dbname  string `json:"dbname",omitempty`
	Options []Node `json:"options",omitempty`
}

func (*CreatedbStmt) node() {}

type DropdbStmt struct {
	Dbname    string `json:"dbname",omitempty`
	MissingOk bool   `json:"missing_ok",omitempty`
}

func (*DropdbStmt) node() {}

type VacuumStmt struct {
	Options     []Node `json:"options",omitempty`
	Rels        []Node `json:"rels",omitempty`
	IsVacuumcmd bool   `json:"is_vacuumcmd",omitempty`
}

func (*VacuumStmt) node() {}

type ExplainStmt struct {
	Query   Node   `json:"query",omitempty`
	Options []Node `json:"options",omitempty`
}

func (*ExplainStmt) node() {}

type CreateTableAsStmt struct {
	Query        Node        `json:"query",omitempty`
	Into         *IntoClause `json:"into",omitempty`
	Relkind      ObjectType  `json:"relkind",omitempty`
	IsSelectInto bool        `json:"is_select_into",omitempty`
	IfNotExists  bool        `json:"if_not_exists",omitempty`
}

func (*CreateTableAsStmt) node() {}

type CreateSeqStmt struct {
	Sequence    *RangeVar `json:"sequence",omitempty`
	Options     []Node    `json:"options",omitempty`
	OwnerID     *uint32   `json:"ownerId",omitempty`
	ForIdentity bool      `json:"for_identity",omitempty`
	IfNotExists bool      `json:"if_not_exists",omitempty`
}

func (*CreateSeqStmt) node() {}

type AlterSeqStmt struct {
	Sequence    *RangeVar `json:"sequence",omitempty`
	Options     []Node    `json:"options",omitempty`
	ForIdentity bool      `json:"for_identity",omitempty`
	MissingOk   bool      `json:"missing_ok",omitempty`
}

func (*AlterSeqStmt) node() {}

type VariableSetStmt struct {
	Kind    VariableSetKind `json:"kind",omitempty`
	Name    string          `json:"name",omitempty`
	Args    []Node          `json:"args",omitempty`
	IsLocal bool            `json:"is_local",omitempty`
}

func (*VariableSetStmt) node() {}

type VariableShowStmt struct {
	Name string `json:"name",omitempty`
}

func (*VariableShowStmt) node() {}

type DiscardStmt struct {
	Target DiscardMode `json:"target",omitempty`
}

func (*DiscardStmt) node() {}

type CreateTrigStmt struct {
	Trigname       string    `json:"trigname",omitempty`
	Relation       *RangeVar `json:"relation",omitempty`
	Funcname       []Node    `json:"funcname",omitempty`
	Args           []Node    `json:"args",omitempty`
	Row            bool      `json:"row",omitempty`
	Timing         int32     `json:"timing",omitempty`
	Events         int32     `json:"events",omitempty`
	Columns        []Node    `json:"columns",omitempty`
	WhenClause     Node      `json:"whenClause",omitempty`
	Isconstraint   bool      `json:"isconstraint",omitempty`
	TransitionRels []Node    `json:"transitionRels",omitempty`
	Deferrable     bool      `json:"deferrable",omitempty`
	Initdeferred   bool      `json:"initdeferred",omitempty`
	Constrrel      *RangeVar `json:"constrrel",omitempty`
}

func (*CreateTrigStmt) node() {}

type CreatePlangStmt struct {
	Replace     bool   `json:"replace",omitempty`
	Plname      string `json:"plname",omitempty`
	Plhandler   []Node `json:"plhandler",omitempty`
	Plinline    []Node `json:"plinline",omitempty`
	Plvalidator []Node `json:"plvalidator",omitempty`
	Pltrusted   bool   `json:"pltrusted",omitempty`
}

func (*CreatePlangStmt) node() {}

type CreateRoleStmt struct {
	StmtType RoleStmtType `json:"stmt_type",omitempty`
	Role     string       `json:"role",omitempty`
	Options  []Node       `json:"options",omitempty`
}

func (*CreateRoleStmt) node() {}

type AlterRoleStmt struct {
	Role    *RoleSpec `json:"role",omitempty`
	Options []Node    `json:"options",omitempty`
	Action  int32     `json:"action",omitempty`
}

func (*AlterRoleStmt) node() {}

type DropRoleStmt struct {
	Roles     []Node `json:"roles",omitempty`
	MissingOk bool   `json:"missing_ok",omitempty`
}

func (*DropRoleStmt) node() {}

type LockStmt struct {
	Relations []Node `json:"relations",omitempty`
	Mode      int32  `json:"mode",omitempty`
	Nowait    bool   `json:"nowait",omitempty`
}

func (*LockStmt) node() {}

type ConstraintsSetStmt struct {
	Constraints []Node `json:"constraints",omitempty`
	Deferred    bool   `json:"deferred",omitempty`
}

func (*ConstraintsSetStmt) node() {}

type ReindexStmt struct {
	Kind       ReindexObjectType `json:"kind",omitempty`
	Relation   *RangeVar         `json:"relation",omitempty`
	Name       string            `json:"name",omitempty`
	Options    int32             `json:"options",omitempty`
	Concurrent bool              `json:"concurrent",omitempty`
}

func (*ReindexStmt) node() {}

type CheckPointStmt struct {
}

func (*CheckPointStmt) node() {}

type CreateSchemaStmt struct {
	Schemaname  string    `json:"schemaname",omitempty`
	Authrole    *RoleSpec `json:"authrole",omitempty`
	SchemaElts  []Node    `json:"schemaElts",omitempty`
	IfNotExists bool      `json:"if_not_exists",omitempty`
}

func (*CreateSchemaStmt) node() {}

type AlterDatabaseStmt struct {
	Dbname  string `json:"dbname",omitempty`
	Options []Node `json:"options",omitempty`
}

func (*AlterDatabaseStmt) node() {}

type AlterDatabaseSetStmt struct {
	Dbname  string           `json:"dbname",omitempty`
	Setstmt *VariableSetStmt `json:"setstmt",omitempty`
}

func (*AlterDatabaseSetStmt) node() {}

type AlterRoleSetStmt struct {
	Role     *RoleSpec        `json:"role",omitempty`
	Database string           `json:"database",omitempty`
	Setstmt  *VariableSetStmt `json:"setstmt",omitempty`
}

func (*AlterRoleSetStmt) node() {}

type CreateConversionStmt struct {
	ConversionName  []Node `json:"conversion_name",omitempty`
	ForEncodingName string `json:"for_encoding_name",omitempty`
	ToEncodingName  string `json:"to_encoding_name",omitempty`
	FuncName        []Node `json:"func_name",omitempty`
	Def             bool   `json:"def",omitempty`
}

func (*CreateConversionStmt) node() {}

type CreateCastStmt struct {
	Sourcetype *TypeName       `json:"sourcetype",omitempty`
	Targettype *TypeName       `json:"targettype",omitempty`
	Func       *ObjectWithArgs `json:"func",omitempty`
	Context    CoercionContext `json:"context",omitempty`
	Inout      bool            `json:"inout",omitempty`
}

func (*CreateCastStmt) node() {}

type CreateOpClassStmt struct {
	Opclassname  []Node    `json:"opclassname",omitempty`
	Opfamilyname []Node    `json:"opfamilyname",omitempty`
	Amname       string    `json:"amname",omitempty`
	Datatype     *TypeName `json:"datatype",omitempty`
	Items        []Node    `json:"items",omitempty`
	IsDefault    bool      `json:"isDefault",omitempty`
}

func (*CreateOpClassStmt) node() {}

type CreateOpFamilyStmt struct {
	Opfamilyname []Node `json:"opfamilyname",omitempty`
	Amname       string `json:"amname",omitempty`
}

func (*CreateOpFamilyStmt) node() {}

type AlterOpFamilyStmt struct {
	Opfamilyname []Node `json:"opfamilyname",omitempty`
	Amname       string `json:"amname",omitempty`
	IsDrop       bool   `json:"isDrop",omitempty`
	Items        []Node `json:"items",omitempty`
}

func (*AlterOpFamilyStmt) node() {}

type PrepareStmt struct {
	Name     string `json:"name",omitempty`
	Argtypes []Node `json:"argtypes",omitempty`
	Query    Node   `json:"query",omitempty`
}

func (*PrepareStmt) node() {}

type ExecuteStmt struct {
	Name   string `json:"name",omitempty`
	Params []Node `json:"params",omitempty`
}

func (*ExecuteStmt) node() {}

type DeallocateStmt struct {
	Name string `json:"name",omitempty`
}

func (*DeallocateStmt) node() {}

type DeclareCursorStmt struct {
	Portalname string `json:"portalname",omitempty`
	Options    int32  `json:"options",omitempty`
	Query      Node   `json:"query",omitempty`
}

func (*DeclareCursorStmt) node() {}

type CreateTableSpaceStmt struct {
	Tablespacename string    `json:"tablespacename",omitempty`
	Owner          *RoleSpec `json:"owner",omitempty`
	Location       string    `json:"location",omitempty`
	Options        []Node    `json:"options",omitempty`
}

func (*CreateTableSpaceStmt) node() {}

type DropTableSpaceStmt struct {
	Tablespacename string `json:"tablespacename",omitempty`
	MissingOk      bool   `json:"missing_ok",omitempty`
}

func (*DropTableSpaceStmt) node() {}

type AlterObjectDependsStmt struct {
	ObjectType ObjectType `json:"objectType",omitempty`
	Relation   *RangeVar  `json:"relation",omitempty`
	Object     Node       `json:"object",omitempty`
	Extname    Node       `json:"extname",omitempty`
}

func (*AlterObjectDependsStmt) node() {}

type AlterObjectSchemaStmt struct {
	ObjectType ObjectType `json:"objectType",omitempty`
	Relation   *RangeVar  `json:"relation",omitempty`
	Object     Node       `json:"object",omitempty`
	Newschema  string     `json:"newschema",omitempty`
	MissingOk  bool       `json:"missing_ok",omitempty`
}

func (*AlterObjectSchemaStmt) node() {}

type AlterOwnerStmt struct {
	ObjectType ObjectType `json:"objectType",omitempty`
	Relation   *RangeVar  `json:"relation",omitempty`
	Object     Node       `json:"object",omitempty`
	Newowner   *RoleSpec  `json:"newowner",omitempty`
}

func (*AlterOwnerStmt) node() {}

type AlterOperatorStmt struct {
	Opername *ObjectWithArgs `json:"opername",omitempty`
	Options  []Node          `json:"options",omitempty`
}

func (*AlterOperatorStmt) node() {}

type DropOwnedStmt struct {
	Roles    []Node       `json:"roles",omitempty`
	Behavior DropBehavior `json:"behavior",omitempty`
}

func (*DropOwnedStmt) node() {}

type ReassignOwnedStmt struct {
	Roles   []Node    `json:"roles",omitempty`
	Newrole *RoleSpec `json:"newrole",omitempty`
}

func (*ReassignOwnedStmt) node() {}

type CompositeTypeStmt struct {
	Typevar    *RangeVar `json:"typevar",omitempty`
	Coldeflist []Node    `json:"coldeflist",omitempty`
}

func (*CompositeTypeStmt) node() {}

type CreateEnumStmt struct {
	TypeName []Node `json:"typeName",omitempty`
	Vals     []Node `json:"vals",omitempty`
}

func (*CreateEnumStmt) node() {}

type CreateRangeStmt struct {
	TypeName []Node `json:"typeName",omitempty`
	Params   []Node `json:"params",omitempty`
}

func (*CreateRangeStmt) node() {}

type AlterEnumStmt struct {
	TypeName           []Node `json:"typeName",omitempty`
	OldVal             string `json:"oldVal",omitempty`
	NewVal             string `json:"newVal",omitempty`
	NewValNeighbor     string `json:"newValNeighbor",omitempty`
	NewValIsAfter      bool   `json:"newValIsAfter",omitempty`
	SkipIfNewValExists bool   `json:"skipIfNewValExists",omitempty`
}

func (*AlterEnumStmt) node() {}

type AlterTsdictionaryStmt struct {
	Dictname []Node `json:"dictname",omitempty`
	Options  []Node `json:"options",omitempty`
}

func (*AlterTsdictionaryStmt) node() {}

type AlterTsconfigurationStmt struct {
	Kind      AlterTSConfigType `json:"kind",omitempty`
	Cfgname   []Node            `json:"cfgname",omitempty`
	Tokentype []Node            `json:"tokentype",omitempty`
	Dicts     []Node            `json:"dicts",omitempty`
	Override  bool              `json:"override",omitempty`
	Replace   bool              `json:"replace",omitempty`
	MissingOk bool              `json:"missing_ok",omitempty`
}

func (*AlterTsconfigurationStmt) node() {}

type CreateFdwStmt struct {
	Fdwname     string `json:"fdwname",omitempty`
	FuncOptions []Node `json:"func_options",omitempty`
	Options     []Node `json:"options",omitempty`
}

func (*CreateFdwStmt) node() {}

type AlterFdwStmt struct {
	Fdwname     string `json:"fdwname",omitempty`
	FuncOptions []Node `json:"func_options",omitempty`
	Options     []Node `json:"options",omitempty`
}

func (*AlterFdwStmt) node() {}

type CreateForeignServerStmt struct {
	Servername  string `json:"servername",omitempty`
	Servertype  string `json:"servertype",omitempty`
	Version     string `json:"version",omitempty`
	Fdwname     string `json:"fdwname",omitempty`
	IfNotExists bool   `json:"if_not_exists",omitempty`
	Options     []Node `json:"options",omitempty`
}

func (*CreateForeignServerStmt) node() {}

type AlterForeignServerStmt struct {
	Servername string `json:"servername",omitempty`
	Version    string `json:"version",omitempty`
	Options    []Node `json:"options",omitempty`
	HasVersion bool   `json:"has_version",omitempty`
}

func (*AlterForeignServerStmt) node() {}

type CreateUserMappingStmt struct {
	User        *RoleSpec `json:"user",omitempty`
	Servername  string    `json:"servername",omitempty`
	IfNotExists bool      `json:"if_not_exists",omitempty`
	Options     []Node    `json:"options",omitempty`
}

func (*CreateUserMappingStmt) node() {}

type AlterUserMappingStmt struct {
	User       *RoleSpec `json:"user",omitempty`
	Servername string    `json:"servername",omitempty`
	Options    []Node    `json:"options",omitempty`
}

func (*AlterUserMappingStmt) node() {}

type DropUserMappingStmt struct {
	User       *RoleSpec `json:"user",omitempty`
	Servername string    `json:"servername",omitempty`
	MissingOk  bool      `json:"missing_ok",omitempty`
}

func (*DropUserMappingStmt) node() {}

type AlterTableSpaceOptionsStmt struct {
	Tablespacename string `json:"tablespacename",omitempty`
	Options        []Node `json:"options",omitempty`
	IsReset        bool   `json:"isReset",omitempty`
}

func (*AlterTableSpaceOptionsStmt) node() {}

type AlterTableMoveAllStmt struct {
	OrigTablespacename string     `json:"orig_tablespacename",omitempty`
	Objtype            ObjectType `json:"objtype",omitempty`
	Roles              []Node     `json:"roles",omitempty`
	NewTablespacename  string     `json:"new_tablespacename",omitempty`
	Nowait             bool       `json:"nowait",omitempty`
}

func (*AlterTableMoveAllStmt) node() {}

type SecLabelStmt struct {
	Objtype  ObjectType `json:"objtype",omitempty`
	Object   Node       `json:"object",omitempty`
	Provider string     `json:"provider",omitempty`
	Label    string     `json:"label",omitempty`
}

func (*SecLabelStmt) node() {}

type CreateForeignTableStmt struct {
	Base       *CreateStmt `json:"base",omitempty`
	Servername string      `json:"servername",omitempty`
	Options    []Node      `json:"options",omitempty`
}

func (*CreateForeignTableStmt) node() {}

type ImportForeignSchemaStmt struct {
	ServerName   string                  `json:"server_name",omitempty`
	RemoteSchema string                  `json:"remote_schema",omitempty`
	LocalSchema  string                  `json:"local_schema",omitempty`
	ListType     ImportForeignSchemaType `json:"list_type",omitempty`
	TableList    []Node                  `json:"table_list",omitempty`
	Options      []Node                  `json:"options",omitempty`
}

func (*ImportForeignSchemaStmt) node() {}

type CreateExtensionStmt struct {
	Extname     string `json:"extname",omitempty`
	IfNotExists bool   `json:"if_not_exists",omitempty`
	Options     []Node `json:"options",omitempty`
}

func (*CreateExtensionStmt) node() {}

type AlterExtensionStmt struct {
	Extname string `json:"extname",omitempty`
	Options []Node `json:"options",omitempty`
}

func (*AlterExtensionStmt) node() {}

type AlterExtensionContentsStmt struct {
	Extname string     `json:"extname",omitempty`
	Action  int32      `json:"action",omitempty`
	Objtype ObjectType `json:"objtype",omitempty`
	Object  Node       `json:"object",omitempty`
}

func (*AlterExtensionContentsStmt) node() {}

type CreateEventTrigStmt struct {
	Trigname   string `json:"trigname",omitempty`
	Eventname  string `json:"eventname",omitempty`
	Whenclause []Node `json:"whenclause",omitempty`
	Funcname   []Node `json:"funcname",omitempty`
}

func (*CreateEventTrigStmt) node() {}

type AlterEventTrigStmt struct {
	Trigname  string `json:"trigname",omitempty`
	Tgenabled string `json:"tgenabled",omitempty`
}

func (*AlterEventTrigStmt) node() {}

type RefreshMatViewStmt struct {
	Concurrent bool      `json:"concurrent",omitempty`
	SkipData   bool      `json:"skipData",omitempty`
	Relation   *RangeVar `json:"relation",omitempty`
}

func (*RefreshMatViewStmt) node() {}

type ReplicaIdentityStmt struct {
	IdentityType string `json:"identity_type",omitempty`
	Name         string `json:"name",omitempty`
}

func (*ReplicaIdentityStmt) node() {}

type AlterSystemStmt struct {
	Setstmt *VariableSetStmt `json:"setstmt",omitempty`
}

func (*AlterSystemStmt) node() {}

type CreatePolicyStmt struct {
	PolicyName string    `json:"policy_name",omitempty`
	Table      *RangeVar `json:"table",omitempty`
	CmdName    string    `json:"cmd_name",omitempty`
	Permissive bool      `json:"permissive",omitempty`
	Roles      []Node    `json:"roles",omitempty`
	Qual       Node      `json:"qual",omitempty`
	WithCheck  Node      `json:"with_check",omitempty`
}

func (*CreatePolicyStmt) node() {}

type AlterPolicyStmt struct {
	PolicyName string    `json:"policy_name",omitempty`
	Table      *RangeVar `json:"table",omitempty`
	Roles      []Node    `json:"roles",omitempty`
	Qual       Node      `json:"qual",omitempty`
	WithCheck  Node      `json:"with_check",omitempty`
}

func (*AlterPolicyStmt) node() {}

type CreateTransformStmt struct {
	Replace  bool            `json:"replace",omitempty`
	TypeName *TypeName       `json:"type_name",omitempty`
	Lang     string          `json:"lang",omitempty`
	Fromsql  *ObjectWithArgs `json:"fromsql",omitempty`
	Tosql    *ObjectWithArgs `json:"tosql",omitempty`
}

func (*CreateTransformStmt) node() {}

type CreateAmStmt struct {
	Amname      string `json:"amname",omitempty`
	HandlerName []Node `json:"handler_name",omitempty`
	Amtype      string `json:"amtype",omitempty`
}

func (*CreateAmStmt) node() {}

type CreatePublicationStmt struct {
	Pubname      string `json:"pubname",omitempty`
	Options      []Node `json:"options",omitempty`
	Tables       []Node `json:"tables",omitempty`
	ForAllTables bool   `json:"for_all_tables",omitempty`
}

func (*CreatePublicationStmt) node() {}

type AlterPublicationStmt struct {
	Pubname      string        `json:"pubname",omitempty`
	Options      []Node        `json:"options",omitempty`
	Tables       []Node        `json:"tables",omitempty`
	ForAllTables bool          `json:"for_all_tables",omitempty`
	TableAction  DefElemAction `json:"tableAction",omitempty`
}

func (*AlterPublicationStmt) node() {}

type CreateSubscriptionStmt struct {
	Subname     string `json:"subname",omitempty`
	Conninfo    string `json:"conninfo",omitempty`
	Publication []Node `json:"publication",omitempty`
	Options     []Node `json:"options",omitempty`
}

func (*CreateSubscriptionStmt) node() {}

type AlterSubscriptionStmt struct {
	Kind        AlterSubscriptionType `json:"kind",omitempty`
	Subname     string                `json:"subname",omitempty`
	Conninfo    string                `json:"conninfo",omitempty`
	Publication []Node                `json:"publication",omitempty`
	Options     []Node                `json:"options",omitempty`
}

func (*AlterSubscriptionStmt) node() {}

type DropSubscriptionStmt struct {
	Subname   string       `json:"subname",omitempty`
	MissingOk bool         `json:"missing_ok",omitempty`
	Behavior  DropBehavior `json:"behavior",omitempty`
}

func (*DropSubscriptionStmt) node() {}

type CreateStatsStmt struct {
	Defnames    []Node `json:"defnames",omitempty`
	StatTypes   []Node `json:"stat_types",omitempty`
	Exprs       []Node `json:"exprs",omitempty`
	Relations   []Node `json:"relations",omitempty`
	Stxcomment  string `json:"stxcomment",omitempty`
	IfNotExists bool   `json:"if_not_exists",omitempty`
}

func (*CreateStatsStmt) node() {}

type AlterCollationStmt struct {
	Collname []Node `json:"collname",omitempty`
}

func (*AlterCollationStmt) node() {}

type CallStmt struct {
	Funccall *FuncCall `json:"funccall",omitempty`
	Funcexpr *FuncExpr `json:"funcexpr",omitempty`
}

func (*CallStmt) node() {}

type AExpr struct {
	Kind     A_Expr_Kind `json:"kind",omitempty`
	Name     []Node      `json:"name",omitempty`
	Lexpr    Node        `json:"lexpr",omitempty`
	Rexpr    Node        `json:"rexpr",omitempty`
	Location int32       `json:"location",omitempty`
}

func (*AExpr) node() {}

type ColumnRef struct {
	Fields   []Node `json:"fields",omitempty`
	Location int32  `json:"location",omitempty`
}

func (*ColumnRef) node() {}

type ParamRef struct {
	Number   int32 `json:"number",omitempty`
	Location int32 `json:"location",omitempty`
}

func (*ParamRef) node() {}

type AConst struct {
	Val      Node  `json:"val",omitempty`
	Location int32 `json:"location",omitempty`
}

func (*AConst) node() {}

type FuncCall struct {
	Funcname       []Node     `json:"funcname",omitempty`
	Args           []Node     `json:"args",omitempty`
	AggOrder       []Node     `json:"agg_order",omitempty`
	AggFilter      Node       `json:"agg_filter",omitempty`
	AggWithinGroup bool       `json:"agg_within_group",omitempty`
	AggStar        bool       `json:"agg_star",omitempty`
	AggDistinct    bool       `json:"agg_distinct",omitempty`
	FuncVariadic   bool       `json:"func_variadic",omitempty`
	Over           *WindowDef `json:"over",omitempty`
	Location       int32      `json:"location",omitempty`
}

func (*FuncCall) node() {}

type AStar struct {
}

func (*AStar) node() {}

type AIndices struct {
	IsSlice bool `json:"is_slice",omitempty`
	Lidx    Node `json:"lidx",omitempty`
	Uidx    Node `json:"uidx",omitempty`
}

func (*AIndices) node() {}

type AIndirection struct {
	Arg         Node   `json:"arg",omitempty`
	Indirection []Node `json:"indirection",omitempty`
}

func (*AIndirection) node() {}

type AArrayExpr struct {
	Elements []Node `json:"elements",omitempty`
	Location int32  `json:"location",omitempty`
}

func (*AArrayExpr) node() {}

type ResTarget struct {
	Name        string `json:"name",omitempty`
	Indirection []Node `json:"indirection",omitempty`
	Val         Node   `json:"val",omitempty`
	Location    int32  `json:"location",omitempty`
}

func (*ResTarget) node() {}

type MultiAssignRef struct {
	Source   Node  `json:"source",omitempty`
	Colno    int32 `json:"colno",omitempty`
	Ncolumns int32 `json:"ncolumns",omitempty`
}

func (*MultiAssignRef) node() {}

type TypeCast struct {
	Arg      Node      `json:"arg",omitempty`
	TypeName *TypeName `json:"typeName",omitempty`
	Location int32     `json:"location",omitempty`
}

func (*TypeCast) node() {}

type CollateClause struct {
	Arg      Node   `json:"arg",omitempty`
	Collname []Node `json:"collname",omitempty`
	Location int32  `json:"location",omitempty`
}

func (*CollateClause) node() {}

type SortBy struct {
	Node        Node        `json:"node",omitempty`
	SortbyDir   SortByDir   `json:"sortby_dir",omitempty`
	SortbyNulls SortByNulls `json:"sortby_nulls",omitempty`
	UseOp       []Node      `json:"useOp",omitempty`
	Location    int32       `json:"location",omitempty`
}

func (*SortBy) node() {}

type WindowDef struct {
	Name            string `json:"name",omitempty`
	Refname         string `json:"refname",omitempty`
	PartitionClause []Node `json:"partitionClause",omitempty`
	OrderClause     []Node `json:"orderClause",omitempty`
	FrameOptions    int32  `json:"frameOptions",omitempty`
	StartOffset     Node   `json:"startOffset",omitempty`
	EndOffset       Node   `json:"endOffset",omitempty`
	Location        int32  `json:"location",omitempty`
}

func (*WindowDef) node() {}

type RangeSubselect struct {
	Lateral  bool   `json:"lateral",omitempty`
	Subquery Node   `json:"subquery",omitempty`
	Alias    *Alias `json:"alias",omitempty`
}

func (*RangeSubselect) node() {}

type RangeFunction struct {
	Lateral    bool   `json:"lateral",omitempty`
	Ordinality bool   `json:"ordinality",omitempty`
	IsRowsfrom bool   `json:"is_rowsfrom",omitempty`
	Functions  []Node `json:"functions",omitempty`
	Alias      *Alias `json:"alias",omitempty`
	Coldeflist []Node `json:"coldeflist",omitempty`
}

func (*RangeFunction) node() {}

type RangeTableSample struct {
	Relation   Node   `json:"relation",omitempty`
	Method     []Node `json:"method",omitempty`
	Args       []Node `json:"args",omitempty`
	Repeatable Node   `json:"repeatable",omitempty`
	Location   int32  `json:"location",omitempty`
}

func (*RangeTableSample) node() {}

type RangeTableFunc struct {
	Lateral    bool   `json:"lateral",omitempty`
	Docexpr    Node   `json:"docexpr",omitempty`
	Rowexpr    Node   `json:"rowexpr",omitempty`
	Namespaces []Node `json:"namespaces",omitempty`
	Columns    []Node `json:"columns",omitempty`
	Alias      *Alias `json:"alias",omitempty`
	Location   int32  `json:"location",omitempty`
}

func (*RangeTableFunc) node() {}

type RangeTableFuncCol struct {
	Colname       string    `json:"colname",omitempty`
	TypeName      *TypeName `json:"typeName",omitempty`
	ForOrdinality bool      `json:"for_ordinality",omitempty`
	IsNotNull     bool      `json:"is_not_null",omitempty`
	Colexpr       Node      `json:"colexpr",omitempty`
	Coldefexpr    Node      `json:"coldefexpr",omitempty`
	Location      int32     `json:"location",omitempty`
}

func (*RangeTableFuncCol) node() {}

type TypeName struct {
	Names       []Node  `json:"names",omitempty`
	TypeOid     *uint32 `json:"typeOid",omitempty`
	Setof       bool    `json:"setof",omitempty`
	PctType     bool    `json:"pct_type",omitempty`
	Typmods     []Node  `json:"typmods",omitempty`
	Typemod     int32   `json:"typemod",omitempty`
	ArrayBounds []Node  `json:"arrayBounds",omitempty`
	Location    int32   `json:"location",omitempty`
}

func (*TypeName) node() {}

type ColumnDef struct {
	Colname          string         `json:"colname",omitempty`
	TypeName         *TypeName      `json:"typeName",omitempty`
	Inhcount         int32          `json:"inhcount",omitempty`
	IsLocal          bool           `json:"is_local",omitempty`
	IsNotNull        bool           `json:"is_not_null",omitempty`
	IsFromType       bool           `json:"is_from_type",omitempty`
	Storage          string         `json:"storage",omitempty`
	RawDefault       Node           `json:"raw_default",omitempty`
	CookedDefault    Node           `json:"cooked_default",omitempty`
	Identity         string         `json:"identity",omitempty`
	IdentitySequence *RangeVar      `json:"identitySequence",omitempty`
	Generated        string         `json:"generated",omitempty`
	CollClause       *CollateClause `json:"collClause",omitempty`
	CollOid          *uint32        `json:"collOid",omitempty`
	Constraints      []Node         `json:"constraints",omitempty`
	Fdwoptions       []Node         `json:"fdwoptions",omitempty`
	Location         int32          `json:"location",omitempty`
}

func (*ColumnDef) node() {}

type IndexElem struct {
	Name          string      `json:"name",omitempty`
	Expr          Node        `json:"expr",omitempty`
	Indexcolname  string      `json:"indexcolname",omitempty`
	Collation     []Node      `json:"collation",omitempty`
	Opclass       []Node      `json:"opclass",omitempty`
	Ordering      SortByDir   `json:"ordering",omitempty`
	NullsOrdering SortByNulls `json:"nulls_ordering",omitempty`
}

func (*IndexElem) node() {}

type Constraint struct {
	Contype            ConstrType `json:"contype",omitempty`
	Conname            string     `json:"conname",omitempty`
	Deferrable         bool       `json:"deferrable",omitempty`
	Initdeferred       bool       `json:"initdeferred",omitempty`
	Location           int32      `json:"location",omitempty`
	IsNoInherit        bool       `json:"is_no_inherit",omitempty`
	RawExpr            Node       `json:"raw_expr",omitempty`
	CookedExpr         string     `json:"cooked_expr",omitempty`
	GeneratedWhen      string     `json:"generated_when",omitempty`
	Keys               []Node     `json:"keys",omitempty`
	Including          []Node     `json:"including",omitempty`
	Exclusions         []Node     `json:"exclusions",omitempty`
	Options            []Node     `json:"options",omitempty`
	Indexname          string     `json:"indexname",omitempty`
	Indexspace         string     `json:"indexspace",omitempty`
	ResetDefaultTblspc bool       `json:"reset_default_tblspc",omitempty`
	AccessMethod       string     `json:"access_method",omitempty`
	WhereClause        Node       `json:"where_clause",omitempty`
	Pktable            *RangeVar  `json:"pktable",omitempty`
	FkAttrs            []Node     `json:"fk_attrs",omitempty`
	PkAttrs            []Node     `json:"pk_attrs",omitempty`
	FkMatchtype        string     `json:"fk_matchtype",omitempty`
	FkUpdAction        string     `json:"fk_upd_action",omitempty`
	FkDelAction        string     `json:"fk_del_action",omitempty`
	OldConpfeqop       []Node     `json:"old_conpfeqop",omitempty`
	OldPktableOid      *uint32    `json:"old_pktable_oid",omitempty`
	SkipValidation     bool       `json:"skip_validation",omitempty`
	InitiallyValid     bool       `json:"initially_valid",omitempty`
}

func (*Constraint) node() {}

type DefElem struct {
	Defnamespace string        `json:"defnamespace",omitempty`
	Defname      string        `json:"defname",omitempty`
	Arg          Node          `json:"arg",omitempty`
	Defaction    DefElemAction `json:"defaction",omitempty`
	Location     int32         `json:"location",omitempty`
}

func (*DefElem) node() {}

type RangeTblEntry struct {
	Rtekind         RTEKind            `json:"rtekind",omitempty`
	Relid           *uint32            `json:"relid",omitempty`
	Relkind         string             `json:"relkind",omitempty`
	Rellockmode     int32              `json:"rellockmode",omitempty`
	Tablesample     *TableSampleClause `json:"tablesample",omitempty`
	Subquery        *Query             `json:"subquery",omitempty`
	SecurityBarrier bool               `json:"security_barrier",omitempty`
	Jointype        JoinType           `json:"jointype",omitempty`
	Joinaliasvars   []Node             `json:"joinaliasvars",omitempty`
	Functions       []Node             `json:"functions",omitempty`
	Funcordinality  bool               `json:"funcordinality",omitempty`
	Tablefunc       *TableFunc         `json:"tablefunc",omitempty`
	ValuesLists     []Node             `json:"values_lists",omitempty`
	Ctename         string             `json:"ctename",omitempty`
	Ctelevelsup     *uint32            `json:"ctelevelsup",omitempty`
	SelfReference   bool               `json:"self_reference",omitempty`
	Coltypes        []Node             `json:"coltypes",omitempty`
	Coltypmods      []Node             `json:"coltypmods",omitempty`
	Colcollations   []Node             `json:"colcollations",omitempty`
	Enrname         string             `json:"enrname",omitempty`
	Enrtuples       float64            `json:"enrtuples",omitempty`
	Alias           *Alias             `json:"alias",omitempty`
	Eref            *Alias             `json:"eref",omitempty`
	Lateral         bool               `json:"lateral",omitempty`
	Inh             bool               `json:"inh",omitempty`
	InFromCl        bool               `json:"inFromCl",omitempty`
	RequiredPerms   *uint32            `json:"requiredPerms",omitempty`
	CheckAsUser     *uint32            `json:"checkAsUser",omitempty`
	SecurityQuals   []Node             `json:"securityQuals",omitempty`
}

func (*RangeTblEntry) node() {}

type RangeTblFunction struct {
	Funcexpr          Node   `json:"funcexpr",omitempty`
	Funccolcount      int32  `json:"funccolcount",omitempty`
	Funccolnames      []Node `json:"funccolnames",omitempty`
	Funccoltypes      []Node `json:"funccoltypes",omitempty`
	Funccoltypmods    []Node `json:"funccoltypmods",omitempty`
	Funccolcollations []Node `json:"funccolcollations",omitempty`
}

func (*RangeTblFunction) node() {}

type TableSampleClause struct {
	Tsmhandler *uint32 `json:"tsmhandler",omitempty`
	Args       []Node  `json:"args",omitempty`
	Repeatable Node    `json:"repeatable",omitempty`
}

func (*TableSampleClause) node() {}

type WithCheckOption struct {
	Kind     WCOKind `json:"kind",omitempty`
	Relname  string  `json:"relname",omitempty`
	Polname  string  `json:"polname",omitempty`
	Qual     Node    `json:"qual",omitempty`
	Cascaded bool    `json:"cascaded",omitempty`
}

func (*WithCheckOption) node() {}

type SortGroupClause struct {
	TleSortGroupRef *uint32 `json:"tleSortGroupRef",omitempty`
	Eqop            *uint32 `json:"eqop",omitempty`
	Sortop          *uint32 `json:"sortop",omitempty`
	NullsFirst      bool    `json:"nulls_first",omitempty`
	Hashable        bool    `json:"hashable",omitempty`
}

func (*SortGroupClause) node() {}

type GroupingSet struct {
	Kind     GroupingSetKind `json:"kind",omitempty`
	Content  []Node          `json:"content",omitempty`
	Location int32           `json:"location",omitempty`
}

func (*GroupingSet) node() {}

type WindowClause struct {
	Name              string  `json:"name",omitempty`
	Refname           string  `json:"refname",omitempty`
	PartitionClause   []Node  `json:"partitionClause",omitempty`
	OrderClause       []Node  `json:"orderClause",omitempty`
	FrameOptions      int32   `json:"frameOptions",omitempty`
	StartOffset       Node    `json:"startOffset",omitempty`
	EndOffset         Node    `json:"endOffset",omitempty`
	StartInRangeFunc  *uint32 `json:"startInRangeFunc",omitempty`
	EndInRangeFunc    *uint32 `json:"endInRangeFunc",omitempty`
	InRangeColl       *uint32 `json:"inRangeColl",omitempty`
	InRangeAsc        bool    `json:"inRangeAsc",omitempty`
	InRangeNullsFirst bool    `json:"inRangeNullsFirst",omitempty`
	Winref            *uint32 `json:"winref",omitempty`
	CopiedOrder       bool    `json:"copiedOrder",omitempty`
}

func (*WindowClause) node() {}

type ObjectWithArgs struct {
	Objname         []Node `json:"objname",omitempty`
	Objargs         []Node `json:"objargs",omitempty`
	ArgsUnspecified bool   `json:"args_unspecified",omitempty`
}

func (*ObjectWithArgs) node() {}

type AccessPriv struct {
	PrivName string `json:"priv_name",omitempty`
	Cols     []Node `json:"cols",omitempty`
}

func (*AccessPriv) node() {}

type CreateOpClassItem struct {
	Itemtype    int32           `json:"itemtype",omitempty`
	Name        *ObjectWithArgs `json:"name",omitempty`
	Number      int32           `json:"number",omitempty`
	OrderFamily []Node          `json:"order_family",omitempty`
	ClassArgs   []Node          `json:"class_args",omitempty`
	Storedtype  *TypeName       `json:"storedtype",omitempty`
}

func (*CreateOpClassItem) node() {}

type TableLikeClause struct {
	Relation *RangeVar `json:"relation",omitempty`
	Options  *uint32   `json:"options",omitempty`
}

func (*TableLikeClause) node() {}

type FunctionParameter struct {
	Name    string                `json:"name",omitempty`
	ArgType *TypeName             `json:"argType",omitempty`
	Mode    FunctionParameterMode `json:"mode",omitempty`
	Defexpr Node                  `json:"defexpr",omitempty`
}

func (*FunctionParameter) node() {}

type LockingClause struct {
	LockedRels []Node             `json:"lockedRels",omitempty`
	Strength   LockClauseStrength `json:"strength",omitempty`
	WaitPolicy LockWaitPolicy     `json:"waitPolicy",omitempty`
}

func (*LockingClause) node() {}

type RowMarkClause struct {
	Rti        *uint32            `json:"rti",omitempty`
	Strength   LockClauseStrength `json:"strength",omitempty`
	WaitPolicy LockWaitPolicy     `json:"waitPolicy",omitempty`
	PushedDown bool               `json:"pushedDown",omitempty`
}

func (*RowMarkClause) node() {}

type XmlSerialize struct {
	Xmloption XmlOptionType `json:"xmloption",omitempty`
	Expr      Node          `json:"expr",omitempty`
	TypeName  *TypeName     `json:"typeName",omitempty`
	Location  int32         `json:"location",omitempty`
}

func (*XmlSerialize) node() {}

type WithClause struct {
	Ctes      []Node `json:"ctes",omitempty`
	Recursive bool   `json:"recursive",omitempty`
	Location  int32  `json:"location",omitempty`
}

func (*WithClause) node() {}

type InferClause struct {
	IndexElems  []Node `json:"indexElems",omitempty`
	WhereClause Node   `json:"whereClause",omitempty`
	Conname     string `json:"conname",omitempty`
	Location    int32  `json:"location",omitempty`
}

func (*InferClause) node() {}

type OnConflictClause struct {
	Action      OnConflictAction `json:"action",omitempty`
	Infer       *InferClause     `json:"infer",omitempty`
	TargetList  []Node           `json:"targetList",omitempty`
	WhereClause Node             `json:"whereClause",omitempty`
	Location    int32            `json:"location",omitempty`
}

func (*OnConflictClause) node() {}

type CommonTableExpr struct {
	Ctename          string         `json:"ctename",omitempty`
	Aliascolnames    []Node         `json:"aliascolnames",omitempty`
	Ctematerialized  CTEMaterialize `json:"ctematerialized",omitempty`
	Ctequery         Node           `json:"ctequery",omitempty`
	Location         int32          `json:"location",omitempty`
	Cterecursive     bool           `json:"cterecursive",omitempty`
	Cterefcount      int32          `json:"cterefcount",omitempty`
	Ctecolnames      []Node         `json:"ctecolnames",omitempty`
	Ctecoltypes      []Node         `json:"ctecoltypes",omitempty`
	Ctecoltypmods    []Node         `json:"ctecoltypmods",omitempty`
	Ctecolcollations []Node         `json:"ctecolcollations",omitempty`
}

func (*CommonTableExpr) node() {}

type RoleSpec struct {
	Roletype RoleSpecType `json:"roletype",omitempty`
	Rolename string       `json:"rolename",omitempty`
	Location int32        `json:"location",omitempty`
}

func (*RoleSpec) node() {}

type TriggerTransition struct {
	Name    string `json:"name",omitempty`
	IsNew   bool   `json:"isNew",omitempty`
	IsTable bool   `json:"isTable",omitempty`
}

func (*TriggerTransition) node() {}

type PartitionElem struct {
	Name      string `json:"name",omitempty`
	Expr      Node   `json:"expr",omitempty`
	Collation []Node `json:"collation",omitempty`
	Opclass   []Node `json:"opclass",omitempty`
	Location  int32  `json:"location",omitempty`
}

func (*PartitionElem) node() {}

type PartitionSpec struct {
	Strategy   string `json:"strategy",omitempty`
	PartParams []Node `json:"partParams",omitempty`
	Location   int32  `json:"location",omitempty`
}

func (*PartitionSpec) node() {}

type PartitionBoundSpec struct {
	Strategy    string `json:"strategy",omitempty`
	IsDefault   bool   `json:"is_default",omitempty`
	Modulus     int32  `json:"modulus",omitempty`
	Remainder   int32  `json:"remainder",omitempty`
	Listdatums  []Node `json:"listdatums",omitempty`
	Lowerdatums []Node `json:"lowerdatums",omitempty`
	Upperdatums []Node `json:"upperdatums",omitempty`
	Location    int32  `json:"location",omitempty`
}

func (*PartitionBoundSpec) node() {}

type PartitionRangeDatum struct {
	Kind     PartitionRangeDatumKind `json:"kind",omitempty`
	Value    Node                    `json:"value",omitempty`
	Location int32                   `json:"location",omitempty`
}

func (*PartitionRangeDatum) node() {}

type PartitionCmd struct {
	Name  *RangeVar           `json:"name",omitempty`
	Bound *PartitionBoundSpec `json:"bound",omitempty`
}

func (*PartitionCmd) node() {}

type VacuumRelation struct {
	Relation *RangeVar `json:"relation",omitempty`
	Oid      *uint32   `json:"oid",omitempty`
	VaCols   []Node    `json:"va_cols",omitempty`
}

func (*VacuumRelation) node() {}

type InlineCodeBlock struct {
	SourceText    string  `json:"source_text",omitempty`
	LangOid       *uint32 `json:"langOid",omitempty`
	LangIsTrusted bool    `json:"langIsTrusted",omitempty`
	Atomic        bool    `json:"atomic",omitempty`
}

func (*InlineCodeBlock) node() {}

type CallContext struct {
	Atomic bool `json:"atomic",omitempty`
}

func (*CallContext) node() {}
